"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/block-stream2";
exports.ids = ["vendor-chunks/block-stream2"];
exports.modules = {

/***/ "(rsc)/./node_modules/block-stream2/index.js":
/*!*********************************************!*\
  !*** ./node_modules/block-stream2/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Transform } = __webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\");\nclass Block extends Transform {\n    constructor(size, opts = {}){\n        super(opts);\n        if (typeof size === \"object\") {\n            opts = size;\n            size = opts.size;\n        }\n        this.size = size || 512;\n        const { nopad, zeroPadding = true } = opts;\n        if (nopad) this._zeroPadding = false;\n        else this._zeroPadding = !!zeroPadding;\n        this._buffered = [];\n        this._bufferedBytes = 0;\n    }\n    _transform(buf, enc, next) {\n        this._bufferedBytes += buf.length;\n        this._buffered.push(buf);\n        while(this._bufferedBytes >= this.size){\n            this._bufferedBytes -= this.size;\n            // Assemble the buffers that will compose the final block\n            const blockBufs = [];\n            let blockBufsBytes = 0;\n            while(blockBufsBytes < this.size){\n                const b = this._buffered.shift();\n                if (blockBufsBytes + b.length <= this.size) {\n                    blockBufs.push(b);\n                    blockBufsBytes += b.length;\n                } else {\n                    // If the last buffer is larger than needed for the block, just\n                    // use the needed part\n                    const neededSize = this.size - blockBufsBytes;\n                    blockBufs.push(b.slice(0, neededSize));\n                    blockBufsBytes += neededSize;\n                    this._buffered.unshift(b.slice(neededSize));\n                }\n            }\n            // Then concat just those buffers, leaving the rest untouched in _buffered\n            this.push(Buffer.concat(blockBufs, this.size));\n        }\n        next();\n    }\n    _flush() {\n        if (this._bufferedBytes && this._zeroPadding) {\n            const zeroes = Buffer.alloc(this.size - this._bufferedBytes);\n            this._buffered.push(zeroes);\n            this.push(Buffer.concat(this._buffered));\n            this._buffered = null;\n        } else if (this._bufferedBytes) {\n            this.push(Buffer.concat(this._buffered));\n            this._buffered = null;\n        }\n        this.push(null);\n    }\n}\nmodule.exports = Block;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmxvY2stc3RyZWFtMi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxFQUFFQSxTQUFTLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFOUIsTUFBTUMsY0FBY0Y7SUFDbEJHLFlBQWFDLElBQUksRUFBRUMsT0FBTyxDQUFDLENBQUMsQ0FBRTtRQUM1QixLQUFLLENBQUNBO1FBRU4sSUFBSSxPQUFPRCxTQUFTLFVBQVU7WUFDNUJDLE9BQU9EO1lBQ1BBLE9BQU9DLEtBQUtELElBQUk7UUFDbEI7UUFFQSxJQUFJLENBQUNBLElBQUksR0FBR0EsUUFBUTtRQUVwQixNQUFNLEVBQUVFLEtBQUssRUFBRUMsY0FBYyxJQUFJLEVBQUUsR0FBR0Y7UUFFdEMsSUFBSUMsT0FBTyxJQUFJLENBQUNFLFlBQVksR0FBRzthQUMxQixJQUFJLENBQUNBLFlBQVksR0FBRyxDQUFDLENBQUNEO1FBRTNCLElBQUksQ0FBQ0UsU0FBUyxHQUFHLEVBQUU7UUFDbkIsSUFBSSxDQUFDQyxjQUFjLEdBQUc7SUFDeEI7SUFFQUMsV0FBWUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRTtRQUMxQixJQUFJLENBQUNKLGNBQWMsSUFBSUUsSUFBSUcsTUFBTTtRQUNqQyxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBSSxDQUFDSjtRQUVwQixNQUFPLElBQUksQ0FBQ0YsY0FBYyxJQUFJLElBQUksQ0FBQ04sSUFBSSxDQUFFO1lBQ3ZDLElBQUksQ0FBQ00sY0FBYyxJQUFJLElBQUksQ0FBQ04sSUFBSTtZQUVoQyx5REFBeUQ7WUFDekQsTUFBTWEsWUFBWSxFQUFFO1lBQ3BCLElBQUlDLGlCQUFpQjtZQUNyQixNQUFPQSxpQkFBaUIsSUFBSSxDQUFDZCxJQUFJLENBQUU7Z0JBQ2pDLE1BQU1lLElBQUksSUFBSSxDQUFDVixTQUFTLENBQUNXLEtBQUs7Z0JBRTlCLElBQUlGLGlCQUFpQkMsRUFBRUosTUFBTSxJQUFJLElBQUksQ0FBQ1gsSUFBSSxFQUFFO29CQUMxQ2EsVUFBVUQsSUFBSSxDQUFDRztvQkFDZkQsa0JBQWtCQyxFQUFFSixNQUFNO2dCQUM1QixPQUFPO29CQUNMLCtEQUErRDtvQkFDL0Qsc0JBQXNCO29CQUN0QixNQUFNTSxhQUFhLElBQUksQ0FBQ2pCLElBQUksR0FBR2M7b0JBQy9CRCxVQUFVRCxJQUFJLENBQUNHLEVBQUVHLEtBQUssQ0FBQyxHQUFHRDtvQkFDMUJILGtCQUFrQkc7b0JBQ2xCLElBQUksQ0FBQ1osU0FBUyxDQUFDYyxPQUFPLENBQUNKLEVBQUVHLEtBQUssQ0FBQ0Q7Z0JBQ2pDO1lBQ0Y7WUFFQSwwRUFBMEU7WUFDMUUsSUFBSSxDQUFDTCxJQUFJLENBQUNRLE9BQU9DLE1BQU0sQ0FBQ1IsV0FBVyxJQUFJLENBQUNiLElBQUk7UUFDOUM7UUFDQVU7SUFDRjtJQUVBWSxTQUFVO1FBQ1IsSUFBSSxJQUFJLENBQUNoQixjQUFjLElBQUksSUFBSSxDQUFDRixZQUFZLEVBQUU7WUFDNUMsTUFBTW1CLFNBQVNILE9BQU9JLEtBQUssQ0FBQyxJQUFJLENBQUN4QixJQUFJLEdBQUcsSUFBSSxDQUFDTSxjQUFjO1lBQzNELElBQUksQ0FBQ0QsU0FBUyxDQUFDTyxJQUFJLENBQUNXO1lBQ3BCLElBQUksQ0FBQ1gsSUFBSSxDQUFDUSxPQUFPQyxNQUFNLENBQUMsSUFBSSxDQUFDaEIsU0FBUztZQUN0QyxJQUFJLENBQUNBLFNBQVMsR0FBRztRQUNuQixPQUFPLElBQUksSUFBSSxDQUFDQyxjQUFjLEVBQUU7WUFDOUIsSUFBSSxDQUFDTSxJQUFJLENBQUNRLE9BQU9DLE1BQU0sQ0FBQyxJQUFJLENBQUNoQixTQUFTO1lBQ3RDLElBQUksQ0FBQ0EsU0FBUyxHQUFHO1FBQ25CO1FBQ0EsSUFBSSxDQUFDTyxJQUFJLENBQUM7SUFDWjtBQUNGO0FBRUFhLE9BQU9DLE9BQU8sR0FBRzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmlsZS1tYW5hZ2VtZW50LXN5c3RlbS8uL25vZGVfbW9kdWxlcy9ibG9jay1zdHJlYW0yL2luZGV4LmpzP2VmNDIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBUcmFuc2Zvcm0gfSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpXG5cbmNsYXNzIEJsb2NrIGV4dGVuZHMgVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IgKHNpemUsIG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpXG5cbiAgICBpZiAodHlwZW9mIHNpemUgPT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRzID0gc2l6ZVxuICAgICAgc2l6ZSA9IG9wdHMuc2l6ZVxuICAgIH1cblxuICAgIHRoaXMuc2l6ZSA9IHNpemUgfHwgNTEyXG5cbiAgICBjb25zdCB7IG5vcGFkLCB6ZXJvUGFkZGluZyA9IHRydWUgfSA9IG9wdHNcblxuICAgIGlmIChub3BhZCkgdGhpcy5femVyb1BhZGRpbmcgPSBmYWxzZVxuICAgIGVsc2UgdGhpcy5femVyb1BhZGRpbmcgPSAhIXplcm9QYWRkaW5nXG5cbiAgICB0aGlzLl9idWZmZXJlZCA9IFtdXG4gICAgdGhpcy5fYnVmZmVyZWRCeXRlcyA9IDBcbiAgfVxuXG4gIF90cmFuc2Zvcm0gKGJ1ZiwgZW5jLCBuZXh0KSB7XG4gICAgdGhpcy5fYnVmZmVyZWRCeXRlcyArPSBidWYubGVuZ3RoXG4gICAgdGhpcy5fYnVmZmVyZWQucHVzaChidWYpXG5cbiAgICB3aGlsZSAodGhpcy5fYnVmZmVyZWRCeXRlcyA+PSB0aGlzLnNpemUpIHtcbiAgICAgIHRoaXMuX2J1ZmZlcmVkQnl0ZXMgLT0gdGhpcy5zaXplXG5cbiAgICAgIC8vIEFzc2VtYmxlIHRoZSBidWZmZXJzIHRoYXQgd2lsbCBjb21wb3NlIHRoZSBmaW5hbCBibG9ja1xuICAgICAgY29uc3QgYmxvY2tCdWZzID0gW11cbiAgICAgIGxldCBibG9ja0J1ZnNCeXRlcyA9IDBcbiAgICAgIHdoaWxlIChibG9ja0J1ZnNCeXRlcyA8IHRoaXMuc2l6ZSkge1xuICAgICAgICBjb25zdCBiID0gdGhpcy5fYnVmZmVyZWQuc2hpZnQoKVxuXG4gICAgICAgIGlmIChibG9ja0J1ZnNCeXRlcyArIGIubGVuZ3RoIDw9IHRoaXMuc2l6ZSkge1xuICAgICAgICAgIGJsb2NrQnVmcy5wdXNoKGIpXG4gICAgICAgICAgYmxvY2tCdWZzQnl0ZXMgKz0gYi5sZW5ndGhcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiB0aGUgbGFzdCBidWZmZXIgaXMgbGFyZ2VyIHRoYW4gbmVlZGVkIGZvciB0aGUgYmxvY2ssIGp1c3RcbiAgICAgICAgICAvLyB1c2UgdGhlIG5lZWRlZCBwYXJ0XG4gICAgICAgICAgY29uc3QgbmVlZGVkU2l6ZSA9IHRoaXMuc2l6ZSAtIGJsb2NrQnVmc0J5dGVzXG4gICAgICAgICAgYmxvY2tCdWZzLnB1c2goYi5zbGljZSgwLCBuZWVkZWRTaXplKSlcbiAgICAgICAgICBibG9ja0J1ZnNCeXRlcyArPSBuZWVkZWRTaXplXG4gICAgICAgICAgdGhpcy5fYnVmZmVyZWQudW5zaGlmdChiLnNsaWNlKG5lZWRlZFNpemUpKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZW4gY29uY2F0IGp1c3QgdGhvc2UgYnVmZmVycywgbGVhdmluZyB0aGUgcmVzdCB1bnRvdWNoZWQgaW4gX2J1ZmZlcmVkXG4gICAgICB0aGlzLnB1c2goQnVmZmVyLmNvbmNhdChibG9ja0J1ZnMsIHRoaXMuc2l6ZSkpXG4gICAgfVxuICAgIG5leHQoKVxuICB9XG5cbiAgX2ZsdXNoICgpIHtcbiAgICBpZiAodGhpcy5fYnVmZmVyZWRCeXRlcyAmJiB0aGlzLl96ZXJvUGFkZGluZykge1xuICAgICAgY29uc3QgemVyb2VzID0gQnVmZmVyLmFsbG9jKHRoaXMuc2l6ZSAtIHRoaXMuX2J1ZmZlcmVkQnl0ZXMpXG4gICAgICB0aGlzLl9idWZmZXJlZC5wdXNoKHplcm9lcylcbiAgICAgIHRoaXMucHVzaChCdWZmZXIuY29uY2F0KHRoaXMuX2J1ZmZlcmVkKSlcbiAgICAgIHRoaXMuX2J1ZmZlcmVkID0gbnVsbFxuICAgIH0gZWxzZSBpZiAodGhpcy5fYnVmZmVyZWRCeXRlcykge1xuICAgICAgdGhpcy5wdXNoKEJ1ZmZlci5jb25jYXQodGhpcy5fYnVmZmVyZWQpKVxuICAgICAgdGhpcy5fYnVmZmVyZWQgPSBudWxsXG4gICAgfVxuICAgIHRoaXMucHVzaChudWxsKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmxvY2tcbiJdLCJuYW1lcyI6WyJUcmFuc2Zvcm0iLCJyZXF1aXJlIiwiQmxvY2siLCJjb25zdHJ1Y3RvciIsInNpemUiLCJvcHRzIiwibm9wYWQiLCJ6ZXJvUGFkZGluZyIsIl96ZXJvUGFkZGluZyIsIl9idWZmZXJlZCIsIl9idWZmZXJlZEJ5dGVzIiwiX3RyYW5zZm9ybSIsImJ1ZiIsImVuYyIsIm5leHQiLCJsZW5ndGgiLCJwdXNoIiwiYmxvY2tCdWZzIiwiYmxvY2tCdWZzQnl0ZXMiLCJiIiwic2hpZnQiLCJuZWVkZWRTaXplIiwic2xpY2UiLCJ1bnNoaWZ0IiwiQnVmZmVyIiwiY29uY2F0IiwiX2ZsdXNoIiwiemVyb2VzIiwiYWxsb2MiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/block-stream2/index.js\n");

/***/ })

};
;