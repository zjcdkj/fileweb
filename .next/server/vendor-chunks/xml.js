"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xml";
exports.ids = ["vendor-chunks/xml"];
exports.modules = {

/***/ "(rsc)/./node_modules/xml/lib/escapeForXML.js":
/*!**********************************************!*\
  !*** ./node_modules/xml/lib/escapeForXML.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nvar XML_CHARACTER_MAP = {\n    \"&\": \"&amp;\",\n    '\"': \"&quot;\",\n    \"'\": \"&apos;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\"\n};\nfunction escapeForXML(string) {\n    return string && string.replace ? string.replace(/([&\"<>'])/g, function(str, item) {\n        return XML_CHARACTER_MAP[item];\n    }) : string;\n}\nmodule.exports = escapeForXML;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveG1sL2xpYi9lc2NhcGVGb3JYTUwuanMiLCJtYXBwaW5ncyI6IjtBQUNBLElBQUlBLG9CQUFvQjtJQUNwQixLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztBQUNUO0FBRUEsU0FBU0MsYUFBYUMsTUFBTTtJQUN4QixPQUFPQSxVQUFVQSxPQUFPQyxPQUFPLEdBQ3pCRCxPQUFPQyxPQUFPLENBQUMsY0FBYyxTQUFTQyxHQUFHLEVBQUVDLElBQUk7UUFDN0MsT0FBT0wsaUJBQWlCLENBQUNLLEtBQUs7SUFDaEMsS0FDQUg7QUFDVjtBQUVBSSxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmlsZS1tYW5hZ2VtZW50LXN5c3RlbS8uL25vZGVfbW9kdWxlcy94bWwvbGliL2VzY2FwZUZvclhNTC5qcz9iMmY3Il0sInNvdXJjZXNDb250ZW50IjpbIlxudmFyIFhNTF9DSEFSQUNURVJfTUFQID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyZhcG9zOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0Oydcbn07XG5cbmZ1bmN0aW9uIGVzY2FwZUZvclhNTChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UoLyhbJlwiPD4nXSkvZywgZnVuY3Rpb24oc3RyLCBpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gWE1MX0NIQVJBQ1RFUl9NQVBbaXRlbV07XG4gICAgICAgICAgfSlcbiAgICAgICAgOiBzdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlRm9yWE1MO1xuIl0sIm5hbWVzIjpbIlhNTF9DSEFSQUNURVJfTUFQIiwiZXNjYXBlRm9yWE1MIiwic3RyaW5nIiwicmVwbGFjZSIsInN0ciIsIml0ZW0iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xml/lib/escapeForXML.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/xml/lib/xml.js":
/*!*************************************!*\
  !*** ./node_modules/xml/lib/xml.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar escapeForXML = __webpack_require__(/*! ./escapeForXML */ \"(rsc)/./node_modules/xml/lib/escapeForXML.js\");\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar DEFAULT_INDENT = \"    \";\nfunction xml(input, options) {\n    if (typeof options !== \"object\") {\n        options = {\n            indent: options\n        };\n    }\n    var stream = options.stream ? new Stream() : null, output = \"\", interrupted = false, indent = !options.indent ? \"\" : options.indent === true ? DEFAULT_INDENT : options.indent, instant = true;\n    function delay(func) {\n        if (!instant) {\n            func();\n        } else {\n            process.nextTick(func);\n        }\n    }\n    function append(interrupt, out) {\n        if (out !== undefined) {\n            output += out;\n        }\n        if (interrupt && !interrupted) {\n            stream = stream || new Stream();\n            interrupted = true;\n        }\n        if (interrupt && interrupted) {\n            var data = output;\n            delay(function() {\n                stream.emit(\"data\", data);\n            });\n            output = \"\";\n        }\n    }\n    function add(value, last) {\n        format(append, resolve(value, indent, indent ? 1 : 0), last);\n    }\n    function end() {\n        if (stream) {\n            var data = output;\n            delay(function() {\n                stream.emit(\"data\", data);\n                stream.emit(\"end\");\n                stream.readable = false;\n                stream.emit(\"close\");\n            });\n        }\n    }\n    function addXmlDeclaration(declaration) {\n        var encoding = declaration.encoding || \"UTF-8\", attr = {\n            version: \"1.0\",\n            encoding: encoding\n        };\n        if (declaration.standalone) {\n            attr.standalone = declaration.standalone;\n        }\n        add({\n            \"?xml\": {\n                _attr: attr\n            }\n        });\n        output = output.replace(\"/>\", \"?>\");\n    }\n    // disable delay delayed\n    delay(function() {\n        instant = false;\n    });\n    if (options.declaration) {\n        addXmlDeclaration(options.declaration);\n    }\n    if (input && input.forEach) {\n        input.forEach(function(value, i) {\n            var last;\n            if (i + 1 === input.length) last = end;\n            add(value, last);\n        });\n    } else {\n        add(input, end);\n    }\n    if (stream) {\n        stream.readable = true;\n        return stream;\n    }\n    return output;\n}\nfunction element() {\n    var input = Array.prototype.slice.call(arguments), self = {\n        _elem: resolve(input)\n    };\n    self.push = function(input) {\n        if (!this.append) {\n            throw new Error(\"not assigned to a parent!\");\n        }\n        var that = this;\n        var indent = this._elem.indent;\n        format(this.append, resolve(input, indent, this._elem.icount + (indent ? 1 : 0)), function() {\n            that.append(true);\n        });\n    };\n    self.close = function(input) {\n        if (input !== undefined) {\n            this.push(input);\n        }\n        if (this.end) {\n            this.end();\n        }\n    };\n    return self;\n}\nfunction create_indent(character, count) {\n    return new Array(count || 0).join(character || \"\");\n}\nfunction resolve(data, indent, indent_count) {\n    indent_count = indent_count || 0;\n    var indent_spaces = create_indent(indent, indent_count);\n    var name;\n    var values = data;\n    var interrupt = false;\n    if (typeof data === \"object\") {\n        var keys = Object.keys(data);\n        name = keys[0];\n        values = data[name];\n        if (values && values._elem) {\n            values._elem.name = name;\n            values._elem.icount = indent_count;\n            values._elem.indent = indent;\n            values._elem.indents = indent_spaces;\n            values._elem.interrupt = values;\n            return values._elem;\n        }\n    }\n    var attributes = [], content = [];\n    var isStringContent;\n    function get_attributes(obj) {\n        var keys = Object.keys(obj);\n        keys.forEach(function(key) {\n            attributes.push(attribute(key, obj[key]));\n        });\n    }\n    switch(typeof values){\n        case \"object\":\n            if (values === null) break;\n            if (values._attr) {\n                get_attributes(values._attr);\n            }\n            if (values._cdata) {\n                content.push((\"<![CDATA[\" + values._cdata).replace(/\\]\\]>/g, \"]]]]><![CDATA[>\") + \"]]>\");\n            }\n            if (values.forEach) {\n                isStringContent = false;\n                content.push(\"\");\n                values.forEach(function(value) {\n                    if (typeof value == \"object\") {\n                        var _name = Object.keys(value)[0];\n                        if (_name == \"_attr\") {\n                            get_attributes(value._attr);\n                        } else {\n                            content.push(resolve(value, indent, indent_count + 1));\n                        }\n                    } else {\n                        //string\n                        content.pop();\n                        isStringContent = true;\n                        content.push(escapeForXML(value));\n                    }\n                });\n                if (!isStringContent) {\n                    content.push(\"\");\n                }\n            }\n            break;\n        default:\n            //string\n            content.push(escapeForXML(values));\n    }\n    return {\n        name: name,\n        interrupt: interrupt,\n        attributes: attributes,\n        content: content,\n        icount: indent_count,\n        indents: indent_spaces,\n        indent: indent\n    };\n}\nfunction format(append, elem, end) {\n    if (typeof elem != \"object\") {\n        return append(false, elem);\n    }\n    var len = elem.interrupt ? 1 : elem.content.length;\n    function proceed() {\n        while(elem.content.length){\n            var value = elem.content.shift();\n            if (value === undefined) continue;\n            if (interrupt(value)) return;\n            format(append, value);\n        }\n        append(false, (len > 1 ? elem.indents : \"\") + (elem.name ? \"</\" + elem.name + \">\" : \"\") + (elem.indent && !end ? \"\\n\" : \"\"));\n        if (end) {\n            end();\n        }\n    }\n    function interrupt(value) {\n        if (value.interrupt) {\n            value.interrupt.append = append;\n            value.interrupt.end = proceed;\n            value.interrupt = false;\n            append(true);\n            return true;\n        }\n        return false;\n    }\n    append(false, elem.indents + (elem.name ? \"<\" + elem.name : \"\") + (elem.attributes.length ? \" \" + elem.attributes.join(\" \") : \"\") + (len ? elem.name ? \">\" : \"\" : elem.name ? \"/>\" : \"\") + (elem.indent && len > 1 ? \"\\n\" : \"\"));\n    if (!len) {\n        return append(false, elem.indent ? \"\\n\" : \"\");\n    }\n    if (!interrupt(elem)) {\n        proceed();\n    }\n}\nfunction attribute(key, value) {\n    return key + \"=\" + '\"' + escapeForXML(value) + '\"';\n}\nmodule.exports = xml;\nmodule.exports.element = module.exports.Element = element;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xml/lib/xml.js\n");

/***/ })

};
;