"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/minio";
exports.ids = ["vendor-chunks/minio"];
exports.modules = {

/***/ "(rsc)/./node_modules/minio/dist/esm/CredentialProvider.mjs":
/*!************************************************************!*\
  !*** ./node_modules/minio/dist/esm/CredentialProvider.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CredentialProvider: () => (/* binding */ CredentialProvider),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Credentials_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Credentials.mjs */ \"(rsc)/./node_modules/minio/dist/esm/Credentials.mjs\");\n\nclass CredentialProvider {\n    constructor({ accessKey, secretKey, sessionToken }){\n        this.credentials = new _Credentials_mjs__WEBPACK_IMPORTED_MODULE_0__.Credentials({\n            accessKey,\n            secretKey,\n            sessionToken\n        });\n    }\n    async getCredentials() {\n        return this.credentials.get();\n    }\n    setCredentials(credentials) {\n        if (credentials instanceof _Credentials_mjs__WEBPACK_IMPORTED_MODULE_0__.Credentials) {\n            this.credentials = credentials;\n        } else {\n            throw new Error(\"Unable to set Credentials. it should be an instance of Credentials class\");\n        }\n    }\n    setAccessKey(accessKey) {\n        this.credentials.setAccessKey(accessKey);\n    }\n    getAccessKey() {\n        return this.credentials.getAccessKey();\n    }\n    setSecretKey(secretKey) {\n        this.credentials.setSecretKey(secretKey);\n    }\n    getSecretKey() {\n        return this.credentials.getSecretKey();\n    }\n    setSessionToken(sessionToken) {\n        this.credentials.setSessionToken(sessionToken);\n    }\n    getSessionToken() {\n        return this.credentials.getSessionToken();\n    }\n}\n// deprecated default export, please use named exports.\n// keep for backward compatibility.\n// eslint-disable-next-line import/no-default-export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CredentialProvider); //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDcmVkZW50aWFscyIsIkNyZWRlbnRpYWxQcm92aWRlciIsImNvbnN0cnVjdG9yIiwiYWNjZXNzS2V5Iiwic2VjcmV0S2V5Iiwic2Vzc2lvblRva2VuIiwiY3JlZGVudGlhbHMiLCJnZXRDcmVkZW50aWFscyIsImdldCIsInNldENyZWRlbnRpYWxzIiwiRXJyb3IiLCJzZXRBY2Nlc3NLZXkiLCJnZXRBY2Nlc3NLZXkiLCJzZXRTZWNyZXRLZXkiLCJnZXRTZWNyZXRLZXkiLCJzZXRTZXNzaW9uVG9rZW4iLCJnZXRTZXNzaW9uVG9rZW4iXSwic291cmNlcyI6WyJDcmVkZW50aWFsUHJvdmlkZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3JlZGVudGlhbHMgfSBmcm9tICcuL0NyZWRlbnRpYWxzLnRzJ1xuXG5leHBvcnQgY2xhc3MgQ3JlZGVudGlhbFByb3ZpZGVyIHtcbiAgcHJpdmF0ZSBjcmVkZW50aWFsczogQ3JlZGVudGlhbHNcblxuICBjb25zdHJ1Y3Rvcih7IGFjY2Vzc0tleSwgc2VjcmV0S2V5LCBzZXNzaW9uVG9rZW4gfTogeyBhY2Nlc3NLZXk6IHN0cmluZzsgc2VjcmV0S2V5OiBzdHJpbmc7IHNlc3Npb25Ub2tlbj86IHN0cmluZyB9KSB7XG4gICAgdGhpcy5jcmVkZW50aWFscyA9IG5ldyBDcmVkZW50aWFscyh7XG4gICAgICBhY2Nlc3NLZXksXG4gICAgICBzZWNyZXRLZXksXG4gICAgICBzZXNzaW9uVG9rZW4sXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGdldENyZWRlbnRpYWxzKCk6IFByb21pc2U8Q3JlZGVudGlhbHM+IHtcbiAgICByZXR1cm4gdGhpcy5jcmVkZW50aWFscy5nZXQoKVxuICB9XG5cbiAgc2V0Q3JlZGVudGlhbHMoY3JlZGVudGlhbHM6IENyZWRlbnRpYWxzKSB7XG4gICAgaWYgKGNyZWRlbnRpYWxzIGluc3RhbmNlb2YgQ3JlZGVudGlhbHMpIHtcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBjcmVkZW50aWFsc1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBzZXQgQ3JlZGVudGlhbHMuIGl0IHNob3VsZCBiZSBhbiBpbnN0YW5jZSBvZiBDcmVkZW50aWFscyBjbGFzcycpXG4gICAgfVxuICB9XG5cbiAgc2V0QWNjZXNzS2V5KGFjY2Vzc0tleTogc3RyaW5nKSB7XG4gICAgdGhpcy5jcmVkZW50aWFscy5zZXRBY2Nlc3NLZXkoYWNjZXNzS2V5KVxuICB9XG5cbiAgZ2V0QWNjZXNzS2V5KCkge1xuICAgIHJldHVybiB0aGlzLmNyZWRlbnRpYWxzLmdldEFjY2Vzc0tleSgpXG4gIH1cblxuICBzZXRTZWNyZXRLZXkoc2VjcmV0S2V5OiBzdHJpbmcpIHtcbiAgICB0aGlzLmNyZWRlbnRpYWxzLnNldFNlY3JldEtleShzZWNyZXRLZXkpXG4gIH1cblxuICBnZXRTZWNyZXRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlZGVudGlhbHMuZ2V0U2VjcmV0S2V5KClcbiAgfVxuXG4gIHNldFNlc3Npb25Ub2tlbihzZXNzaW9uVG9rZW46IHN0cmluZykge1xuICAgIHRoaXMuY3JlZGVudGlhbHMuc2V0U2Vzc2lvblRva2VuKHNlc3Npb25Ub2tlbilcbiAgfVxuXG4gIGdldFNlc3Npb25Ub2tlbigpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVkZW50aWFscy5nZXRTZXNzaW9uVG9rZW4oKVxuICB9XG59XG5cbi8vIGRlcHJlY2F0ZWQgZGVmYXVsdCBleHBvcnQsIHBsZWFzZSB1c2UgbmFtZWQgZXhwb3J0cy5cbi8vIGtlZXAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCBDcmVkZW50aWFsUHJvdmlkZXJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsV0FBVyxRQUFRLG1CQUFrQjtBQUU5QyxPQUFPLE1BQU1DLGtCQUFrQixDQUFDO0VBRzlCQyxXQUFXQSxDQUFDO0lBQUVDLFNBQVM7SUFBRUMsU0FBUztJQUFFQztFQUE4RSxDQUFDLEVBQUU7SUFDbkgsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSU4sV0FBVyxDQUFDO01BQ2pDRyxTQUFTO01BQ1RDLFNBQVM7TUFDVEM7SUFDRixDQUFDLENBQUM7RUFDSjtFQUVBLE1BQU1FLGNBQWNBLENBQUEsRUFBeUI7SUFDM0MsT0FBTyxJQUFJLENBQUNELFdBQVcsQ0FBQ0UsR0FBRyxDQUFDLENBQUM7RUFDL0I7RUFFQUMsY0FBY0EsQ0FBQ0gsV0FBd0IsRUFBRTtJQUN2QyxJQUFJQSxXQUFXLFlBQVlOLFdBQVcsRUFBRTtNQUN0QyxJQUFJLENBQUNNLFdBQVcsR0FBR0EsV0FBVztJQUNoQyxDQUFDLE1BQU07TUFDTCxNQUFNLElBQUlJLEtBQUssQ0FBQywwRUFBMEUsQ0FBQztJQUM3RjtFQUNGO0VBRUFDLFlBQVlBLENBQUNSLFNBQWlCLEVBQUU7SUFDOUIsSUFBSSxDQUFDRyxXQUFXLENBQUNLLFlBQVksQ0FBQ1IsU0FBUyxDQUFDO0VBQzFDO0VBRUFTLFlBQVlBLENBQUEsRUFBRztJQUNiLE9BQU8sSUFBSSxDQUFDTixXQUFXLENBQUNNLFlBQVksQ0FBQyxDQUFDO0VBQ3hDO0VBRUFDLFlBQVlBLENBQUNULFNBQWlCLEVBQUU7SUFDOUIsSUFBSSxDQUFDRSxXQUFXLENBQUNPLFlBQVksQ0FBQ1QsU0FBUyxDQUFDO0VBQzFDO0VBRUFVLFlBQVlBLENBQUEsRUFBRztJQUNiLE9BQU8sSUFBSSxDQUFDUixXQUFXLENBQUNRLFlBQVksQ0FBQyxDQUFDO0VBQ3hDO0VBRUFDLGVBQWVBLENBQUNWLFlBQW9CLEVBQUU7SUFDcEMsSUFBSSxDQUFDQyxXQUFXLENBQUNTLGVBQWUsQ0FBQ1YsWUFBWSxDQUFDO0VBQ2hEO0VBRUFXLGVBQWVBLENBQUEsRUFBRztJQUNoQixPQUFPLElBQUksQ0FBQ1YsV0FBVyxDQUFDVSxlQUFlLENBQUMsQ0FBQztFQUMzQztBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWVmLGtCQUFrQiJ9\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/CredentialProvider.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/Credentials.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/minio/dist/esm/Credentials.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Credentials: () => (/* binding */ Credentials),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Credentials {\n    constructor({ accessKey, secretKey, sessionToken }){\n        this.accessKey = accessKey;\n        this.secretKey = secretKey;\n        this.sessionToken = sessionToken;\n    }\n    setAccessKey(accessKey) {\n        this.accessKey = accessKey;\n    }\n    getAccessKey() {\n        return this.accessKey;\n    }\n    setSecretKey(secretKey) {\n        this.secretKey = secretKey;\n    }\n    getSecretKey() {\n        return this.secretKey;\n    }\n    setSessionToken(sessionToken) {\n        this.sessionToken = sessionToken;\n    }\n    getSessionToken() {\n        return this.sessionToken;\n    }\n    get() {\n        return this;\n    }\n}\n// deprecated default export, please use named exports.\n// keep for backward compatibility.\n// eslint-disable-next-line import/no-default-export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Credentials); //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDcmVkZW50aWFscyIsImNvbnN0cnVjdG9yIiwiYWNjZXNzS2V5Iiwic2VjcmV0S2V5Iiwic2Vzc2lvblRva2VuIiwic2V0QWNjZXNzS2V5IiwiZ2V0QWNjZXNzS2V5Iiwic2V0U2VjcmV0S2V5IiwiZ2V0U2VjcmV0S2V5Iiwic2V0U2Vzc2lvblRva2VuIiwiZ2V0U2Vzc2lvblRva2VuIiwiZ2V0Il0sInNvdXJjZXMiOlsiQ3JlZGVudGlhbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIENyZWRlbnRpYWxzIHtcbiAgcHVibGljIGFjY2Vzc0tleTogc3RyaW5nXG4gIHB1YmxpYyBzZWNyZXRLZXk6IHN0cmluZ1xuICBwdWJsaWMgc2Vzc2lvblRva2VuPzogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IoeyBhY2Nlc3NLZXksIHNlY3JldEtleSwgc2Vzc2lvblRva2VuIH06IHsgYWNjZXNzS2V5OiBzdHJpbmc7IHNlY3JldEtleTogc3RyaW5nOyBzZXNzaW9uVG9rZW4/OiBzdHJpbmcgfSkge1xuICAgIHRoaXMuYWNjZXNzS2V5ID0gYWNjZXNzS2V5XG4gICAgdGhpcy5zZWNyZXRLZXkgPSBzZWNyZXRLZXlcbiAgICB0aGlzLnNlc3Npb25Ub2tlbiA9IHNlc3Npb25Ub2tlblxuICB9XG5cbiAgc2V0QWNjZXNzS2V5KGFjY2Vzc0tleTogc3RyaW5nKSB7XG4gICAgdGhpcy5hY2Nlc3NLZXkgPSBhY2Nlc3NLZXlcbiAgfVxuXG4gIGdldEFjY2Vzc0tleSgpIHtcbiAgICByZXR1cm4gdGhpcy5hY2Nlc3NLZXlcbiAgfVxuXG4gIHNldFNlY3JldEtleShzZWNyZXRLZXk6IHN0cmluZykge1xuICAgIHRoaXMuc2VjcmV0S2V5ID0gc2VjcmV0S2V5XG4gIH1cblxuICBnZXRTZWNyZXRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VjcmV0S2V5XG4gIH1cblxuICBzZXRTZXNzaW9uVG9rZW4oc2Vzc2lvblRva2VuOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlc3Npb25Ub2tlbiA9IHNlc3Npb25Ub2tlblxuICB9XG5cbiAgZ2V0U2Vzc2lvblRva2VuKCkge1xuICAgIHJldHVybiB0aGlzLnNlc3Npb25Ub2tlblxuICB9XG5cbiAgZ2V0KCk6IENyZWRlbnRpYWxzIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbi8vIGRlcHJlY2F0ZWQgZGVmYXVsdCBleHBvcnQsIHBsZWFzZSB1c2UgbmFtZWQgZXhwb3J0cy5cbi8vIGtlZXAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCBDcmVkZW50aWFsc1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU1BLFdBQVcsQ0FBQztFQUt2QkMsV0FBV0EsQ0FBQztJQUFFQyxTQUFTO0lBQUVDLFNBQVM7SUFBRUM7RUFBOEUsQ0FBQyxFQUFFO0lBQ25ILElBQUksQ0FBQ0YsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQ0MsWUFBWSxHQUFHQSxZQUFZO0VBQ2xDO0VBRUFDLFlBQVlBLENBQUNILFNBQWlCLEVBQUU7SUFDOUIsSUFBSSxDQUFDQSxTQUFTLEdBQUdBLFNBQVM7RUFDNUI7RUFFQUksWUFBWUEsQ0FBQSxFQUFHO0lBQ2IsT0FBTyxJQUFJLENBQUNKLFNBQVM7RUFDdkI7RUFFQUssWUFBWUEsQ0FBQ0osU0FBaUIsRUFBRTtJQUM5QixJQUFJLENBQUNBLFNBQVMsR0FBR0EsU0FBUztFQUM1QjtFQUVBSyxZQUFZQSxDQUFBLEVBQUc7SUFDYixPQUFPLElBQUksQ0FBQ0wsU0FBUztFQUN2QjtFQUVBTSxlQUFlQSxDQUFDTCxZQUFvQixFQUFFO0lBQ3BDLElBQUksQ0FBQ0EsWUFBWSxHQUFHQSxZQUFZO0VBQ2xDO0VBRUFNLGVBQWVBLENBQUEsRUFBRztJQUNoQixPQUFPLElBQUksQ0FBQ04sWUFBWTtFQUMxQjtFQUVBTyxHQUFHQSxDQUFBLEVBQWdCO0lBQ2pCLE9BQU8sSUFBSTtFQUNiO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZVgsV0FBVyJ9\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWluaW8vZGlzdC9lc20vQ3JlZGVudGlhbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sTUFBTUE7SUFDWEMsWUFBWSxFQUNWQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsWUFBWSxFQUNiLENBQUU7UUFDRCxJQUFJLENBQUNGLFNBQVMsR0FBR0E7UUFDakIsSUFBSSxDQUFDQyxTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0MsWUFBWSxHQUFHQTtJQUN0QjtJQUNBQyxhQUFhSCxTQUFTLEVBQUU7UUFDdEIsSUFBSSxDQUFDQSxTQUFTLEdBQUdBO0lBQ25CO0lBQ0FJLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQ0osU0FBUztJQUN2QjtJQUNBSyxhQUFhSixTQUFTLEVBQUU7UUFDdEIsSUFBSSxDQUFDQSxTQUFTLEdBQUdBO0lBQ25CO0lBQ0FLLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQ0wsU0FBUztJQUN2QjtJQUNBTSxnQkFBZ0JMLFlBQVksRUFBRTtRQUM1QixJQUFJLENBQUNBLFlBQVksR0FBR0E7SUFDdEI7SUFDQU0sa0JBQWtCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDTixZQUFZO0lBQzFCO0lBQ0FPLE1BQU07UUFDSixPQUFPLElBQUk7SUFDYjtBQUNGO0FBRUEsdURBQXVEO0FBQ3ZELG1DQUFtQztBQUNuQyxvREFBb0Q7QUFDcEQsaUVBQWVYLFdBQVdBLEVBQUMsQ0FDM0IsNGdGQUE0Z0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maWxlLW1hbmFnZW1lbnQtc3lzdGVtLy4vbm9kZV9tb2R1bGVzL21pbmlvL2Rpc3QvZXNtL0NyZWRlbnRpYWxzLm1qcz9lNjk4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBDcmVkZW50aWFscyB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBhY2Nlc3NLZXksXG4gICAgc2VjcmV0S2V5LFxuICAgIHNlc3Npb25Ub2tlblxuICB9KSB7XG4gICAgdGhpcy5hY2Nlc3NLZXkgPSBhY2Nlc3NLZXk7XG4gICAgdGhpcy5zZWNyZXRLZXkgPSBzZWNyZXRLZXk7XG4gICAgdGhpcy5zZXNzaW9uVG9rZW4gPSBzZXNzaW9uVG9rZW47XG4gIH1cbiAgc2V0QWNjZXNzS2V5KGFjY2Vzc0tleSkge1xuICAgIHRoaXMuYWNjZXNzS2V5ID0gYWNjZXNzS2V5O1xuICB9XG4gIGdldEFjY2Vzc0tleSgpIHtcbiAgICByZXR1cm4gdGhpcy5hY2Nlc3NLZXk7XG4gIH1cbiAgc2V0U2VjcmV0S2V5KHNlY3JldEtleSkge1xuICAgIHRoaXMuc2VjcmV0S2V5ID0gc2VjcmV0S2V5O1xuICB9XG4gIGdldFNlY3JldEtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5zZWNyZXRLZXk7XG4gIH1cbiAgc2V0U2Vzc2lvblRva2VuKHNlc3Npb25Ub2tlbikge1xuICAgIHRoaXMuc2Vzc2lvblRva2VuID0gc2Vzc2lvblRva2VuO1xuICB9XG4gIGdldFNlc3Npb25Ub2tlbigpIHtcbiAgICByZXR1cm4gdGhpcy5zZXNzaW9uVG9rZW47XG4gIH1cbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbi8vIGRlcHJlY2F0ZWQgZGVmYXVsdCBleHBvcnQsIHBsZWFzZSB1c2UgbmFtZWQgZXhwb3J0cy5cbi8vIGtlZXAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCBDcmVkZW50aWFscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKRGNtVmtaVzUwYVdGc2N5SXNJbU52Ym5OMGNuVmpkRzl5SWl3aVlXTmpaWE56UzJWNUlpd2ljMlZqY21WMFMyVjVJaXdpYzJWemMybHZibFJ2YTJWdUlpd2ljMlYwUVdOalpYTnpTMlY1SWl3aVoyVjBRV05qWlhOelMyVjVJaXdpYzJWMFUyVmpjbVYwUzJWNUlpd2laMlYwVTJWamNtVjBTMlY1SWl3aWMyVjBVMlZ6YzJsdmJsUnZhMlZ1SWl3aVoyVjBVMlZ6YzJsdmJsUnZhMlZ1SWl3aVoyVjBJbDBzSW5OdmRYSmpaWE1pT2xzaVEzSmxaR1Z1ZEdsaGJITXVkSE1pWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpYaHdiM0owSUdOc1lYTnpJRU55WldSbGJuUnBZV3h6SUh0Y2JpQWdjSFZpYkdsaklHRmpZMlZ6YzB0bGVUb2djM1J5YVc1blhHNGdJSEIxWW14cFl5QnpaV055WlhSTFpYazZJSE4wY21sdVoxeHVJQ0J3ZFdKc2FXTWdjMlZ6YzJsdmJsUnZhMlZ1UHpvZ2MzUnlhVzVuWEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvZXlCaFkyTmxjM05MWlhrc0lITmxZM0psZEV0bGVTd2djMlZ6YzJsdmJsUnZhMlZ1SUgwNklIc2dZV05qWlhOelMyVjVPaUJ6ZEhKcGJtYzdJSE5sWTNKbGRFdGxlVG9nYzNSeWFXNW5PeUJ6WlhOemFXOXVWRzlyWlc0L09pQnpkSEpwYm1jZ2ZTa2dlMXh1SUNBZ0lIUm9hWE11WVdOalpYTnpTMlY1SUQwZ1lXTmpaWE56UzJWNVhHNGdJQ0FnZEdocGN5NXpaV055WlhSTFpYa2dQU0J6WldOeVpYUkxaWGxjYmlBZ0lDQjBhR2x6TG5ObGMzTnBiMjVVYjJ0bGJpQTlJSE5sYzNOcGIyNVViMnRsYmx4dUlDQjlYRzVjYmlBZ2MyVjBRV05qWlhOelMyVjVLR0ZqWTJWemMwdGxlVG9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdkR2hwY3k1aFkyTmxjM05MWlhrZ1BTQmhZMk5sYzNOTFpYbGNiaUFnZlZ4dVhHNGdJR2RsZEVGalkyVnpjMHRsZVNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWhZMk5sYzNOTFpYbGNiaUFnZlZ4dVhHNGdJSE5sZEZObFkzSmxkRXRsZVNoelpXTnlaWFJMWlhrNklITjBjbWx1WnlrZ2UxeHVJQ0FnSUhSb2FYTXVjMlZqY21WMFMyVjVJRDBnYzJWamNtVjBTMlY1WEc0Z0lIMWNibHh1SUNCblpYUlRaV055WlhSTFpYa29LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWamNtVjBTMlY1WEc0Z0lIMWNibHh1SUNCelpYUlRaWE56YVc5dVZHOXJaVzRvYzJWemMybHZibFJ2YTJWdU9pQnpkSEpwYm1jcElIdGNiaUFnSUNCMGFHbHpMbk5sYzNOcGIyNVViMnRsYmlBOUlITmxjM05wYjI1VWIydGxibHh1SUNCOVhHNWNiaUFnWjJWMFUyVnpjMmx2YmxSdmEyVnVLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGMzTnBiMjVVYjJ0bGJseHVJQ0I5WEc1Y2JpQWdaMlYwS0NrNklFTnlaV1JsYm5ScFlXeHpJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXh1SUNCOVhHNTlYRzVjYmk4dklHUmxjSEpsWTJGMFpXUWdaR1ZtWVhWc2RDQmxlSEJ2Y25Rc0lIQnNaV0Z6WlNCMWMyVWdibUZ0WldRZ1pYaHdiM0owY3k1Y2JpOHZJR3RsWlhBZ1ptOXlJR0poWTJ0M1lYSmtJR052YlhCaGRHbGlhV3hwZEhrdVhHNHZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdhVzF3YjNKMEwyNXZMV1JsWm1GMWJIUXRaWGh3YjNKMFhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCRGNtVmtaVzUwYVdGc2MxeHVJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hQUVVGUExFMUJRVTFCTEZkQlFWY3NRMEZCUXp0RlFVdDJRa01zVjBGQlYwRXNRMEZCUXp0SlFVRkZReXhUUVVGVE8wbEJRVVZETEZOQlFWTTdTVUZCUlVNN1JVRkJPRVVzUTBGQlF5eEZRVUZGTzBsQlEyNUlMRWxCUVVrc1EwRkJRMFlzVTBGQlV5eEhRVUZIUVN4VFFVRlRPMGxCUXpGQ0xFbEJRVWtzUTBGQlEwTXNVMEZCVXl4SFFVRkhRU3hUUVVGVE8wbEJRekZDTEVsQlFVa3NRMEZCUTBNc1dVRkJXU3hIUVVGSFFTeFpRVUZaTzBWQlEyeERPMFZCUlVGRExGbEJRVmxCTEVOQlFVTklMRk5CUVdsQ0xFVkJRVVU3U1VGRE9VSXNTVUZCU1N4RFFVRkRRU3hUUVVGVExFZEJRVWRCTEZOQlFWTTdSVUZETlVJN1JVRkZRVWtzV1VGQldVRXNRMEZCUVN4RlFVRkhPMGxCUTJJc1QwRkJUeXhKUVVGSkxFTkJRVU5LTEZOQlFWTTdSVUZEZGtJN1JVRkZRVXNzV1VGQldVRXNRMEZCUTBvc1UwRkJhVUlzUlVGQlJUdEpRVU01UWl4SlFVRkpMRU5CUVVOQkxGTkJRVk1zUjBGQlIwRXNVMEZCVXp0RlFVTTFRanRGUVVWQlN5eFpRVUZaUVN4RFFVRkJMRVZCUVVjN1NVRkRZaXhQUVVGUExFbEJRVWtzUTBGQlEwd3NVMEZCVXp0RlFVTjJRanRGUVVWQlRTeGxRVUZsUVN4RFFVRkRUQ3haUVVGdlFpeEZRVUZGTzBsQlEzQkRMRWxCUVVrc1EwRkJRMEVzV1VGQldTeEhRVUZIUVN4WlFVRlpPMFZCUTJ4RE8wVkJSVUZOTEdWQlFXVkJMRU5CUVVFc1JVRkJSenRKUVVOb1FpeFBRVUZQTEVsQlFVa3NRMEZCUTA0c1dVRkJXVHRGUVVNeFFqdEZRVVZCVHl4SFFVRkhRU3hEUVVGQkxFVkJRV2RDTzBsQlEycENMRTlCUVU4c1NVRkJTVHRGUVVOaU8wRkJRMFk3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1pVRkJaVmdzVjBGQlZ5SjkiXSwibmFtZXMiOlsiQ3JlZGVudGlhbHMiLCJjb25zdHJ1Y3RvciIsImFjY2Vzc0tleSIsInNlY3JldEtleSIsInNlc3Npb25Ub2tlbiIsInNldEFjY2Vzc0tleSIsImdldEFjY2Vzc0tleSIsInNldFNlY3JldEtleSIsImdldFNlY3JldEtleSIsInNldFNlc3Npb25Ub2tlbiIsImdldFNlc3Npb25Ub2tlbiIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/Credentials.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/errors.mjs":
/*!************************************************!*\
  !*** ./node_modules/minio/dist/esm/errors.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessKeyRequiredError: () => (/* binding */ AccessKeyRequiredError),\n/* harmony export */   AnonymousRequestError: () => (/* binding */ AnonymousRequestError),\n/* harmony export */   ExpiresParamError: () => (/* binding */ ExpiresParamError),\n/* harmony export */   IncorrectSizeError: () => (/* binding */ IncorrectSizeError),\n/* harmony export */   InvalidArgumentError: () => (/* binding */ InvalidArgumentError),\n/* harmony export */   InvalidBucketNameError: () => (/* binding */ InvalidBucketNameError),\n/* harmony export */   InvalidBucketPolicyError: () => (/* binding */ InvalidBucketPolicyError),\n/* harmony export */   InvalidDateError: () => (/* binding */ InvalidDateError),\n/* harmony export */   InvalidEndpointError: () => (/* binding */ InvalidEndpointError),\n/* harmony export */   InvalidObjectNameError: () => (/* binding */ InvalidObjectNameError),\n/* harmony export */   InvalidPortError: () => (/* binding */ InvalidPortError),\n/* harmony export */   InvalidPrefixError: () => (/* binding */ InvalidPrefixError),\n/* harmony export */   InvalidXMLError: () => (/* binding */ InvalidXMLError),\n/* harmony export */   IsValidBucketNameError: () => (/* binding */ IsValidBucketNameError),\n/* harmony export */   S3Error: () => (/* binding */ S3Error),\n/* harmony export */   SecretKeyRequiredError: () => (/* binding */ SecretKeyRequiredError)\n/* harmony export */ });\n/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /// <reference lib=\"ES2022.Error\" />\nclass ExtendableError extends Error {\n    constructor(message, opt){\n        // error Option {cause?: unknown} is a 'nice to have',\n        // don't use it internally\n        super(message, opt);\n        // set error name, otherwise it's always 'Error'\n        this.name = this.constructor.name;\n    }\n}\n/**\n * AnonymousRequestError is generated for anonymous keys on specific\n * APIs. NOTE: PresignedURL generation always requires access keys.\n */ class AnonymousRequestError extends ExtendableError {\n}\n/**\n * InvalidArgumentError is generated for all invalid arguments.\n */ class InvalidArgumentError extends ExtendableError {\n}\n/**\n * InvalidPortError is generated when a non integer value is provided\n * for ports.\n */ class InvalidPortError extends ExtendableError {\n}\n/**\n * InvalidEndpointError is generated when an invalid end point value is\n * provided which does not follow domain standards.\n */ class InvalidEndpointError extends ExtendableError {\n}\n/**\n * InvalidBucketNameError is generated when an invalid bucket name is\n * provided which does not follow AWS S3 specifications.\n * http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\n */ class InvalidBucketNameError extends ExtendableError {\n}\n/**\n * InvalidObjectNameError is generated when an invalid object name is\n * provided which does not follow AWS S3 specifications.\n * http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html\n */ class InvalidObjectNameError extends ExtendableError {\n}\n/**\n * AccessKeyRequiredError generated by signature methods when access\n * key is not found.\n */ class AccessKeyRequiredError extends ExtendableError {\n}\n/**\n * SecretKeyRequiredError generated by signature methods when secret\n * key is not found.\n */ class SecretKeyRequiredError extends ExtendableError {\n}\n/**\n * ExpiresParamError generated when expires parameter value is not\n * well within stipulated limits.\n */ class ExpiresParamError extends ExtendableError {\n}\n/**\n * InvalidDateError generated when invalid date is found.\n */ class InvalidDateError extends ExtendableError {\n}\n/**\n * InvalidPrefixError generated when object prefix provided is invalid\n * or does not conform to AWS S3 object key restrictions.\n */ class InvalidPrefixError extends ExtendableError {\n}\n/**\n * InvalidBucketPolicyError generated when the given bucket policy is invalid.\n */ class InvalidBucketPolicyError extends ExtendableError {\n}\n/**\n * IncorrectSizeError generated when total data read mismatches with\n * the input size.\n */ class IncorrectSizeError extends ExtendableError {\n}\n/**\n * InvalidXMLError generated when an unknown XML is found.\n */ class InvalidXMLError extends ExtendableError {\n}\n/**\n * S3Error is generated for errors returned from S3 server.\n * see getErrorTransformer for details\n */ class S3Error extends ExtendableError {\n}\nclass IsValidBucketNameError extends ExtendableError {\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFeHRlbmRhYmxlRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsIm9wdCIsIm5hbWUiLCJBbm9ueW1vdXNSZXF1ZXN0RXJyb3IiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIkludmFsaWRQb3J0RXJyb3IiLCJJbnZhbGlkRW5kcG9pbnRFcnJvciIsIkludmFsaWRCdWNrZXROYW1lRXJyb3IiLCJJbnZhbGlkT2JqZWN0TmFtZUVycm9yIiwiQWNjZXNzS2V5UmVxdWlyZWRFcnJvciIsIlNlY3JldEtleVJlcXVpcmVkRXJyb3IiLCJFeHBpcmVzUGFyYW1FcnJvciIsIkludmFsaWREYXRlRXJyb3IiLCJJbnZhbGlkUHJlZml4RXJyb3IiLCJJbnZhbGlkQnVja2V0UG9saWN5RXJyb3IiLCJJbmNvcnJlY3RTaXplRXJyb3IiLCJJbnZhbGlkWE1MRXJyb3IiLCJTM0Vycm9yIiwiSXNWYWxpZEJ1Y2tldE5hbWVFcnJvciJdLCJzb3VyY2VzIjpbImVycm9ycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWluSU8gSmF2YXNjcmlwdCBMaWJyYXJ5IGZvciBBbWF6b24gUzMgQ29tcGF0aWJsZSBDbG91ZCBTdG9yYWdlLCAoQykgMjAxNSBNaW5JTywgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJFUzIwMjIuRXJyb3JcIiAvPlxuXG5jbGFzcyBFeHRlbmRhYmxlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcsIG9wdD86IEVycm9yT3B0aW9ucykge1xuICAgIC8vIGVycm9yIE9wdGlvbiB7Y2F1c2U/OiB1bmtub3dufSBpcyBhICduaWNlIHRvIGhhdmUnLFxuICAgIC8vIGRvbid0IHVzZSBpdCBpbnRlcm5hbGx5XG4gICAgc3VwZXIobWVzc2FnZSwgb3B0KVxuICAgIC8vIHNldCBlcnJvciBuYW1lLCBvdGhlcndpc2UgaXQncyBhbHdheXMgJ0Vycm9yJ1xuICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZVxuICB9XG59XG5cbi8qKlxuICogQW5vbnltb3VzUmVxdWVzdEVycm9yIGlzIGdlbmVyYXRlZCBmb3IgYW5vbnltb3VzIGtleXMgb24gc3BlY2lmaWNcbiAqIEFQSXMuIE5PVEU6IFByZXNpZ25lZFVSTCBnZW5lcmF0aW9uIGFsd2F5cyByZXF1aXJlcyBhY2Nlc3Mga2V5cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFub255bW91c1JlcXVlc3RFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIEludmFsaWRBcmd1bWVudEVycm9yIGlzIGdlbmVyYXRlZCBmb3IgYWxsIGludmFsaWQgYXJndW1lbnRzLlxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZEFyZ3VtZW50RXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige31cblxuLyoqXG4gKiBJbnZhbGlkUG9ydEVycm9yIGlzIGdlbmVyYXRlZCB3aGVuIGEgbm9uIGludGVnZXIgdmFsdWUgaXMgcHJvdmlkZWRcbiAqIGZvciBwb3J0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRQb3J0RXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige31cblxuLyoqXG4gKiBJbnZhbGlkRW5kcG9pbnRFcnJvciBpcyBnZW5lcmF0ZWQgd2hlbiBhbiBpbnZhbGlkIGVuZCBwb2ludCB2YWx1ZSBpc1xuICogcHJvdmlkZWQgd2hpY2ggZG9lcyBub3QgZm9sbG93IGRvbWFpbiBzdGFuZGFyZHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkRW5kcG9pbnRFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIEludmFsaWRCdWNrZXROYW1lRXJyb3IgaXMgZ2VuZXJhdGVkIHdoZW4gYW4gaW52YWxpZCBidWNrZXQgbmFtZSBpc1xuICogcHJvdmlkZWQgd2hpY2ggZG9lcyBub3QgZm9sbG93IEFXUyBTMyBzcGVjaWZpY2F0aW9ucy5cbiAqIGh0dHA6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FtYXpvblMzL2xhdGVzdC9kZXYvQnVja2V0UmVzdHJpY3Rpb25zLmh0bWxcbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRCdWNrZXROYW1lRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige31cblxuLyoqXG4gKiBJbnZhbGlkT2JqZWN0TmFtZUVycm9yIGlzIGdlbmVyYXRlZCB3aGVuIGFuIGludmFsaWQgb2JqZWN0IG5hbWUgaXNcbiAqIHByb3ZpZGVkIHdoaWNoIGRvZXMgbm90IGZvbGxvdyBBV1MgUzMgc3BlY2lmaWNhdGlvbnMuXG4gKiBodHRwOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BbWF6b25TMy9sYXRlc3QvZGV2L1VzaW5nTWV0YWRhdGEuaHRtbFxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZE9iamVjdE5hbWVFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIEFjY2Vzc0tleVJlcXVpcmVkRXJyb3IgZ2VuZXJhdGVkIGJ5IHNpZ25hdHVyZSBtZXRob2RzIHdoZW4gYWNjZXNzXG4gKiBrZXkgaXMgbm90IGZvdW5kLlxuICovXG5leHBvcnQgY2xhc3MgQWNjZXNzS2V5UmVxdWlyZWRFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIFNlY3JldEtleVJlcXVpcmVkRXJyb3IgZ2VuZXJhdGVkIGJ5IHNpZ25hdHVyZSBtZXRob2RzIHdoZW4gc2VjcmV0XG4gKiBrZXkgaXMgbm90IGZvdW5kLlxuICovXG5leHBvcnQgY2xhc3MgU2VjcmV0S2V5UmVxdWlyZWRFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIEV4cGlyZXNQYXJhbUVycm9yIGdlbmVyYXRlZCB3aGVuIGV4cGlyZXMgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdFxuICogd2VsbCB3aXRoaW4gc3RpcHVsYXRlZCBsaW1pdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHBpcmVzUGFyYW1FcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIEludmFsaWREYXRlRXJyb3IgZ2VuZXJhdGVkIHdoZW4gaW52YWxpZCBkYXRlIGlzIGZvdW5kLlxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZERhdGVFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIEludmFsaWRQcmVmaXhFcnJvciBnZW5lcmF0ZWQgd2hlbiBvYmplY3QgcHJlZml4IHByb3ZpZGVkIGlzIGludmFsaWRcbiAqIG9yIGRvZXMgbm90IGNvbmZvcm0gdG8gQVdTIFMzIG9iamVjdCBrZXkgcmVzdHJpY3Rpb25zLlxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZFByZWZpeEVycm9yIGV4dGVuZHMgRXh0ZW5kYWJsZUVycm9yIHt9XG5cbi8qKlxuICogSW52YWxpZEJ1Y2tldFBvbGljeUVycm9yIGdlbmVyYXRlZCB3aGVuIHRoZSBnaXZlbiBidWNrZXQgcG9saWN5IGlzIGludmFsaWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQnVja2V0UG9saWN5RXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige31cblxuLyoqXG4gKiBJbmNvcnJlY3RTaXplRXJyb3IgZ2VuZXJhdGVkIHdoZW4gdG90YWwgZGF0YSByZWFkIG1pc21hdGNoZXMgd2l0aFxuICogdGhlIGlucHV0IHNpemUuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmNvcnJlY3RTaXplRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige31cblxuLyoqXG4gKiBJbnZhbGlkWE1MRXJyb3IgZ2VuZXJhdGVkIHdoZW4gYW4gdW5rbm93biBYTUwgaXMgZm91bmQuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkWE1MRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige31cblxuLyoqXG4gKiBTM0Vycm9yIGlzIGdlbmVyYXRlZCBmb3IgZXJyb3JzIHJldHVybmVkIGZyb20gUzMgc2VydmVyLlxuICogc2VlIGdldEVycm9yVHJhbnNmb3JtZXIgZm9yIGRldGFpbHNcbiAqL1xuZXhwb3J0IGNsYXNzIFMzRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige1xuICBjb2RlPzogc3RyaW5nXG59XG5cbmV4cG9ydCBjbGFzcyBJc1ZhbGlkQnVja2V0TmFtZUVycm9yIGV4dGVuZHMgRXh0ZW5kYWJsZUVycm9yIHt9XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxNQUFNQSxlQUFlLFNBQVNDLEtBQUssQ0FBQztFQUNsQ0MsV0FBV0EsQ0FBQ0MsT0FBZ0IsRUFBRUMsR0FBa0IsRUFBRTtJQUNoRDtJQUNBO0lBQ0EsS0FBSyxDQUFDRCxPQUFPLEVBQUVDLEdBQUcsQ0FBQztJQUNuQjtJQUNBLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQ0gsV0FBVyxDQUFDRyxJQUFJO0VBQ25DO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1DLHFCQUFxQixTQUFTTixlQUFlLENBQUM7O0FBRTNEO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTU8sb0JBQW9CLFNBQVNQLGVBQWUsQ0FBQzs7QUFFMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1RLGdCQUFnQixTQUFTUixlQUFlLENBQUM7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNUyxvQkFBb0IsU0FBU1QsZUFBZSxDQUFDOztBQUUxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNVSxzQkFBc0IsU0FBU1YsZUFBZSxDQUFDOztBQUU1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNVyxzQkFBc0IsU0FBU1gsZUFBZSxDQUFDOztBQUU1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTVksc0JBQXNCLFNBQVNaLGVBQWUsQ0FBQzs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1hLHNCQUFzQixTQUFTYixlQUFlLENBQUM7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNYyxpQkFBaUIsU0FBU2QsZUFBZSxDQUFDOztBQUV2RDtBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1lLGdCQUFnQixTQUFTZixlQUFlLENBQUM7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNZ0Isa0JBQWtCLFNBQVNoQixlQUFlLENBQUM7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTWlCLHdCQUF3QixTQUFTakIsZUFBZSxDQUFDOztBQUU5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTWtCLGtCQUFrQixTQUFTbEIsZUFBZSxDQUFDOztBQUV4RDtBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1tQixlQUFlLFNBQVNuQixlQUFlLENBQUM7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNb0IsT0FBTyxTQUFTcEIsZUFBZSxDQUFDO0FBSTdDLE9BQU8sTUFBTXFCLHNCQUFzQixTQUFTckIsZUFBZSxDQUFDIn0=\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/errors.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/helpers.mjs":
/*!*************************************************!*\
  !*** ./node_modules/minio/dist/esm/helpers.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CopyDestinationOptions: () => (/* binding */ CopyDestinationOptions),\n/* harmony export */   CopySourceOptions: () => (/* binding */ CopySourceOptions),\n/* harmony export */   DEFAULT_REGION: () => (/* binding */ DEFAULT_REGION),\n/* harmony export */   ENCRYPTION_TYPES: () => (/* reexport safe */ _internal_type_mjs__WEBPACK_IMPORTED_MODULE_5__.ENCRYPTION_TYPES),\n/* harmony export */   LEGAL_HOLD_STATUS: () => (/* reexport safe */ _internal_type_mjs__WEBPACK_IMPORTED_MODULE_5__.LEGAL_HOLD_STATUS),\n/* harmony export */   RETENTION_MODES: () => (/* reexport safe */ _internal_type_mjs__WEBPACK_IMPORTED_MODULE_5__.RETENTION_MODES),\n/* harmony export */   RETENTION_VALIDITY_UNITS: () => (/* reexport safe */ _internal_type_mjs__WEBPACK_IMPORTED_MODULE_5__.RETENTION_VALIDITY_UNITS),\n/* harmony export */   SelectResults: () => (/* binding */ SelectResults),\n/* harmony export */   removeDirAndFiles: () => (/* binding */ removeDirAndFiles)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! query-string */ \"(rsc)/./node_modules/query-string/index.js\");\n/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.mjs */ \"(rsc)/./node_modules/minio/dist/esm/errors.mjs\");\n/* harmony import */ var _internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/helper.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\");\n/* harmony import */ var _internal_type_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/type.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/type.mjs\");\n\n\n\n\n\n\n\nconst DEFAULT_REGION = \"us-east-1\";\nclass CopySourceOptions {\n    constructor({ Bucket, Object: Object1, VersionID = \"\", MatchETag = \"\", NoMatchETag = \"\", MatchModifiedSince = null, MatchUnmodifiedSince = null, MatchRange = false, Start = 0, End = 0, Encryption = undefined }){\n        this.Bucket = Bucket;\n        this.Object = Object1;\n        this.VersionID = VersionID;\n        this.MatchETag = MatchETag;\n        this.NoMatchETag = NoMatchETag;\n        this.MatchModifiedSince = MatchModifiedSince;\n        this.MatchUnmodifiedSince = MatchUnmodifiedSince;\n        this.MatchRange = MatchRange;\n        this.Start = Start;\n        this.End = End;\n        this.Encryption = Encryption;\n    }\n    validate() {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isValidBucketName)(this.Bucket)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_3__.InvalidBucketNameError(\"Invalid Source bucket name: \" + this.Bucket);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isValidObjectName)(this.Object)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_3__.InvalidObjectNameError(`Invalid Source object name: ${this.Object}`);\n        }\n        if (this.MatchRange && this.Start !== -1 && this.End !== -1 && this.Start > this.End || this.Start < 0) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_3__.InvalidObjectNameError(\"Source start must be non-negative, and start must be at most end.\");\n        } else if (this.MatchRange && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isNumber)(this.Start) || !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isNumber)(this.End)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_3__.InvalidObjectNameError(\"MatchRange is specified. But Invalid Start and End values are specified.\");\n        }\n        return true;\n    }\n    getHeaders() {\n        const headerOptions = {};\n        headerOptions[\"x-amz-copy-source\"] = encodeURI(this.Bucket + \"/\" + this.Object);\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmpty)(this.VersionID)) {\n            headerOptions[\"x-amz-copy-source\"] = `${encodeURI(this.Bucket + \"/\" + this.Object)}?versionId=${this.VersionID}`;\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmpty)(this.MatchETag)) {\n            headerOptions[\"x-amz-copy-source-if-match\"] = this.MatchETag;\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmpty)(this.NoMatchETag)) {\n            headerOptions[\"x-amz-copy-source-if-none-match\"] = this.NoMatchETag;\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmpty)(this.MatchModifiedSince)) {\n            headerOptions[\"x-amz-copy-source-if-modified-since\"] = this.MatchModifiedSince;\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmpty)(this.MatchUnmodifiedSince)) {\n            headerOptions[\"x-amz-copy-source-if-unmodified-since\"] = this.MatchUnmodifiedSince;\n        }\n        return headerOptions;\n    }\n}\n/**\n * @deprecated use nodejs fs module\n */ function removeDirAndFiles(dirPath, removeSelf = true) {\n    if (removeSelf) {\n        return fs__WEBPACK_IMPORTED_MODULE_0__.rmSync(dirPath, {\n            recursive: true,\n            force: true\n        });\n    }\n    fs__WEBPACK_IMPORTED_MODULE_0__.readdirSync(dirPath).forEach((item)=>{\n        fs__WEBPACK_IMPORTED_MODULE_0__.rmSync(path__WEBPACK_IMPORTED_MODULE_1__.join(dirPath, item), {\n            recursive: true,\n            force: true\n        });\n    });\n}\nclass CopyDestinationOptions {\n    constructor({ Bucket, Object: Object1, Encryption, UserMetadata, UserTags, LegalHold, RetainUntilDate, Mode, MetadataDirective }){\n        this.Bucket = Bucket;\n        this.Object = Object1;\n        this.Encryption = Encryption ?? undefined; // null input will become undefined, easy for runtime assert\n        this.UserMetadata = UserMetadata;\n        this.UserTags = UserTags;\n        this.LegalHold = LegalHold;\n        this.Mode = Mode; // retention mode\n        this.RetainUntilDate = RetainUntilDate;\n        this.MetadataDirective = MetadataDirective;\n    }\n    getHeaders() {\n        const replaceDirective = \"REPLACE\";\n        const headerOptions = {};\n        const userTags = this.UserTags;\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmpty)(userTags)) {\n            headerOptions[\"X-Amz-Tagging-Directive\"] = replaceDirective;\n            headerOptions[\"X-Amz-Tagging\"] = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isObject)(userTags) ? query_string__WEBPACK_IMPORTED_MODULE_2__.stringify(userTags) : (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isString)(userTags) ? userTags : \"\";\n        }\n        if (this.Mode) {\n            headerOptions[\"X-Amz-Object-Lock-Mode\"] = this.Mode; // GOVERNANCE or COMPLIANCE\n        }\n        if (this.RetainUntilDate) {\n            headerOptions[\"X-Amz-Object-Lock-Retain-Until-Date\"] = this.RetainUntilDate; // needs to be UTC.\n        }\n        if (this.LegalHold) {\n            headerOptions[\"X-Amz-Object-Lock-Legal-Hold\"] = this.LegalHold; // ON or OFF\n        }\n        if (this.UserMetadata) {\n            for (const [key, value] of Object.entries(this.UserMetadata)){\n                headerOptions[`X-Amz-Meta-${key}`] = value.toString();\n            }\n        }\n        if (this.MetadataDirective) {\n            headerOptions[`X-Amz-Metadata-Directive`] = this.MetadataDirective;\n        }\n        if (this.Encryption) {\n            const encryptionHeaders = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.getEncryptionHeaders)(this.Encryption);\n            for (const [key, value] of Object.entries(encryptionHeaders)){\n                headerOptions[key] = value;\n            }\n        }\n        return headerOptions;\n    }\n    validate() {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isValidBucketName)(this.Bucket)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_3__.InvalidBucketNameError(\"Invalid Destination bucket name: \" + this.Bucket);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isValidObjectName)(this.Object)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_3__.InvalidObjectNameError(`Invalid Destination object name: ${this.Object}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmpty)(this.UserMetadata) && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isObject)(this.UserMetadata)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_3__.InvalidObjectNameError(`Destination UserMetadata should be an object with key value pairs`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmpty)(this.Mode) && ![\n            _internal_type_mjs__WEBPACK_IMPORTED_MODULE_5__.RETENTION_MODES.GOVERNANCE,\n            _internal_type_mjs__WEBPACK_IMPORTED_MODULE_5__.RETENTION_MODES.COMPLIANCE\n        ].includes(this.Mode)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_3__.InvalidObjectNameError(`Invalid Mode specified for destination object it should be one of [GOVERNANCE,COMPLIANCE]`);\n        }\n        if (this.Encryption !== undefined && (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmptyObject)(this.Encryption)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_3__.InvalidObjectNameError(`Invalid Encryption configuration for destination object `);\n        }\n        return true;\n    }\n}\n/**\n * maybe this should be a generic type for Records, leave it for later refactor\n */ class SelectResults {\n    constructor({ records, // parsed data as stream\n    response, // original response stream\n    stats, // stats as xml\n    progress// stats as xml\n     }){\n        this.records = records;\n        this.response = response;\n        this.stats = stats;\n        this.progress = progress;\n    }\n    setStats(stats) {\n        this.stats = stats;\n    }\n    getStats() {\n        return this.stats;\n    }\n    setProgress(progress) {\n        this.progress = progress;\n    }\n    getProgress() {\n        return this.progress;\n    }\n    setResponse(response) {\n        this.response = response;\n    }\n    getResponse() {\n        return this.response;\n    }\n    setRecords(records) {\n        this.records = records;\n    }\n    getRecords() {\n        return this.records;\n    }\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/helpers.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/internal/callbackify.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/minio/dist/esm/internal/callbackify.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callbackify: () => (/* binding */ callbackify)\n/* harmony export */ });\n// wrapper an async function that support callback style API.\n// It will preserve 'this'.\nfunction callbackify(fn) {\n    return function() {\n        const args = [\n            ...arguments\n        ];\n        const callback = args.pop();\n        // If the last argument is a function, assume it's the callback.\n        if (typeof callback === \"function\") {\n            return fn.apply(this, args).then((result)=>callback(null, result), (err)=>callback(err));\n        }\n        return fn.apply(this, arguments);\n    };\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxsYmFja2lmeSIsImZuIiwiYXJncyIsImFyZ3VtZW50cyIsImNhbGxiYWNrIiwicG9wIiwiYXBwbHkiLCJ0aGVuIiwicmVzdWx0IiwiZXJyIl0sInNvdXJjZXMiOlsiY2FsbGJhY2tpZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gd3JhcHBlciBhbiBhc3luYyBmdW5jdGlvbiB0aGF0IHN1cHBvcnQgY2FsbGJhY2sgc3R5bGUgQVBJLlxuLy8gSXQgd2lsbCBwcmVzZXJ2ZSAndGhpcycuXG5leHBvcnQgZnVuY3Rpb24gY2FsbGJhY2tpZnkoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBhcmdzID0gWy4uLmFyZ3VtZW50c11cbiAgICBjb25zdCBjYWxsYmFjayA9IGFyZ3MucG9wKClcblxuICAgIC8vIElmIHRoZSBsYXN0IGFyZ3VtZW50IGlzIGEgZnVuY3Rpb24sIGFzc3VtZSBpdCdzIHRoZSBjYWxsYmFjay5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncykudGhlbihcbiAgICAgICAgKHJlc3VsdCkgPT4gY2FsbGJhY2sobnVsbCwgcmVzdWx0KSxcbiAgICAgICAgKGVycikgPT4gY2FsbGJhY2soZXJyKSxcbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxPQUFPLFNBQVNBLFdBQVdBLENBQUNDLEVBQUUsRUFBRTtFQUM5QixPQUFPLFlBQVk7SUFDakIsTUFBTUMsSUFBSSxHQUFHLENBQUMsR0FBR0MsU0FBUyxDQUFDO0lBQzNCLE1BQU1DLFFBQVEsR0FBR0YsSUFBSSxDQUFDRyxHQUFHLENBQUMsQ0FBQzs7SUFFM0I7SUFDQSxJQUFJLE9BQU9ELFFBQVEsS0FBSyxVQUFVLEVBQUU7TUFDbEMsT0FBT0gsRUFBRSxDQUFDSyxLQUFLLENBQUMsSUFBSSxFQUFFSixJQUFJLENBQUMsQ0FBQ0ssSUFBSSxDQUM3QkMsTUFBTSxJQUFLSixRQUFRLENBQUMsSUFBSSxFQUFFSSxNQUFNLENBQUMsRUFDakNDLEdBQUcsSUFBS0wsUUFBUSxDQUFDSyxHQUFHLENBQ3ZCLENBQUM7SUFDSDtJQUVBLE9BQU9SLEVBQUUsQ0FBQ0ssS0FBSyxDQUFDLElBQUksRUFBRUgsU0FBUyxDQUFDO0VBQ2xDLENBQUM7QUFDSCJ9\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWluaW8vZGlzdC9lc20vaW50ZXJuYWwvY2FsbGJhY2tpZnkubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2REFBNkQ7QUFDN0QsMkJBQTJCO0FBQ3BCLFNBQVNBLFlBQVlDLEVBQUU7SUFDNUIsT0FBTztRQUNMLE1BQU1DLE9BQU87ZUFBSUM7U0FBVTtRQUMzQixNQUFNQyxXQUFXRixLQUFLRyxHQUFHO1FBRXpCLGdFQUFnRTtRQUNoRSxJQUFJLE9BQU9ELGFBQWEsWUFBWTtZQUNsQyxPQUFPSCxHQUFHSyxLQUFLLENBQUMsSUFBSSxFQUFFSixNQUFNSyxJQUFJLENBQUNDLENBQUFBLFNBQVVKLFNBQVMsTUFBTUksU0FBU0MsQ0FBQUEsTUFBT0wsU0FBU0s7UUFDckY7UUFDQSxPQUFPUixHQUFHSyxLQUFLLENBQUMsSUFBSSxFQUFFSDtJQUN4QjtBQUNGLEVBQ0Esb2hEQUFvaEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maWxlLW1hbmFnZW1lbnQtc3lzdGVtLy4vbm9kZV9tb2R1bGVzL21pbmlvL2Rpc3QvZXNtL2ludGVybmFsL2NhbGxiYWNraWZ5Lm1qcz9hY2UwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHdyYXBwZXIgYW4gYXN5bmMgZnVuY3Rpb24gdGhhdCBzdXBwb3J0IGNhbGxiYWNrIHN0eWxlIEFQSS5cbi8vIEl0IHdpbGwgcHJlc2VydmUgJ3RoaXMnLlxuZXhwb3J0IGZ1bmN0aW9uIGNhbGxiYWNraWZ5KGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgYXJncyA9IFsuLi5hcmd1bWVudHNdO1xuICAgIGNvbnN0IGNhbGxiYWNrID0gYXJncy5wb3AoKTtcblxuICAgIC8vIElmIHRoZSBsYXN0IGFyZ3VtZW50IGlzIGEgZnVuY3Rpb24sIGFzc3VtZSBpdCdzIHRoZSBjYWxsYmFjay5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncykudGhlbihyZXN1bHQgPT4gY2FsbGJhY2sobnVsbCwgcmVzdWx0KSwgZXJyID0+IGNhbGxiYWNrKGVycikpO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKallXeHNZbUZqYTJsbWVTSXNJbVp1SWl3aVlYSm5jeUlzSW1GeVozVnRaVzUwY3lJc0ltTmhiR3hpWVdOcklpd2ljRzl3SWl3aVlYQndiSGtpTENKMGFHVnVJaXdpY21WemRXeDBJaXdpWlhKeUlsMHNJbk52ZFhKalpYTWlPbHNpWTJGc2JHSmhZMnRwWm5rdWFuTWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z2QzSmhjSEJsY2lCaGJpQmhjM2x1WXlCbWRXNWpkR2x2YmlCMGFHRjBJSE4xY0hCdmNuUWdZMkZzYkdKaFkyc2djM1I1YkdVZ1FWQkpMbHh1THk4Z1NYUWdkMmxzYkNCd2NtVnpaWEoyWlNBbmRHaHBjeWN1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWTJGc2JHSmhZMnRwWm5rb1ptNHBJSHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCamIyNXpkQ0JoY21keklEMGdXeTR1TG1GeVozVnRaVzUwYzExY2JpQWdJQ0JqYjI1emRDQmpZV3hzWW1GamF5QTlJR0Z5WjNNdWNHOXdLQ2xjYmx4dUlDQWdJQzh2SUVsbUlIUm9aU0JzWVhOMElHRnlaM1Z0Wlc1MElHbHpJR0VnWm5WdVkzUnBiMjRzSUdGemMzVnRaU0JwZENkeklIUm9aU0JqWVd4c1ltRmpheTVjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR05oYkd4aVlXTnJJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptNHVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmN5a3VkR2hsYmloY2JpQWdJQ0FnSUNBZ0tISmxjM1ZzZENrZ1BUNGdZMkZzYkdKaFkyc29iblZzYkN3Z2NtVnpkV3gwS1N4Y2JpQWdJQ0FnSUNBZ0tHVnljaWtnUFQ0Z1kyRnNiR0poWTJzb1pYSnlLU3hjYmlBZ0lDQWdJQ2xjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1ptNHVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1Z4dUlDQjlYRzU5WEc0aVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFTeFBRVUZQTEZOQlFWTkJMRmRCUVZkQkxFTkJRVU5ETEVWQlFVVXNSVUZCUlR0RlFVTTVRaXhQUVVGUExGbEJRVms3U1VGRGFrSXNUVUZCVFVNc1NVRkJTU3hIUVVGSExFTkJRVU1zUjBGQlIwTXNVMEZCVXl4RFFVRkRPMGxCUXpOQ0xFMUJRVTFETEZGQlFWRXNSMEZCUjBZc1NVRkJTU3hEUVVGRFJ5eEhRVUZITEVOQlFVTXNRMEZCUXpzN1NVRkZNMEk3U1VGRFFTeEpRVUZKTEU5QlFVOUVMRkZCUVZFc1MwRkJTeXhWUVVGVkxFVkJRVVU3VFVGRGJFTXNUMEZCVDBnc1JVRkJSU3hEUVVGRFN5eExRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkZTaXhKUVVGSkxFTkJRVU1zUTBGQlEwc3NTVUZCU1N4RFFVTTNRa01zVFVGQlRTeEpRVUZMU2l4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRlNTeE5RVUZOTEVOQlFVTXNSVUZEYWtORExFZEJRVWNzU1VGQlMwd3NVVUZCVVN4RFFVRkRTeXhIUVVGSExFTkJRM1pDTEVOQlFVTTdTVUZEU0R0SlFVVkJMRTlCUVU5U0xFVkJRVVVzUTBGQlEwc3NTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSVWdzVTBGQlV5eERRVUZETzBWQlEyeERMRU5CUVVNN1FVRkRTQ0o5Il0sIm5hbWVzIjpbImNhbGxiYWNraWZ5IiwiZm4iLCJhcmdzIiwiYXJndW1lbnRzIiwiY2FsbGJhY2siLCJwb3AiLCJhcHBseSIsInRoZW4iLCJyZXN1bHQiLCJlcnIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/internal/callbackify.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/internal/client.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/minio/dist/esm/internal/client.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var https__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\nvar http__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypedClient: () => (/* binding */ TypedClient)\n/* harmony export */ });\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var browser_or_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! browser-or-node */ \"(rsc)/./node_modules/browser-or-node/lib/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ \"lodash\");\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! query-string */ \"(rsc)/./node_modules/query-string/index.js\");\n/* harmony import */ var xml2js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\n/* harmony import */ var _CredentialProvider_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../CredentialProvider.mjs */ \"(rsc)/./node_modules/minio/dist/esm/CredentialProvider.mjs\");\n/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../errors.mjs */ \"(rsc)/./node_modules/minio/dist/esm/errors.mjs\");\n/* harmony import */ var _helpers_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers.mjs */ \"(rsc)/./node_modules/minio/dist/esm/helpers.mjs\");\n/* harmony import */ var _signing_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../signing.mjs */ \"(rsc)/./node_modules/minio/dist/esm/signing.mjs\");\n/* harmony import */ var _extensions_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extensions.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/extensions.mjs\");\n/* harmony import */ var _helper_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helper.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\");\n/* harmony import */ var _request_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./request.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/request.mjs\");\n/* harmony import */ var _response_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./response.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/response.mjs\");\n/* harmony import */ var _s3_endpoints_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./s3-endpoints.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/s3-endpoints.mjs\");\n/* harmony import */ var _xml_parser_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./xml-parser.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/xml-parser.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// will be replaced by bundler.\nconst Package = {\n    version: \"7.1.3\" || 0\n};\nconst requestOptionProperties = [\n    \"agent\",\n    \"ca\",\n    \"cert\",\n    \"ciphers\",\n    \"clientCertEngine\",\n    \"crl\",\n    \"dhparam\",\n    \"ecdhCurve\",\n    \"family\",\n    \"honorCipherOrder\",\n    \"key\",\n    \"passphrase\",\n    \"pfx\",\n    \"rejectUnauthorized\",\n    \"secureOptions\",\n    \"secureProtocol\",\n    \"servername\",\n    \"sessionIdContext\"\n];\nclass TypedClient {\n    constructor(params){\n        this.partSize = 64 * 1024 * 1024;\n        this.maximumPartSize = 5 * 1024 * 1024 * 1024;\n        this.maxObjectSize = 5 * 1024 * 1024 * 1024 * 1024;\n        // @ts-expect-error deprecated property\n        if (params.secure !== undefined) {\n            throw new Error('\"secure\" option deprecated, \"useSSL\" should be used instead');\n        }\n        // Default values if not specified.\n        if (params.useSSL === undefined) {\n            params.useSSL = true;\n        }\n        if (!params.port) {\n            params.port = 0;\n        }\n        // Validate input params.\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidEndpoint)(params.endPoint)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidEndpointError(`Invalid endPoint : ${params.endPoint}`);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidPort)(params.port)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(`Invalid port : ${params.port}`);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isBoolean)(params.useSSL)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(`Invalid useSSL flag type : ${params.useSSL}, expected to be of type \"boolean\"`);\n        }\n        // Validate region only if its set.\n        if (params.region) {\n            if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isString)(params.region)) {\n                throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(`Invalid region : ${params.region}`);\n            }\n        }\n        const host = params.endPoint.toLowerCase();\n        let port = params.port;\n        let protocol;\n        let transport;\n        let transportAgent;\n        // Validate if configuration is not using SSL\n        // for constructing relevant endpoints.\n        if (params.useSSL) {\n            // Defaults to secure.\n            transport = /*#__PURE__*/ (https__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (https__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(https__WEBPACK_IMPORTED_MODULE_1__, 2)));\n            protocol = \"https:\";\n            port = port || 443;\n            transportAgent = https__WEBPACK_IMPORTED_MODULE_1__.globalAgent;\n        } else {\n            transport = /*#__PURE__*/ (http__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (http__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(http__WEBPACK_IMPORTED_MODULE_0__, 2)));\n            protocol = \"http:\";\n            port = port || 80;\n            transportAgent = http__WEBPACK_IMPORTED_MODULE_0__.globalAgent;\n        }\n        // if custom transport is set, use it.\n        if (params.transport) {\n            if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isObject)(params.transport)) {\n                throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(`Invalid transport type : ${params.transport}, expected to be type \"object\"`);\n            }\n            transport = params.transport;\n        }\n        // if custom transport agent is set, use it.\n        if (params.transportAgent) {\n            if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isObject)(params.transportAgent)) {\n                throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(`Invalid transportAgent type: ${params.transportAgent}, expected to be type \"object\"`);\n            }\n            transportAgent = params.transportAgent;\n        }\n        // User Agent should always following the below style.\n        // Please open an issue to discuss any new changes here.\n        //\n        //       MinIO (OS; ARCH) LIB/VER APP/VER\n        //\n        const libraryComments = `(${process.platform}; ${process.arch})`;\n        const libraryAgent = `MinIO ${libraryComments} minio-js/${Package.version}`;\n        // User agent block ends.\n        this.transport = transport;\n        this.transportAgent = transportAgent;\n        this.host = host;\n        this.port = port;\n        this.protocol = protocol;\n        this.userAgent = `${libraryAgent}`;\n        // Default path style is true\n        if (params.pathStyle === undefined) {\n            this.pathStyle = true;\n        } else {\n            this.pathStyle = params.pathStyle;\n        }\n        this.accessKey = params.accessKey ?? \"\";\n        this.secretKey = params.secretKey ?? \"\";\n        this.sessionToken = params.sessionToken;\n        this.anonymous = !this.accessKey || !this.secretKey;\n        if (params.credentialsProvider) {\n            this.credentialsProvider = params.credentialsProvider;\n        }\n        this.regionMap = {};\n        if (params.region) {\n            this.region = params.region;\n        }\n        if (params.partSize) {\n            this.partSize = params.partSize;\n            this.overRidePartSize = true;\n        }\n        if (this.partSize < 5 * 1024 * 1024) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(`Part size should be greater than 5MB`);\n        }\n        if (this.partSize > 5 * 1024 * 1024 * 1024) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(`Part size should be less than 5GB`);\n        }\n        // SHA256 is enabled only for authenticated http requests. If the request is authenticated\n        // and the connection is https we use x-amz-content-sha256=UNSIGNED-PAYLOAD\n        // header for signature calculation.\n        this.enableSHA256 = !this.anonymous && !params.useSSL;\n        this.s3AccelerateEndpoint = params.s3AccelerateEndpoint || undefined;\n        this.reqOptions = {};\n        this.clientExtensions = new _extensions_mjs__WEBPACK_IMPORTED_MODULE_10__.Extensions(this);\n    }\n    /**\n   * Minio extensions that aren't necessary present for Amazon S3 compatible storage servers\n   */ get extensions() {\n        return this.clientExtensions;\n    }\n    /**\n   * @param endPoint - valid S3 acceleration end point\n   */ setS3TransferAccelerate(endPoint) {\n        this.s3AccelerateEndpoint = endPoint;\n    }\n    /**\n   * Sets the supported request options.\n   */ setRequestOptions(options) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isObject)(options)) {\n            throw new TypeError('request options should be of type \"object\"');\n        }\n        this.reqOptions = lodash__WEBPACK_IMPORTED_MODULE_3__.pick(options, requestOptionProperties);\n    }\n    /**\n   *  This is s3 Specific and does not hold validity in any other Object storage.\n   */ getAccelerateEndPointIfSet(bucketName, objectName) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isEmpty)(this.s3AccelerateEndpoint) && !(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isEmpty)(bucketName) && !(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isEmpty)(objectName)) {\n            // http://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html\n            // Disable transfer acceleration for non-compliant bucket names.\n            if (bucketName.includes(\".\")) {\n                throw new Error(`Transfer Acceleration is not supported for non compliant bucket:${bucketName}`);\n            }\n            // If transfer acceleration is requested set new host.\n            // For more details about enabling transfer acceleration read here.\n            // http://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html\n            return this.s3AccelerateEndpoint;\n        }\n        return false;\n    }\n    /**\n   * returns options object that can be used with http.request()\n   * Takes care of constructing virtual-host-style or path-style hostname\n   */ getRequestOptions(opts) {\n        const method = opts.method;\n        const region = opts.region;\n        const bucketName = opts.bucketName;\n        let objectName = opts.objectName;\n        const headers = opts.headers;\n        const query = opts.query;\n        let reqOptions = {\n            method,\n            headers: {},\n            protocol: this.protocol,\n            // If custom transportAgent was supplied earlier, we'll inject it here\n            agent: this.transportAgent\n        };\n        // Verify if virtual host supported.\n        let virtualHostStyle;\n        if (bucketName) {\n            virtualHostStyle = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isVirtualHostStyle)(this.host, this.protocol, bucketName, this.pathStyle);\n        }\n        let path = \"/\";\n        let host = this.host;\n        let port;\n        if (this.port) {\n            port = this.port;\n        }\n        if (objectName) {\n            objectName = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.uriResourceEscape)(objectName);\n        }\n        // For Amazon S3 endpoint, get endpoint based on region.\n        if ((0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isAmazonEndpoint)(host)) {\n            const accelerateEndPoint = this.getAccelerateEndPointIfSet(bucketName, objectName);\n            if (accelerateEndPoint) {\n                host = `${accelerateEndPoint}`;\n            } else {\n                host = (0,_s3_endpoints_mjs__WEBPACK_IMPORTED_MODULE_14__.getS3Endpoint)(region);\n            }\n        }\n        if (virtualHostStyle && !opts.pathStyle) {\n            // For all hosts which support virtual host style, `bucketName`\n            // is part of the hostname in the following format:\n            //\n            //  var host = 'bucketName.example.com'\n            //\n            if (bucketName) {\n                host = `${bucketName}.${host}`;\n            }\n            if (objectName) {\n                path = `/${objectName}`;\n            }\n        } else {\n            // For all S3 compatible storage services we will fallback to\n            // path style requests, where `bucketName` is part of the URI\n            // path.\n            if (bucketName) {\n                path = `/${bucketName}`;\n            }\n            if (objectName) {\n                path = `/${bucketName}/${objectName}`;\n            }\n        }\n        if (query) {\n            path += `?${query}`;\n        }\n        reqOptions.headers.host = host;\n        if (reqOptions.protocol === \"http:\" && port !== 80 || reqOptions.protocol === \"https:\" && port !== 443) {\n            reqOptions.headers.host = `${host}:${port}`;\n        }\n        reqOptions.headers[\"user-agent\"] = this.userAgent;\n        if (headers) {\n            // have all header keys in lower case - to make signing easy\n            for (const [k, v] of Object.entries(headers)){\n                reqOptions.headers[k.toLowerCase()] = v;\n            }\n        }\n        // Use any request option specified in minioClient.setRequestOptions()\n        reqOptions = Object.assign({}, this.reqOptions, reqOptions);\n        return {\n            ...reqOptions,\n            headers: lodash__WEBPACK_IMPORTED_MODULE_3__.mapValues(lodash__WEBPACK_IMPORTED_MODULE_3__.pickBy(reqOptions.headers, _helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isDefined), (v)=>v.toString()),\n            host,\n            port,\n            path\n        };\n    }\n    async setCredentialsProvider(credentialsProvider) {\n        if (!(credentialsProvider instanceof _CredentialProvider_mjs__WEBPACK_IMPORTED_MODULE_6__.CredentialProvider)) {\n            throw new Error(\"Unable to get credentials. Expected instance of CredentialProvider\");\n        }\n        this.credentialsProvider = credentialsProvider;\n        await this.checkAndRefreshCreds();\n    }\n    async checkAndRefreshCreds() {\n        if (this.credentialsProvider) {\n            try {\n                const credentialsConf = await this.credentialsProvider.getCredentials();\n                this.accessKey = credentialsConf.getAccessKey();\n                this.secretKey = credentialsConf.getSecretKey();\n                this.sessionToken = credentialsConf.getSessionToken();\n            } catch (e) {\n                throw new Error(`Unable to get credentials: ${e}`, {\n                    cause: e\n                });\n            }\n        }\n    }\n    /**\n   * log the request, response, error\n   */ logHTTP(reqOptions, response, err) {\n        // if no logStream available return.\n        if (!this.logStream) {\n            return;\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isObject)(reqOptions)) {\n            throw new TypeError('reqOptions should be of type \"object\"');\n        }\n        if (response && !(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isReadableStream)(response)) {\n            throw new TypeError('response should be of type \"Stream\"');\n        }\n        if (err && !(err instanceof Error)) {\n            throw new TypeError('err should be of type \"Error\"');\n        }\n        const logStream = this.logStream;\n        const logHeaders = (headers)=>{\n            Object.entries(headers).forEach(([k, v])=>{\n                if (k == \"authorization\") {\n                    if ((0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isString)(v)) {\n                        const redactor = new RegExp(\"Signature=([0-9a-f]+)\");\n                        v = v.replace(redactor, \"Signature=**REDACTED**\");\n                    }\n                }\n                logStream.write(`${k}: ${v}\\n`);\n            });\n            logStream.write(\"\\n\");\n        };\n        logStream.write(`REQUEST: ${reqOptions.method} ${reqOptions.path}\\n`);\n        logHeaders(reqOptions.headers);\n        if (response) {\n            this.logStream.write(`RESPONSE: ${response.statusCode}\\n`);\n            logHeaders(response.headers);\n        }\n        if (err) {\n            logStream.write(\"ERROR BODY:\\n\");\n            const errJSON = JSON.stringify(err, null, \"\t\");\n            logStream.write(`${errJSON}\\n`);\n        }\n    }\n    /**\n   * Enable tracing\n   */ traceOn(stream) {\n        if (!stream) {\n            stream = process.stdout;\n        }\n        this.logStream = stream;\n    }\n    /**\n   * Disable tracing\n   */ traceOff() {\n        this.logStream = undefined;\n    }\n    /**\n   * makeRequest is the primitive used by the apis for making S3 requests.\n   * payload can be empty string in case of no payload.\n   * statusCode is the expected statusCode. If response.statusCode does not match\n   * we parse the XML error and call the callback with the error message.\n   *\n   * A valid region is passed by the calls - listBuckets, makeBucket and getBucketRegion.\n   *\n   * @internal\n   */ async makeRequestAsync(options, payload = \"\", expectedCodes = [\n        200\n    ], region = \"\") {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isObject)(options)) {\n            throw new TypeError('options should be of type \"object\"');\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isString)(payload) && !(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isObject)(payload)) {\n            // Buffer is of type 'object'\n            throw new TypeError('payload should be of type \"string\" or \"Buffer\"');\n        }\n        expectedCodes.forEach((statusCode)=>{\n            if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isNumber)(statusCode)) {\n                throw new TypeError('statusCode should be of type \"number\"');\n            }\n        });\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isString)(region)) {\n            throw new TypeError('region should be of type \"string\"');\n        }\n        if (!options.headers) {\n            options.headers = {};\n        }\n        if (options.method === \"POST\" || options.method === \"PUT\" || options.method === \"DELETE\") {\n            options.headers[\"content-length\"] = payload.length.toString();\n        }\n        const sha256sum = this.enableSHA256 ? (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.toSha256)(payload) : \"\";\n        return this.makeRequestStreamAsync(options, payload, sha256sum, expectedCodes, region);\n    }\n    /**\n   * new request with promise\n   *\n   * No need to drain response, response body is not valid\n   */ async makeRequestAsyncOmit(options, payload = \"\", statusCodes = [\n        200\n    ], region = \"\") {\n        const res = await this.makeRequestAsync(options, payload, statusCodes, region);\n        await (0,_response_mjs__WEBPACK_IMPORTED_MODULE_13__.drainResponse)(res);\n        return res;\n    }\n    /**\n   * makeRequestStream will be used directly instead of makeRequest in case the payload\n   * is available as a stream. for ex. putObject\n   *\n   * @internal\n   */ async makeRequestStreamAsync(options, body, sha256sum, statusCodes, region) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isObject)(options)) {\n            throw new TypeError('options should be of type \"object\"');\n        }\n        if (!(Buffer.isBuffer(body) || typeof body === \"string\" || (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isReadableStream)(body))) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(`stream should be a Buffer, string or readable Stream, got ${typeof body} instead`);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isString)(sha256sum)) {\n            throw new TypeError('sha256sum should be of type \"string\"');\n        }\n        statusCodes.forEach((statusCode)=>{\n            if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isNumber)(statusCode)) {\n                throw new TypeError('statusCode should be of type \"number\"');\n            }\n        });\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isString)(region)) {\n            throw new TypeError('region should be of type \"string\"');\n        }\n        // sha256sum will be empty for anonymous or https requests\n        if (!this.enableSHA256 && sha256sum.length !== 0) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(`sha256sum expected to be empty for anonymous or https requests`);\n        }\n        // sha256sum should be valid for non-anonymous http requests.\n        if (this.enableSHA256 && sha256sum.length !== 64) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(`Invalid sha256sum : ${sha256sum}`);\n        }\n        await this.checkAndRefreshCreds();\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        region = region || await this.getBucketRegionAsync(options.bucketName);\n        const reqOptions = this.getRequestOptions({\n            ...options,\n            region\n        });\n        if (!this.anonymous) {\n            // For non-anonymous https requests sha256sum is 'UNSIGNED-PAYLOAD' for signature calculation.\n            if (!this.enableSHA256) {\n                sha256sum = \"UNSIGNED-PAYLOAD\";\n            }\n            const date = new Date();\n            reqOptions.headers[\"x-amz-date\"] = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.makeDateLong)(date);\n            reqOptions.headers[\"x-amz-content-sha256\"] = sha256sum;\n            if (this.sessionToken) {\n                reqOptions.headers[\"x-amz-security-token\"] = this.sessionToken;\n            }\n            reqOptions.headers.authorization = (0,_signing_mjs__WEBPACK_IMPORTED_MODULE_9__.signV4)(reqOptions, this.accessKey, this.secretKey, region, date, sha256sum);\n        }\n        const response = await (0,_request_mjs__WEBPACK_IMPORTED_MODULE_12__.request)(this.transport, reqOptions, body);\n        if (!response.statusCode) {\n            throw new Error(\"BUG: response doesn't have a statusCode\");\n        }\n        if (!statusCodes.includes(response.statusCode)) {\n            // For an incorrect region, S3 server always sends back 400.\n            // But we will do cache invalidation for all errors so that,\n            // in future, if AWS S3 decides to send a different status code or\n            // XML error code we will still work fine.\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            delete this.regionMap[options.bucketName];\n            const err = await _xml_parser_mjs__WEBPACK_IMPORTED_MODULE_15__.parseResponseError(response);\n            this.logHTTP(reqOptions, response, err);\n            throw err;\n        }\n        this.logHTTP(reqOptions, response);\n        return response;\n    }\n    /**\n   * gets the region of the bucket\n   *\n   * @param bucketName\n   *\n   * @internal\n   */ async getBucketRegionAsync(bucketName) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidBucketNameError(`Invalid bucket name : ${bucketName}`);\n        }\n        // Region is set with constructor, return the region right here.\n        if (this.region) {\n            return this.region;\n        }\n        const cached = this.regionMap[bucketName];\n        if (cached) {\n            return cached;\n        }\n        const extractRegionAsync = async (response)=>{\n            const body = await (0,_response_mjs__WEBPACK_IMPORTED_MODULE_13__.readAsString)(response);\n            const region = _xml_parser_mjs__WEBPACK_IMPORTED_MODULE_15__.parseBucketRegion(body) || _helpers_mjs__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_REGION;\n            this.regionMap[bucketName] = region;\n            return region;\n        };\n        const method = \"GET\";\n        const query = \"location\";\n        // `getBucketLocation` behaves differently in following ways for\n        // different environments.\n        //\n        // - For nodejs env we default to path style requests.\n        // - For browser env path style requests on buckets yields CORS\n        //   error. To circumvent this problem we make a virtual host\n        //   style request signed with 'us-east-1'. This request fails\n        //   with an error 'AuthorizationHeaderMalformed', additionally\n        //   the error XML also provides Region of the bucket. To validate\n        //   this region is proper we retry the same request with the newly\n        //   obtained region.\n        const pathStyle = this.pathStyle && !browser_or_node__WEBPACK_IMPORTED_MODULE_2__.isBrowser;\n        let region;\n        try {\n            const res = await this.makeRequestAsync({\n                method,\n                bucketName,\n                query,\n                pathStyle\n            }, \"\", [\n                200\n            ], _helpers_mjs__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_REGION);\n            return extractRegionAsync(res);\n        } catch (e) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            if (!(e.name === \"AuthorizationHeaderMalformed\")) {\n                throw e;\n            }\n            // @ts-expect-error we set extra properties on error object\n            region = e.Region;\n            if (!region) {\n                throw e;\n            }\n        }\n        const res = await this.makeRequestAsync({\n            method,\n            bucketName,\n            query,\n            pathStyle\n        }, \"\", [\n            200\n        ], region);\n        return await extractRegionAsync(res);\n    }\n    /**\n   * makeRequest is the primitive used by the apis for making S3 requests.\n   * payload can be empty string in case of no payload.\n   * statusCode is the expected statusCode. If response.statusCode does not match\n   * we parse the XML error and call the callback with the error message.\n   * A valid region is passed by the calls - listBuckets, makeBucket and\n   * getBucketRegion.\n   *\n   * @deprecated use `makeRequestAsync` instead\n   */ makeRequest(options, payload = \"\", expectedCodes = [\n        200\n    ], region = \"\", returnResponse, cb) {\n        let prom;\n        if (returnResponse) {\n            prom = this.makeRequestAsync(options, payload, expectedCodes, region);\n        } else {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-expect-error compatible for old behaviour\n            prom = this.makeRequestAsyncOmit(options, payload, expectedCodes, region);\n        }\n        prom.then((result)=>cb(null, result), (err)=>{\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            cb(err);\n        });\n    }\n    /**\n   * makeRequestStream will be used directly instead of makeRequest in case the payload\n   * is available as a stream. for ex. putObject\n   *\n   * @deprecated use `makeRequestStreamAsync` instead\n   */ makeRequestStream(options, stream, sha256sum, statusCodes, region, returnResponse, cb) {\n        const executor = async ()=>{\n            const res = await this.makeRequestStreamAsync(options, stream, sha256sum, statusCodes, region);\n            if (!returnResponse) {\n                await (0,_response_mjs__WEBPACK_IMPORTED_MODULE_13__.drainResponse)(res);\n            }\n            return res;\n        };\n        executor().then((result)=>cb(null, result), // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        (err)=>cb(err));\n    }\n    /**\n   * @deprecated use `getBucketRegionAsync` instead\n   */ getBucketRegion(bucketName, cb) {\n        return this.getBucketRegionAsync(bucketName).then((result)=>cb(null, result), // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        (err)=>cb(err));\n    }\n    /**\n   * @deprecated use promise style API\n   */ async removeBucket(bucketName) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        const method = \"DELETE\";\n        await this.makeRequestAsyncOmit({\n            method,\n            bucketName\n        }, \"\", [\n            204\n        ]);\n        delete this.regionMap[bucketName];\n    }\n    /**\n   * Stat information of the object.\n   */ async statObject(bucketName, objectName, statOpts = {}) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isObject)(statOpts)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError('statOpts should be of type \"object\"');\n        }\n        const query = query_string__WEBPACK_IMPORTED_MODULE_4__.stringify(statOpts);\n        const method = \"HEAD\";\n        const res = await this.makeRequestAsyncOmit({\n            method,\n            bucketName,\n            objectName,\n            query\n        });\n        return {\n            size: parseInt(res.headers[\"content-length\"]),\n            metaData: (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.extractMetadata)(res.headers),\n            lastModified: new Date(res.headers[\"last-modified\"]),\n            versionId: (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.getVersionId)(res.headers),\n            etag: (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.sanitizeETag)(res.headers.etag)\n        };\n    }\n    /**\n   * Remove the specified object.\n   * @deprecated use new promise style API\n   */ /**\n   * @deprecated use new promise style API\n   */ // @ts-ignore\n    async removeObject(bucketName, objectName, removeOpts = {}) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isObject)(removeOpts)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError('removeOpts should be of type \"object\"');\n        }\n        const method = \"DELETE\";\n        const headers = {};\n        if (removeOpts.governanceBypass) {\n            headers[\"X-Amz-Bypass-Governance-Retention\"] = true;\n        }\n        if (removeOpts.forceDelete) {\n            headers[\"x-minio-force-delete\"] = true;\n        }\n        const queryParams = {};\n        if (removeOpts.versionId) {\n            queryParams.versionId = `${removeOpts.versionId}`;\n        }\n        const query = query_string__WEBPACK_IMPORTED_MODULE_4__.stringify(queryParams);\n        await this.makeRequestAsyncOmit({\n            method,\n            bucketName,\n            objectName,\n            headers,\n            query\n        }, \"\", [\n            200,\n            204\n        ]);\n    }\n    // Calls implemented below are related to multipart.\n    /**\n   * Initiate a new multipart upload.\n   * @internal\n   */ async initiateNewMultipartUpload(bucketName, objectName, headers) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isObject)(headers)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidObjectNameError('contentType should be of type \"object\"');\n        }\n        const method = \"POST\";\n        const query = \"uploads\";\n        const res = await this.makeRequestAsync({\n            method,\n            bucketName,\n            objectName,\n            query,\n            headers\n        });\n        const body = await (0,_response_mjs__WEBPACK_IMPORTED_MODULE_13__.readAsBuffer)(res);\n        return (0,_xml_parser_mjs__WEBPACK_IMPORTED_MODULE_15__.parseInitiateMultipart)(body.toString());\n    }\n    /**\n   * Internal Method to abort a multipart upload request in case of any errors.\n   *\n   * @param bucketName - Bucket Name\n   * @param objectName - Object Name\n   * @param uploadId - id of a multipart upload to cancel during compose object sequence.\n   */ async abortMultipartUpload(bucketName, objectName, uploadId) {\n        const method = \"DELETE\";\n        const query = `uploadId=${uploadId}`;\n        const requestOptions = {\n            method,\n            bucketName,\n            objectName: objectName,\n            query\n        };\n        await this.makeRequestAsyncOmit(requestOptions, \"\", [\n            204\n        ]);\n    }\n    /**\n   * Get part-info of all parts of an incomplete upload specified by uploadId.\n   */ async listParts(bucketName, objectName, uploadId) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isString)(uploadId)) {\n            throw new TypeError('uploadId should be of type \"string\"');\n        }\n        if (!uploadId) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(\"uploadId cannot be empty\");\n        }\n        const parts = [];\n        let marker = 0;\n        let result;\n        do {\n            result = await this.listPartsQuery(bucketName, objectName, uploadId, marker);\n            marker = result.marker;\n            parts.push(...result.parts);\n        }while (result.isTruncated);\n        return parts;\n    }\n    /**\n   * Called by listParts to fetch a batch of part-info\n   */ async listPartsQuery(bucketName, objectName, uploadId, marker) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isString)(uploadId)) {\n            throw new TypeError('uploadId should be of type \"string\"');\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isNumber)(marker)) {\n            throw new TypeError('marker should be of type \"number\"');\n        }\n        if (!uploadId) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(\"uploadId cannot be empty\");\n        }\n        let query = `uploadId=${(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.uriEscape)(uploadId)}`;\n        if (marker) {\n            query += `&part-number-marker=${marker}`;\n        }\n        const method = \"GET\";\n        const res = await this.makeRequestAsync({\n            method,\n            bucketName,\n            objectName,\n            query\n        });\n        return _xml_parser_mjs__WEBPACK_IMPORTED_MODULE_15__.parseListParts(await (0,_response_mjs__WEBPACK_IMPORTED_MODULE_13__.readAsString)(res));\n    }\n    async listBuckets() {\n        const method = \"GET\";\n        const httpRes = await this.makeRequestAsync({\n            method\n        }, \"\", [\n            200\n        ], _helpers_mjs__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_REGION);\n        const xmlResult = await (0,_response_mjs__WEBPACK_IMPORTED_MODULE_13__.readAsString)(httpRes);\n        return _xml_parser_mjs__WEBPACK_IMPORTED_MODULE_15__.parseListBucket(xmlResult);\n    }\n    async removeBucketReplication(bucketName) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        const method = \"DELETE\";\n        const query = \"replication\";\n        await this.makeRequestAsyncOmit({\n            method,\n            bucketName,\n            query\n        }, \"\", [\n            200,\n            204\n        ], \"\");\n    }\n    async setBucketReplication(bucketName, replicationConfig) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isObject)(replicationConfig)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError('replicationConfig should be of type \"object\"');\n        } else {\n            if (lodash__WEBPACK_IMPORTED_MODULE_3__.isEmpty(replicationConfig.role)) {\n                throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(\"Role cannot be empty\");\n            } else if (replicationConfig.role && !(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isString)(replicationConfig.role)) {\n                throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(\"Invalid value for role\", replicationConfig.role);\n            }\n            if (lodash__WEBPACK_IMPORTED_MODULE_3__.isEmpty(replicationConfig.rules)) {\n                throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidArgumentError(\"Minimum one replication rule must be specified\");\n            }\n        }\n        const method = \"PUT\";\n        const query = \"replication\";\n        const headers = {};\n        const replicationParamsConfig = {\n            ReplicationConfiguration: {\n                Role: replicationConfig.role,\n                Rule: replicationConfig.rules\n            }\n        };\n        const builder = new xml2js__WEBPACK_IMPORTED_MODULE_5__.Builder({\n            renderOpts: {\n                pretty: false\n            },\n            headless: true\n        });\n        const payload = builder.buildObject(replicationParamsConfig);\n        headers[\"Content-MD5\"] = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.toMd5)(payload);\n        await this.makeRequestAsyncOmit({\n            method,\n            bucketName,\n            query,\n            headers\n        }, payload);\n    }\n    async getBucketReplication(bucketName) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_11__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_7__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        const method = \"GET\";\n        const query = \"replication\";\n        const httpRes = await this.makeRequestAsync({\n            method,\n            bucketName,\n            query\n        }, \"\", [\n            200,\n            204\n        ]);\n        const xmlResult = await (0,_response_mjs__WEBPACK_IMPORTED_MODULE_13__.readAsString)(httpRes);\n        return _xml_parser_mjs__WEBPACK_IMPORTED_MODULE_15__.parseReplicationConfig(xmlResult);\n    }\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/internal/client.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/internal/copy-conditions.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/minio/dist/esm/internal/copy-conditions.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CopyConditions: () => (/* binding */ CopyConditions)\n/* harmony export */ });\nclass CopyConditions {\n    setModified(date) {\n        if (!(date instanceof Date)) {\n            throw new TypeError(\"date must be of type Date\");\n        }\n        this.modified = date.toUTCString();\n    }\n    setUnmodified(date) {\n        if (!(date instanceof Date)) {\n            throw new TypeError(\"date must be of type Date\");\n        }\n        this.unmodified = date.toUTCString();\n    }\n    setMatchETag(etag) {\n        this.matchETag = etag;\n    }\n    setMatchETagExcept(etag) {\n        this.matchETagExcept = etag;\n    }\n    constructor(){\n        this.modified = \"\";\n        this.unmodified = \"\";\n        this.matchETag = \"\";\n        this.matchETagExcept = \"\";\n    }\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb3B5Q29uZGl0aW9ucyIsIm1vZGlmaWVkIiwidW5tb2RpZmllZCIsIm1hdGNoRVRhZyIsIm1hdGNoRVRhZ0V4Y2VwdCIsInNldE1vZGlmaWVkIiwiZGF0ZSIsIkRhdGUiLCJUeXBlRXJyb3IiLCJ0b1VUQ1N0cmluZyIsInNldFVubW9kaWZpZWQiLCJzZXRNYXRjaEVUYWciLCJldGFnIiwic2V0TWF0Y2hFVGFnRXhjZXB0Il0sInNvdXJjZXMiOlsiY29weS1jb25kaXRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBDb3B5Q29uZGl0aW9ucyB7XG4gIHB1YmxpYyBtb2RpZmllZCA9ICcnXG4gIHB1YmxpYyB1bm1vZGlmaWVkID0gJydcbiAgcHVibGljIG1hdGNoRVRhZyA9ICcnXG4gIHB1YmxpYyBtYXRjaEVUYWdFeGNlcHQgPSAnJ1xuXG4gIHNldE1vZGlmaWVkKGRhdGU6IERhdGUpOiB2b2lkIHtcbiAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGUgbXVzdCBiZSBvZiB0eXBlIERhdGUnKVxuICAgIH1cblxuICAgIHRoaXMubW9kaWZpZWQgPSBkYXRlLnRvVVRDU3RyaW5nKClcbiAgfVxuXG4gIHNldFVubW9kaWZpZWQoZGF0ZTogRGF0ZSk6IHZvaWQge1xuICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0ZSBtdXN0IGJlIG9mIHR5cGUgRGF0ZScpXG4gICAgfVxuXG4gICAgdGhpcy51bm1vZGlmaWVkID0gZGF0ZS50b1VUQ1N0cmluZygpXG4gIH1cblxuICBzZXRNYXRjaEVUYWcoZXRhZzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5tYXRjaEVUYWcgPSBldGFnXG4gIH1cblxuICBzZXRNYXRjaEVUYWdFeGNlcHQoZXRhZzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5tYXRjaEVUYWdFeGNlcHQgPSBldGFnXG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNQSxjQUFjLENBQUM7RUFDbkJDLFFBQVEsR0FBRyxFQUFFO0VBQ2JDLFVBQVUsR0FBRyxFQUFFO0VBQ2ZDLFNBQVMsR0FBRyxFQUFFO0VBQ2RDLGVBQWUsR0FBRyxFQUFFO0VBRTNCQyxXQUFXQSxDQUFDQyxJQUFVLEVBQVE7SUFDNUIsSUFBSSxFQUFFQSxJQUFJLFlBQVlDLElBQUksQ0FBQyxFQUFFO01BQzNCLE1BQU0sSUFBSUMsU0FBUyxDQUFDLDJCQUEyQixDQUFDO0lBQ2xEO0lBRUEsSUFBSSxDQUFDUCxRQUFRLEdBQUdLLElBQUksQ0FBQ0csV0FBVyxDQUFDLENBQUM7RUFDcEM7RUFFQUMsYUFBYUEsQ0FBQ0osSUFBVSxFQUFRO0lBQzlCLElBQUksRUFBRUEsSUFBSSxZQUFZQyxJQUFJLENBQUMsRUFBRTtNQUMzQixNQUFNLElBQUlDLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQztJQUNsRDtJQUVBLElBQUksQ0FBQ04sVUFBVSxHQUFHSSxJQUFJLENBQUNHLFdBQVcsQ0FBQyxDQUFDO0VBQ3RDO0VBRUFFLFlBQVlBLENBQUNDLElBQVksRUFBUTtJQUMvQixJQUFJLENBQUNULFNBQVMsR0FBR1MsSUFBSTtFQUN2QjtFQUVBQyxrQkFBa0JBLENBQUNELElBQVksRUFBUTtJQUNyQyxJQUFJLENBQUNSLGVBQWUsR0FBR1EsSUFBSTtFQUM3QjtBQUNGIn0=\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWluaW8vZGlzdC9lc20vaW50ZXJuYWwvY29weS1jb25kaXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUE7SUFLWEMsWUFBWUMsSUFBSSxFQUFFO1FBQ2hCLElBQUksQ0FBRUEsQ0FBQUEsZ0JBQWdCQyxJQUFHLEdBQUk7WUFDM0IsTUFBTSxJQUFJQyxVQUFVO1FBQ3RCO1FBQ0EsSUFBSSxDQUFDQyxRQUFRLEdBQUdILEtBQUtJLFdBQVc7SUFDbEM7SUFDQUMsY0FBY0wsSUFBSSxFQUFFO1FBQ2xCLElBQUksQ0FBRUEsQ0FBQUEsZ0JBQWdCQyxJQUFHLEdBQUk7WUFDM0IsTUFBTSxJQUFJQyxVQUFVO1FBQ3RCO1FBQ0EsSUFBSSxDQUFDSSxVQUFVLEdBQUdOLEtBQUtJLFdBQVc7SUFDcEM7SUFDQUcsYUFBYUMsSUFBSSxFQUFFO1FBQ2pCLElBQUksQ0FBQ0MsU0FBUyxHQUFHRDtJQUNuQjtJQUNBRSxtQkFBbUJGLElBQUksRUFBRTtRQUN2QixJQUFJLENBQUNHLGVBQWUsR0FBR0g7SUFDekI7O2FBckJBTCxXQUFXO2FBQ1hHLGFBQWE7YUFDYkcsWUFBWTthQUNaRSxrQkFBa0I7O0FBbUJwQixFQUNBLDRrRUFBNGtFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmlsZS1tYW5hZ2VtZW50LXN5c3RlbS8uL25vZGVfbW9kdWxlcy9taW5pby9kaXN0L2VzbS9pbnRlcm5hbC9jb3B5LWNvbmRpdGlvbnMubWpzPzMxNGEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIENvcHlDb25kaXRpb25zIHtcbiAgbW9kaWZpZWQgPSAnJztcbiAgdW5tb2RpZmllZCA9ICcnO1xuICBtYXRjaEVUYWcgPSAnJztcbiAgbWF0Y2hFVGFnRXhjZXB0ID0gJyc7XG4gIHNldE1vZGlmaWVkKGRhdGUpIHtcbiAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGUgbXVzdCBiZSBvZiB0eXBlIERhdGUnKTtcbiAgICB9XG4gICAgdGhpcy5tb2RpZmllZCA9IGRhdGUudG9VVENTdHJpbmcoKTtcbiAgfVxuICBzZXRVbm1vZGlmaWVkKGRhdGUpIHtcbiAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGUgbXVzdCBiZSBvZiB0eXBlIERhdGUnKTtcbiAgICB9XG4gICAgdGhpcy51bm1vZGlmaWVkID0gZGF0ZS50b1VUQ1N0cmluZygpO1xuICB9XG4gIHNldE1hdGNoRVRhZyhldGFnKSB7XG4gICAgdGhpcy5tYXRjaEVUYWcgPSBldGFnO1xuICB9XG4gIHNldE1hdGNoRVRhZ0V4Y2VwdChldGFnKSB7XG4gICAgdGhpcy5tYXRjaEVUYWdFeGNlcHQgPSBldGFnO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SkRiM0I1UTI5dVpHbDBhVzl1Y3lJc0ltMXZaR2xtYVdWa0lpd2lkVzV0YjJScFptbGxaQ0lzSW0xaGRHTm9SVlJoWnlJc0ltMWhkR05vUlZSaFowVjRZMlZ3ZENJc0luTmxkRTF2WkdsbWFXVmtJaXdpWkdGMFpTSXNJa1JoZEdVaUxDSlVlWEJsUlhKeWIzSWlMQ0owYjFWVVExTjBjbWx1WnlJc0luTmxkRlZ1Ylc5a2FXWnBaV1FpTENKelpYUk5ZWFJqYUVWVVlXY2lMQ0psZEdGbklpd2ljMlYwVFdGMFkyaEZWR0ZuUlhoalpYQjBJbDBzSW5OdmRYSmpaWE1pT2xzaVkyOXdlUzFqYjI1a2FYUnBiMjV6TG5SeklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQmpiR0Z6Y3lCRGIzQjVRMjl1WkdsMGFXOXVjeUI3WEc0Z0lIQjFZbXhwWXlCdGIyUnBabWxsWkNBOUlDY25YRzRnSUhCMVlteHBZeUIxYm0xdlpHbG1hV1ZrSUQwZ0p5ZGNiaUFnY0hWaWJHbGpJRzFoZEdOb1JWUmhaeUE5SUNjblhHNGdJSEIxWW14cFl5QnRZWFJqYUVWVVlXZEZlR05sY0hRZ1BTQW5KMXh1WEc0Z0lITmxkRTF2WkdsbWFXVmtLR1JoZEdVNklFUmhkR1VwT2lCMmIybGtJSHRjYmlBZ0lDQnBaaUFvSVNoa1lYUmxJR2x1YzNSaGJtTmxiMllnUkdGMFpTa3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjJSaGRHVWdiWFZ6ZENCaVpTQnZaaUIwZVhCbElFUmhkR1VuS1Z4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdWJXOWthV1pwWldRZ1BTQmtZWFJsTG5SdlZWUkRVM1J5YVc1bktDbGNiaUFnZlZ4dVhHNGdJSE5sZEZWdWJXOWthV1pwWldRb1pHRjBaVG9nUkdGMFpTazZJSFp2YVdRZ2UxeHVJQ0FnSUdsbUlDZ2hLR1JoZEdVZ2FXNXpkR0Z1WTJWdlppQkVZWFJsS1NrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25aR0YwWlNCdGRYTjBJR0psSUc5bUlIUjVjR1VnUkdGMFpTY3BYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTUxYm0xdlpHbG1hV1ZrSUQwZ1pHRjBaUzUwYjFWVVExTjBjbWx1WnlncFhHNGdJSDFjYmx4dUlDQnpaWFJOWVhSamFFVlVZV2NvWlhSaFp6b2djM1J5YVc1bktUb2dkbTlwWkNCN1hHNGdJQ0FnZEdocGN5NXRZWFJqYUVWVVlXY2dQU0JsZEdGblhHNGdJSDFjYmx4dUlDQnpaWFJOWVhSamFFVlVZV2RGZUdObGNIUW9aWFJoWnpvZ2MzUnlhVzVuS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdkR2hwY3k1dFlYUmphRVZVWVdkRmVHTmxjSFFnUFNCbGRHRm5YRzRnSUgxY2JuMWNiaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVDBGQlR5eE5RVUZOUVN4alFVRmpMRU5CUVVNN1JVRkRia0pETEZGQlFWRXNSMEZCUnl4RlFVRkZPMFZCUTJKRExGVkJRVlVzUjBGQlJ5eEZRVUZGTzBWQlEyWkRMRk5CUVZNc1IwRkJSeXhGUVVGRk8wVkJRMlJETEdWQlFXVXNSMEZCUnl4RlFVRkZPMFZCUlROQ1F5eFhRVUZYUVN4RFFVRkRReXhKUVVGVkxFVkJRVkU3U1VGRE5VSXNTVUZCU1N4RlFVRkZRU3hKUVVGSkxGbEJRVmxETEVsQlFVa3NRMEZCUXl4RlFVRkZPMDFCUXpOQ0xFMUJRVTBzU1VGQlNVTXNVMEZCVXl4RFFVRkRMREpDUVVFeVFpeERRVUZETzBsQlEyeEVPMGxCUlVFc1NVRkJTU3hEUVVGRFVDeFJRVUZSTEVkQlFVZExMRWxCUVVrc1EwRkJRMGNzVjBGQlZ5eERRVUZETEVOQlFVTTdSVUZEY0VNN1JVRkZRVU1zWVVGQllVRXNRMEZCUTBvc1NVRkJWU3hGUVVGUk8wbEJRemxDTEVsQlFVa3NSVUZCUlVFc1NVRkJTU3haUVVGWlF5eEpRVUZKTEVOQlFVTXNSVUZCUlR0TlFVTXpRaXhOUVVGTkxFbEJRVWxETEZOQlFWTXNRMEZCUXl3eVFrRkJNa0lzUTBGQlF6dEpRVU5zUkR0SlFVVkJMRWxCUVVrc1EwRkJRMDRzVlVGQlZTeEhRVUZIU1N4SlFVRkpMRU5CUVVOSExGZEJRVmNzUTBGQlF5eERRVUZETzBWQlEzUkRPMFZCUlVGRkxGbEJRVmxCTEVOQlFVTkRMRWxCUVZrc1JVRkJVVHRKUVVNdlFpeEpRVUZKTEVOQlFVTlVMRk5CUVZNc1IwRkJSMU1zU1VGQlNUdEZRVU4yUWp0RlFVVkJReXhyUWtGQmEwSkJMRU5CUVVORUxFbEJRVmtzUlVGQlVUdEpRVU55UXl4SlFVRkpMRU5CUVVOU0xHVkJRV1VzUjBGQlIxRXNTVUZCU1R0RlFVTTNRanRCUVVOR0luMD0iXSwibmFtZXMiOlsiQ29weUNvbmRpdGlvbnMiLCJzZXRNb2RpZmllZCIsImRhdGUiLCJEYXRlIiwiVHlwZUVycm9yIiwibW9kaWZpZWQiLCJ0b1VUQ1N0cmluZyIsInNldFVubW9kaWZpZWQiLCJ1bm1vZGlmaWVkIiwic2V0TWF0Y2hFVGFnIiwiZXRhZyIsIm1hdGNoRVRhZyIsInNldE1hdGNoRVRhZ0V4Y2VwdCIsIm1hdGNoRVRhZ0V4Y2VwdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/internal/copy-conditions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/internal/extensions.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/minio/dist/esm/internal/extensions.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Extensions: () => (/* binding */ Extensions)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors.mjs */ \"(rsc)/./node_modules/minio/dist/esm/errors.mjs\");\n/* harmony import */ var _helper_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helper.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\");\n/* harmony import */ var _response_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./response.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/response.mjs\");\n/* harmony import */ var _xml_parser_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./xml-parser.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/xml-parser.mjs\");\n/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \n\n\n\n\nclass Extensions {\n    constructor(client){\n        this.client = client;\n    }\n    /**\n   * List the objects in the bucket using S3 ListObjects V2 With Metadata\n   *\n   * @param bucketName - name of the bucket\n   * @param prefix - the prefix of the objects that should be listed (optional, default `''`)\n   * @param recursive - `true` indicates recursive style listing and `false` indicates directory style listing delimited by '/'. (optional, default `false`)\n   * @param startAfter - Specifies the key to start after when listing objects in a bucket. (optional, default `''`)\n   * @returns stream emitting the objects in the bucket, the object is of the format:\n   */ listObjectsV2WithMetadata(bucketName, prefix, recursive, startAfter) {\n        if (prefix === undefined) {\n            prefix = \"\";\n        }\n        if (recursive === undefined) {\n            recursive = false;\n        }\n        if (startAfter === undefined) {\n            startAfter = \"\";\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isValidPrefix)(prefix)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.InvalidPrefixError(`Invalid prefix : ${prefix}`);\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(prefix)) {\n            throw new TypeError('prefix should be of type \"string\"');\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isBoolean)(recursive)) {\n            throw new TypeError('recursive should be of type \"boolean\"');\n        }\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(startAfter)) {\n            throw new TypeError('startAfter should be of type \"string\"');\n        }\n        // if recursive is false set delimiter to '/'\n        const delimiter = recursive ? \"\" : \"/\";\n        return stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(this.listObjectsV2WithMetadataGen(bucketName, prefix, delimiter, startAfter), {\n            objectMode: true\n        });\n    }\n    async *listObjectsV2WithMetadataGen(bucketName, prefix, delimiter, startAfter) {\n        let ended = false;\n        let continuationToken = \"\";\n        do {\n            const result = await this.listObjectsV2WithMetadataQuery(bucketName, prefix, continuationToken, delimiter, startAfter);\n            ended = !result.isTruncated;\n            continuationToken = result.nextContinuationToken;\n            for (const obj of result.objects){\n                yield obj;\n            }\n        }while (!ended);\n    }\n    async listObjectsV2WithMetadataQuery(bucketName, prefix, continuationToken, delimiter, startAfter) {\n        const queries = [];\n        // Call for listing objects v2 API\n        queries.push(`list-type=2`);\n        queries.push(`encoding-type=url`);\n        // escape every value in query string, except maxKeys\n        queries.push(`prefix=${(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.uriEscape)(prefix)}`);\n        queries.push(`delimiter=${(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.uriEscape)(delimiter)}`);\n        queries.push(`metadata=true`);\n        if (continuationToken) {\n            continuationToken = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.uriEscape)(continuationToken);\n            queries.push(`continuation-token=${continuationToken}`);\n        }\n        // Set start-after\n        if (startAfter) {\n            startAfter = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.uriEscape)(startAfter);\n            queries.push(`start-after=${startAfter}`);\n        }\n        queries.push(`max-keys=1000`);\n        queries.sort();\n        let query = \"\";\n        if (queries.length > 0) {\n            query = `${queries.join(\"&\")}`;\n        }\n        const method = \"GET\";\n        const res = await this.client.makeRequestAsync({\n            method,\n            bucketName,\n            query\n        });\n        return (0,_xml_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.parseListObjectsV2WithMetadata)(await (0,_response_mjs__WEBPACK_IMPORTED_MODULE_3__.readAsString)(res));\n    }\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/internal/extensions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/minio/dist/esm/internal/helper.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PART_CONSTRAINTS: () => (/* binding */ PART_CONSTRAINTS),\n/* harmony export */   calculateEvenSplits: () => (/* binding */ calculateEvenSplits),\n/* harmony export */   extractMetadata: () => (/* binding */ extractMetadata),\n/* harmony export */   getEncryptionHeaders: () => (/* binding */ getEncryptionHeaders),\n/* harmony export */   getScope: () => (/* binding */ getScope),\n/* harmony export */   getSourceVersionId: () => (/* binding */ getSourceVersionId),\n/* harmony export */   getVersionId: () => (/* binding */ getVersionId),\n/* harmony export */   insertContentType: () => (/* binding */ insertContentType),\n/* harmony export */   isAmazonEndpoint: () => (/* binding */ isAmazonEndpoint),\n/* harmony export */   isAmzHeader: () => (/* binding */ isAmzHeader),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isEmpty: () => (/* binding */ isEmpty),\n/* harmony export */   isEmptyObject: () => (/* binding */ isEmptyObject),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isReadableStream: () => (/* binding */ isReadableStream),\n/* harmony export */   isStorageClassHeader: () => (/* binding */ isStorageClassHeader),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSupportedHeader: () => (/* binding */ isSupportedHeader),\n/* harmony export */   isValidBucketName: () => (/* binding */ isValidBucketName),\n/* harmony export */   isValidDate: () => (/* binding */ isValidDate),\n/* harmony export */   isValidDomain: () => (/* binding */ isValidDomain),\n/* harmony export */   isValidEndpoint: () => (/* binding */ isValidEndpoint),\n/* harmony export */   isValidIP: () => (/* binding */ isValidIP),\n/* harmony export */   isValidObjectName: () => (/* binding */ isValidObjectName),\n/* harmony export */   isValidPort: () => (/* binding */ isValidPort),\n/* harmony export */   isValidPrefix: () => (/* binding */ isValidPrefix),\n/* harmony export */   isVirtualHostStyle: () => (/* binding */ isVirtualHostStyle),\n/* harmony export */   makeDateLong: () => (/* binding */ makeDateLong),\n/* harmony export */   makeDateShort: () => (/* binding */ makeDateShort),\n/* harmony export */   parseXml: () => (/* binding */ parseXml),\n/* harmony export */   partsRequired: () => (/* binding */ partsRequired),\n/* harmony export */   pipesetup: () => (/* binding */ pipesetup),\n/* harmony export */   prependXAMZMeta: () => (/* binding */ prependXAMZMeta),\n/* harmony export */   probeContentType: () => (/* binding */ probeContentType),\n/* harmony export */   readableStream: () => (/* binding */ readableStream),\n/* harmony export */   sanitizeETag: () => (/* binding */ sanitizeETag),\n/* harmony export */   sanitizeObjectKey: () => (/* binding */ sanitizeObjectKey),\n/* harmony export */   sanitizeSize: () => (/* binding */ sanitizeSize),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   toMd5: () => (/* binding */ toMd5),\n/* harmony export */   toSha256: () => (/* binding */ toSha256),\n/* harmony export */   uriEscape: () => (/* binding */ uriEscape),\n/* harmony export */   uriResourceEscape: () => (/* binding */ uriResourceEscape)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-xml-parser */ \"(rsc)/./node_modules/fast-xml-parser/src/fxp.js\");\n/* harmony import */ var ipaddr_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ipaddr.js */ \"(rsc)/./node_modules/ipaddr.js/lib/ipaddr.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash */ \"lodash\");\n/* harmony import */ var mime_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! mime-types */ \"(rsc)/./node_modules/mime-types/index.js\");\n/* harmony import */ var _type_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./type.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/type.mjs\");\n/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \n\n\n\n\n\n\nconst MetaDataHeaderPrefix = \"x-amz-meta-\";\n/**\n * All characters in string which are NOT unreserved should be percent encoded.\n * Unreserved characters are : ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n * Reference https://tools.ietf.org/html/rfc3986#section-2.2\n */ function uriEscape(string) {\n    return string.split(\"\").reduce((acc, elem)=>{\n        const buf = Buffer.from(elem);\n        if (buf.length === 1) {\n            // length 1 indicates that elem is not a unicode character.\n            // Check if it is an unreserved characer.\n            if (\"A\" <= elem && elem <= \"Z\" || \"a\" <= elem && elem <= \"z\" || \"0\" <= elem && elem <= \"9\" || elem === \"_\" || elem === \".\" || elem === \"~\" || elem === \"-\") {\n                // Unreserved characer should not be encoded.\n                acc = acc + elem;\n                return acc;\n            }\n        }\n        // elem needs encoding - i.e elem should be encoded if it's not unreserved\n        // character or if it's a unicode character.\n        for (const char of buf){\n            acc = acc + \"%\" + char.toString(16).toUpperCase();\n        }\n        return acc;\n    }, \"\");\n}\nfunction uriResourceEscape(string) {\n    return uriEscape(string).replace(/%2F/g, \"/\");\n}\nfunction getScope(region, date, serviceName = \"s3\") {\n    return `${makeDateShort(date)}/${region}/${serviceName}/aws4_request`;\n}\n/**\n * isAmazonEndpoint - true if endpoint is 's3.amazonaws.com' or 's3.cn-north-1.amazonaws.com.cn'\n */ function isAmazonEndpoint(endpoint) {\n    return endpoint === \"s3.amazonaws.com\" || endpoint === \"s3.cn-north-1.amazonaws.com.cn\";\n}\n/**\n * isVirtualHostStyle - verify if bucket name is support with virtual\n * hosts. bucketNames with periods should be always treated as path\n * style if the protocol is 'https:', this is due to SSL wildcard\n * limitation. For all other buckets and Amazon S3 endpoint we will\n * default to virtual host style.\n */ function isVirtualHostStyle(endpoint, protocol, bucket, pathStyle) {\n    if (protocol === \"https:\" && bucket.includes(\".\")) {\n        return false;\n    }\n    return isAmazonEndpoint(endpoint) || !pathStyle;\n}\nfunction isValidIP(ip) {\n    return ipaddr_js__WEBPACK_IMPORTED_MODULE_3__.isValid(ip);\n}\n/**\n * @returns if endpoint is valid domain.\n */ function isValidEndpoint(endpoint) {\n    return isValidDomain(endpoint) || isValidIP(endpoint);\n}\n/**\n * @returns if input host is a valid domain.\n */ function isValidDomain(host) {\n    if (!isString(host)) {\n        return false;\n    }\n    // See RFC 1035, RFC 3696.\n    if (host.length === 0 || host.length > 255) {\n        return false;\n    }\n    // Host cannot start or end with a '-'\n    if (host[0] === \"-\" || host.slice(-1) === \"-\") {\n        return false;\n    }\n    // Host cannot start or end with a '_'\n    if (host[0] === \"_\" || host.slice(-1) === \"_\") {\n        return false;\n    }\n    // Host cannot start with a '.'\n    if (host[0] === \".\") {\n        return false;\n    }\n    const alphaNumerics = \"`~!@#$%^&*()+={}[]|\\\\\\\"';:><?/\";\n    // All non alphanumeric characters are invalid.\n    for (const char of alphaNumerics){\n        if (host.includes(char)) {\n            return false;\n        }\n    }\n    // No need to regexp match, since the list is non-exhaustive.\n    // We let it be valid and fail later.\n    return true;\n}\n/**\n * Probes contentType using file extensions.\n *\n * @example\n * ```\n * // return 'image/png'\n * probeContentType('file.png')\n * ```\n */ function probeContentType(path) {\n    let contentType = mime_types__WEBPACK_IMPORTED_MODULE_5__.lookup(path);\n    if (!contentType) {\n        contentType = \"application/octet-stream\";\n    }\n    return contentType;\n}\n/**\n * is input port valid.\n */ function isValidPort(port) {\n    // verify if port is a number.\n    if (!isNumber(port)) {\n        return false;\n    }\n    // port `0` is valid and special case\n    return 0 <= port && port <= 65535;\n}\nfunction isValidBucketName(bucket) {\n    if (!isString(bucket)) {\n        return false;\n    }\n    // bucket length should be less than and no more than 63\n    // characters long.\n    if (bucket.length < 3 || bucket.length > 63) {\n        return false;\n    }\n    // bucket with successive periods is invalid.\n    if (bucket.includes(\"..\")) {\n        return false;\n    }\n    // bucket cannot have ip address style.\n    if (/[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/.test(bucket)) {\n        return false;\n    }\n    // bucket should begin with alphabet/number and end with alphabet/number,\n    // with alphabet/number/.- in the middle.\n    if (/^[a-z0-9][a-z0-9.-]+[a-z0-9]$/.test(bucket)) {\n        return true;\n    }\n    return false;\n}\n/**\n * check if objectName is a valid object name\n */ function isValidObjectName(objectName) {\n    if (!isValidPrefix(objectName)) {\n        return false;\n    }\n    return objectName.length !== 0;\n}\n/**\n * check if prefix is valid\n */ function isValidPrefix(prefix) {\n    if (!isString(prefix)) {\n        return false;\n    }\n    if (prefix.length > 1024) {\n        return false;\n    }\n    return true;\n}\n/**\n * check if typeof arg number\n */ function isNumber(arg) {\n    return typeof arg === \"number\";\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n/**\n * check if typeof arg function\n */ function isFunction(arg) {\n    return typeof arg === \"function\";\n}\n/**\n * check if typeof arg string\n */ function isString(arg) {\n    return typeof arg === \"string\";\n}\n/**\n * check if typeof arg object\n */ function isObject(arg) {\n    return typeof arg === \"object\" && arg !== null;\n}\n/**\n * check if object is readable stream\n */ function isReadableStream(arg) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    return isObject(arg) && isFunction(arg._read);\n}\n/**\n * check if arg is boolean\n */ function isBoolean(arg) {\n    return typeof arg === \"boolean\";\n}\nfunction isEmpty(o) {\n    return lodash__WEBPACK_IMPORTED_MODULE_4__.isEmpty(o);\n}\nfunction isEmptyObject(o) {\n    return Object.values(o).filter((x)=>x !== undefined).length !== 0;\n}\nfunction isDefined(o) {\n    return o !== null && o !== undefined;\n}\n/**\n * check if arg is a valid date\n */ function isValidDate(arg) {\n    // @ts-expect-error checknew Date(Math.NaN)\n    return arg instanceof Date && !isNaN(arg);\n}\n/**\n * Create a Date string with format: 'YYYYMMDDTHHmmss' + Z\n */ function makeDateLong(date) {\n    date = date || new Date();\n    // Gives format like: '2017-08-07T16:28:59.889Z'\n    const s = date.toISOString();\n    return s.slice(0, 4) + s.slice(5, 7) + s.slice(8, 13) + s.slice(14, 16) + s.slice(17, 19) + \"Z\";\n}\n/**\n * Create a Date string with format: 'YYYYMMDD'\n */ function makeDateShort(date) {\n    date = date || new Date();\n    // Gives format like: '2017-08-07T16:28:59.889Z'\n    const s = date.toISOString();\n    return s.slice(0, 4) + s.slice(5, 7) + s.slice(8, 10);\n}\n/**\n * pipesetup sets up pipe() from left to right os streams array\n * pipesetup will also make sure that error emitted at any of the upstream Stream\n * will be emitted at the last stream. This makes error handling simple\n */ function pipesetup(...streams) {\n    // @ts-expect-error ts can't narrow this\n    return streams.reduce((src, dst)=>{\n        src.on(\"error\", (err)=>dst.emit(\"error\", err));\n        return src.pipe(dst);\n    });\n}\n/**\n * return a Readable stream that emits data\n */ function readableStream(data) {\n    const s = new stream__WEBPACK_IMPORTED_MODULE_1__.Readable();\n    s._read = ()=>{};\n    s.push(data);\n    s.push(null);\n    return s;\n}\n/**\n * Process metadata to insert appropriate value to `content-type` attribute\n */ function insertContentType(metaData, filePath) {\n    // check if content-type attribute present in metaData\n    for(const key in metaData){\n        if (key.toLowerCase() === \"content-type\") {\n            return metaData;\n        }\n    }\n    // if `content-type` attribute is not present in metadata, then infer it from the extension in filePath\n    return {\n        ...metaData,\n        \"content-type\": probeContentType(filePath)\n    };\n}\n/**\n * Function prepends metadata with the appropriate prefix if it is not already on\n */ function prependXAMZMeta(metaData) {\n    if (!metaData) {\n        return {};\n    }\n    return lodash__WEBPACK_IMPORTED_MODULE_4__.mapKeys(metaData, (value, key)=>{\n        if (isAmzHeader(key) || isSupportedHeader(key) || isStorageClassHeader(key)) {\n            return key;\n        }\n        return MetaDataHeaderPrefix + key;\n    });\n}\n/**\n * Checks if it is a valid header according to the AmazonS3 API\n */ function isAmzHeader(key) {\n    const temp = key.toLowerCase();\n    return temp.startsWith(MetaDataHeaderPrefix) || temp === \"x-amz-acl\" || temp.startsWith(\"x-amz-server-side-encryption-\") || temp === \"x-amz-server-side-encryption\";\n}\n/**\n * Checks if it is a supported Header\n */ function isSupportedHeader(key) {\n    const supported_headers = [\n        \"content-type\",\n        \"cache-control\",\n        \"content-encoding\",\n        \"content-disposition\",\n        \"content-language\",\n        \"x-amz-website-redirect-location\"\n    ];\n    return supported_headers.includes(key.toLowerCase());\n}\n/**\n * Checks if it is a storage header\n */ function isStorageClassHeader(key) {\n    return key.toLowerCase() === \"x-amz-storage-class\";\n}\nfunction extractMetadata(headers) {\n    return lodash__WEBPACK_IMPORTED_MODULE_4__.mapKeys(lodash__WEBPACK_IMPORTED_MODULE_4__.pickBy(headers, (value, key)=>isSupportedHeader(key) || isStorageClassHeader(key) || isAmzHeader(key)), (value, key)=>{\n        const lower = key.toLowerCase();\n        if (lower.startsWith(MetaDataHeaderPrefix)) {\n            return lower.slice(MetaDataHeaderPrefix.length);\n        }\n        return key;\n    });\n}\nfunction getVersionId(headers = {}) {\n    return headers[\"x-amz-version-id\"] || null;\n}\nfunction getSourceVersionId(headers = {}) {\n    return headers[\"x-amz-copy-source-version-id\"] || null;\n}\nfunction sanitizeETag(etag = \"\") {\n    const replaceChars = {\n        '\"': \"\",\n        \"&quot;\": \"\",\n        \"&#34;\": \"\",\n        \"&QUOT;\": \"\",\n        \"&#x00022\": \"\"\n    };\n    return etag.replace(/^(\"|&quot;|&#34;)|(\"|&quot;|&#34;)$/g, (m)=>replaceChars[m]);\n}\nfunction toMd5(payload) {\n    // use string from browser and buffer from nodejs\n    // browser support is tested only against minio server\n    return crypto__WEBPACK_IMPORTED_MODULE_0__.createHash(\"md5\").update(Buffer.from(payload)).digest().toString(\"base64\");\n}\nfunction toSha256(payload) {\n    return crypto__WEBPACK_IMPORTED_MODULE_0__.createHash(\"sha256\").update(payload).digest(\"hex\");\n}\n/**\n * toArray returns a single element array with param being the element,\n * if param is just a string, and returns 'param' back if it is an array\n * So, it makes sure param is always an array\n */ function toArray(param) {\n    if (!Array.isArray(param)) {\n        return [\n            param\n        ];\n    }\n    return param;\n}\nfunction sanitizeObjectKey(objectName) {\n    // + symbol characters are not decoded as spaces in JS. so replace them first and decode to get the correct result.\n    const asStrName = (objectName ? objectName.toString() : \"\").replace(/\\+/g, \" \");\n    return decodeURIComponent(asStrName);\n}\nfunction sanitizeSize(size) {\n    return size ? Number.parseInt(size) : undefined;\n}\nconst PART_CONSTRAINTS = {\n    // absMinPartSize - absolute minimum part size (5 MiB)\n    ABS_MIN_PART_SIZE: 1024 * 1024 * 5,\n    // MIN_PART_SIZE - minimum part size 16MiB per object after which\n    MIN_PART_SIZE: 1024 * 1024 * 16,\n    // MAX_PARTS_COUNT - maximum number of parts for a single multipart session.\n    MAX_PARTS_COUNT: 10000,\n    // MAX_PART_SIZE - maximum part size 5GiB for a single multipart upload\n    // operation.\n    MAX_PART_SIZE: 1024 * 1024 * 1024 * 5,\n    // MAX_SINGLE_PUT_OBJECT_SIZE - maximum size 5GiB of object per PUT\n    // operation.\n    MAX_SINGLE_PUT_OBJECT_SIZE: 1024 * 1024 * 1024 * 5,\n    // MAX_MULTIPART_PUT_OBJECT_SIZE - maximum size 5TiB of object for\n    // Multipart operation.\n    MAX_MULTIPART_PUT_OBJECT_SIZE: 1024 * 1024 * 1024 * 1024 * 5\n};\nconst GENERIC_SSE_HEADER = \"X-Amz-Server-Side-Encryption\";\nconst ENCRYPTION_HEADERS = {\n    // sseGenericHeader is the AWS SSE header used for SSE-S3 and SSE-KMS.\n    sseGenericHeader: GENERIC_SSE_HEADER,\n    // sseKmsKeyID is the AWS SSE-KMS key id.\n    sseKmsKeyID: GENERIC_SSE_HEADER + \"-Aws-Kms-Key-Id\"\n};\n/**\n * Return Encryption headers\n * @param encConfig\n * @returns an object with key value pairs that can be used in headers.\n */ function getEncryptionHeaders(encConfig) {\n    const encType = encConfig.type;\n    if (!isEmpty(encType)) {\n        if (encType === _type_mjs__WEBPACK_IMPORTED_MODULE_6__.ENCRYPTION_TYPES.SSEC) {\n            return {\n                [ENCRYPTION_HEADERS.sseGenericHeader]: \"AES256\"\n            };\n        } else if (encType === _type_mjs__WEBPACK_IMPORTED_MODULE_6__.ENCRYPTION_TYPES.KMS) {\n            return {\n                [ENCRYPTION_HEADERS.sseGenericHeader]: encConfig.SSEAlgorithm,\n                [ENCRYPTION_HEADERS.sseKmsKeyID]: encConfig.KMSMasterKeyID\n            };\n        }\n    }\n    return {};\n}\nfunction partsRequired(size) {\n    const maxPartSize = PART_CONSTRAINTS.MAX_MULTIPART_PUT_OBJECT_SIZE / (PART_CONSTRAINTS.MAX_PARTS_COUNT - 1);\n    let requiredPartSize = size / maxPartSize;\n    if (size % maxPartSize > 0) {\n        requiredPartSize++;\n    }\n    requiredPartSize = Math.trunc(requiredPartSize);\n    return requiredPartSize;\n}\n/**\n * calculateEvenSplits - computes splits for a source and returns\n * start and end index slices. Splits happen evenly to be sure that no\n * part is less than 5MiB, as that could fail the multipart request if\n * it is not the last part.\n */ function calculateEvenSplits(size, objInfo) {\n    if (size === 0) {\n        return null;\n    }\n    const reqParts = partsRequired(size);\n    const startIndexParts = [];\n    const endIndexParts = [];\n    let start = objInfo.Start;\n    if (isEmpty(start) || start === -1) {\n        start = 0;\n    }\n    const divisorValue = Math.trunc(size / reqParts);\n    const reminderValue = size % reqParts;\n    let nextStart = start;\n    for(let i = 0; i < reqParts; i++){\n        let curPartSize = divisorValue;\n        if (i < reminderValue) {\n            curPartSize++;\n        }\n        const currentStart = nextStart;\n        const currentEnd = currentStart + curPartSize - 1;\n        nextStart = currentEnd + 1;\n        startIndexParts.push(currentStart);\n        endIndexParts.push(currentEnd);\n    }\n    return {\n        startIndex: startIndexParts,\n        endIndex: endIndexParts,\n        objInfo: objInfo\n    };\n}\nconst fxp = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_2__.XMLParser();\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction parseXml(xml) {\n    const result = fxp.parse(xml);\n    if (result.Error) {\n        throw result.Error;\n    }\n    return result;\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/internal/post-policy.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/minio/dist/esm/internal/post-policy.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostPolicy: () => (/* binding */ PostPolicy)\n/* harmony export */ });\n/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.mjs */ \"(rsc)/./node_modules/minio/dist/esm/errors.mjs\");\n/* harmony import */ var _helper_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helper.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\");\n// Build PostPolicy object that can be signed by presignedPostPolicy\n\n\nclass PostPolicy {\n    // set expiration date\n    setExpires(date) {\n        if (!date) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_0__.InvalidDateError(\"Invalid date: cannot be null\");\n        }\n        this.policy.expiration = date.toISOString();\n    }\n    // set object name\n    setKey(objectName) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_1__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_0__.InvalidObjectNameError(`Invalid object name : ${objectName}`);\n        }\n        this.policy.conditions.push([\n            \"eq\",\n            \"$key\",\n            objectName\n        ]);\n        this.formData.key = objectName;\n    }\n    // set object name prefix, i.e policy allows any keys with this prefix\n    setKeyStartsWith(prefix) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_1__.isValidPrefix)(prefix)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_0__.InvalidPrefixError(`Invalid prefix : ${prefix}`);\n        }\n        this.policy.conditions.push([\n            \"starts-with\",\n            \"$key\",\n            prefix\n        ]);\n        this.formData.key = prefix;\n    }\n    // set bucket name\n    setBucket(bucketName) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_1__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_0__.InvalidBucketNameError(`Invalid bucket name : ${bucketName}`);\n        }\n        this.policy.conditions.push([\n            \"eq\",\n            \"$bucket\",\n            bucketName\n        ]);\n        this.formData.bucket = bucketName;\n    }\n    // set Content-Type\n    setContentType(type) {\n        if (!type) {\n            throw new Error(\"content-type cannot be null\");\n        }\n        this.policy.conditions.push([\n            \"eq\",\n            \"$Content-Type\",\n            type\n        ]);\n        this.formData[\"Content-Type\"] = type;\n    }\n    // set Content-Type prefix, i.e image/ allows any image\n    setContentTypeStartsWith(prefix) {\n        if (!prefix) {\n            throw new Error(\"content-type cannot be null\");\n        }\n        this.policy.conditions.push([\n            \"starts-with\",\n            \"$Content-Type\",\n            prefix\n        ]);\n        this.formData[\"Content-Type\"] = prefix;\n    }\n    // set Content-Disposition\n    setContentDisposition(value) {\n        if (!value) {\n            throw new Error(\"content-disposition cannot be null\");\n        }\n        this.policy.conditions.push([\n            \"eq\",\n            \"$Content-Disposition\",\n            value\n        ]);\n        this.formData[\"Content-Disposition\"] = value;\n    }\n    // set minimum/maximum length of what Content-Length can be.\n    setContentLengthRange(min, max) {\n        if (min > max) {\n            throw new Error(\"min cannot be more than max\");\n        }\n        if (min < 0) {\n            throw new Error(\"min should be > 0\");\n        }\n        if (max < 0) {\n            throw new Error(\"max should be > 0\");\n        }\n        this.policy.conditions.push([\n            \"content-length-range\",\n            min,\n            max\n        ]);\n    }\n    // set user defined metadata\n    setUserMetaData(metaData) {\n        if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(metaData)) {\n            throw new TypeError('metadata should be of type \"object\"');\n        }\n        Object.entries(metaData).forEach(([key, value])=>{\n            const amzMetaDataKey = `x-amz-meta-${key}`;\n            this.policy.conditions.push([\n                \"eq\",\n                `$${amzMetaDataKey}`,\n                value\n            ]);\n            this.formData[amzMetaDataKey] = value.toString();\n        });\n    }\n    constructor(){\n        this.policy = {\n            conditions: []\n        };\n        this.formData = {};\n    }\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/internal/post-policy.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/internal/request.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/minio/dist/esm/internal/request.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   request: () => (/* binding */ request)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n\nasync function request(transport, opt, body = null) {\n    return new Promise((resolve, reject)=>{\n        const requestObj = transport.request(opt, (resp)=>{\n            resolve(resp);\n        });\n        if (!body || Buffer.isBuffer(body) || typeof body === \"string\") {\n            requestObj.on(\"error\", (e)=>{\n                reject(e);\n            }).end(body);\n            return;\n        }\n        // pump readable stream\n        (0,stream__WEBPACK_IMPORTED_MODULE_0__.pipeline)(body, requestObj, (err)=>{\n            if (err) {\n                reject(err);\n            }\n        });\n    });\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaXBlbGluZSIsInJlcXVlc3QiLCJ0cmFuc3BvcnQiLCJvcHQiLCJib2R5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0T2JqIiwicmVzcCIsIkJ1ZmZlciIsImlzQnVmZmVyIiwib24iLCJlIiwiZW5kIiwiZXJyIl0sInNvdXJjZXMiOlsicmVxdWVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSAqIGFzIGh0dHAgZnJvbSAnbm9kZTpodHRwJ1xuaW1wb3J0IHR5cGUgKiBhcyBodHRwcyBmcm9tICdub2RlOmh0dHBzJ1xuaW1wb3J0IHR5cGUgKiBhcyBzdHJlYW0gZnJvbSAnbm9kZTpzdHJlYW0nXG5pbXBvcnQgeyBwaXBlbGluZSB9IGZyb20gJ25vZGU6c3RyZWFtJ1xuXG5pbXBvcnQgdHlwZSB7IFRyYW5zcG9ydCB9IGZyb20gJy4vdHlwZS50cydcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3QoXG4gIHRyYW5zcG9ydDogVHJhbnNwb3J0LFxuICBvcHQ6IGh0dHBzLlJlcXVlc3RPcHRpb25zLFxuICBib2R5OiBCdWZmZXIgfCBzdHJpbmcgfCBzdHJlYW0uUmVhZGFibGUgfCBudWxsID0gbnVsbCxcbik6IFByb21pc2U8aHR0cC5JbmNvbWluZ01lc3NhZ2U+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPGh0dHAuSW5jb21pbmdNZXNzYWdlPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVxdWVzdE9iaiA9IHRyYW5zcG9ydC5yZXF1ZXN0KG9wdCwgKHJlc3ApID0+IHtcbiAgICAgIHJlc29sdmUocmVzcClcbiAgICB9KVxuXG4gICAgaWYgKCFib2R5IHx8IEJ1ZmZlci5pc0J1ZmZlcihib2R5KSB8fCB0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlcXVlc3RPYmpcbiAgICAgICAgLm9uKCdlcnJvcicsIChlOiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KGUpXG4gICAgICAgIH0pXG4gICAgICAgIC5lbmQoYm9keSlcblxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcHVtcCByZWFkYWJsZSBzdHJlYW1cbiAgICBwaXBlbGluZShib2R5LCByZXF1ZXN0T2JqLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpXG4gICAgICB9XG4gICAgfSlcbiAgfSlcbn1cbiJdLCJtYXBwaW5ncyI6IkFBR0EsU0FBU0EsUUFBUTtBQUlqQixPQUFPLGVBQWVDLE9BQU9BLENBQzNCQyxTQUFvQixFQUNwQkMsR0FBeUIsRUFDekJDLElBQThDLEdBQUcsSUFBSSxFQUN0QjtFQUMvQixPQUFPLElBQUlDLE9BQU8sQ0FBdUIsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEtBQUs7SUFDNUQsTUFBTUMsVUFBVSxHQUFHTixTQUFTLENBQUNELE9BQU8sQ0FBQ0UsR0FBRyxFQUFHTSxJQUFJLElBQUs7TUFDbERILE9BQU8sQ0FBQ0csSUFBSSxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0lBRUYsSUFBSSxDQUFDTCxJQUFJLElBQUlNLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDUCxJQUFJLENBQUMsSUFBSSxPQUFPQSxJQUFJLEtBQUssUUFBUSxFQUFFO01BQzlESSxVQUFVLENBQ1BJLEVBQUUsQ0FBQyxPQUFPLEVBQUdDLENBQVUsSUFBSztRQUMzQk4sTUFBTSxDQUFDTSxDQUFDLENBQUM7TUFDWCxDQUFDLENBQUMsQ0FDREMsR0FBRyxDQUFDVixJQUFJLENBQUM7TUFFWjtJQUNGOztJQUVBO0lBQ0FKLFFBQVEsQ0FBQ0ksSUFBSSxFQUFFSSxVQUFVLEVBQUdPLEdBQUcsSUFBSztNQUNsQyxJQUFJQSxHQUFHLEVBQUU7UUFDUFIsTUFBTSxDQUFDUSxHQUFHLENBQUM7TUFDYjtJQUNGLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKIn0=\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWluaW8vZGlzdC9lc20vaW50ZXJuYWwvcmVxdWVzdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFDM0IsZUFBZUMsUUFBUUMsU0FBUyxFQUFFQyxHQUFHLEVBQUVDLE9BQU8sSUFBSTtJQUN2RCxPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7UUFDM0IsTUFBTUMsYUFBYU4sVUFBVUQsT0FBTyxDQUFDRSxLQUFLTSxDQUFBQTtZQUN4Q0gsUUFBUUc7UUFDVjtRQUNBLElBQUksQ0FBQ0wsUUFBUU0sT0FBT0MsUUFBUSxDQUFDUCxTQUFTLE9BQU9BLFNBQVMsVUFBVTtZQUM5REksV0FBV0ksRUFBRSxDQUFDLFNBQVNDLENBQUFBO2dCQUNyQk4sT0FBT007WUFDVCxHQUFHQyxHQUFHLENBQUNWO1lBQ1A7UUFDRjtRQUVBLHVCQUF1QjtRQUN2QkosZ0RBQVFBLENBQUNJLE1BQU1JLFlBQVlPLENBQUFBO1lBQ3pCLElBQUlBLEtBQUs7Z0JBQ1BSLE9BQU9RO1lBQ1Q7UUFDRjtJQUNGO0FBQ0YsRUFDQSw0MEVBQTQwRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbGUtbWFuYWdlbWVudC1zeXN0ZW0vLi9ub2RlX21vZHVsZXMvbWluaW8vZGlzdC9lc20vaW50ZXJuYWwvcmVxdWVzdC5tanM/N2YyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwaXBlbGluZSB9IGZyb20gXCJzdHJlYW1cIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1ZXN0KHRyYW5zcG9ydCwgb3B0LCBib2R5ID0gbnVsbCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHJlcXVlc3RPYmogPSB0cmFuc3BvcnQucmVxdWVzdChvcHQsIHJlc3AgPT4ge1xuICAgICAgcmVzb2x2ZShyZXNwKTtcbiAgICB9KTtcbiAgICBpZiAoIWJvZHkgfHwgQnVmZmVyLmlzQnVmZmVyKGJvZHkpIHx8IHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgcmVxdWVzdE9iai5vbignZXJyb3InLCBlID0+IHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfSkuZW5kKGJvZHkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHB1bXAgcmVhZGFibGUgc3RyZWFtXG4gICAgcGlwZWxpbmUoYm9keSwgcmVxdWVzdE9iaiwgZXJyID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUp3YVhCbGJHbHVaU0lzSW5KbGNYVmxjM1FpTENKMGNtRnVjM0J2Y25RaUxDSnZjSFFpTENKaWIyUjVJaXdpVUhKdmJXbHpaU0lzSW5KbGMyOXNkbVVpTENKeVpXcGxZM1FpTENKeVpYRjFaWE4wVDJKcUlpd2ljbVZ6Y0NJc0lrSjFabVpsY2lJc0ltbHpRblZtWm1WeUlpd2liMjRpTENKbElpd2laVzVrSWl3aVpYSnlJbDBzSW5OdmRYSmpaWE1pT2xzaWNtVnhkV1Z6ZEM1MGN5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdkSGx3WlNBcUlHRnpJR2gwZEhBZ1puSnZiU0FuYm05a1pUcG9kSFJ3SjF4dWFXMXdiM0owSUhSNWNHVWdLaUJoY3lCb2RIUndjeUJtY205dElDZHViMlJsT21oMGRIQnpKMXh1YVcxd2IzSjBJSFI1Y0dVZ0tpQmhjeUJ6ZEhKbFlXMGdabkp2YlNBbmJtOWtaVHB6ZEhKbFlXMG5YRzVwYlhCdmNuUWdleUJ3YVhCbGJHbHVaU0I5SUdaeWIyMGdKMjV2WkdVNmMzUnlaV0Z0SjF4dVhHNXBiWEJ2Y25RZ2RIbHdaU0I3SUZSeVlXNXpjRzl5ZENCOUlHWnliMjBnSnk0dmRIbHdaUzUwY3lkY2JseHVaWGh3YjNKMElHRnplVzVqSUdaMWJtTjBhVzl1SUhKbGNYVmxjM1FvWEc0Z0lIUnlZVzV6Y0c5eWREb2dWSEpoYm5Od2IzSjBMRnh1SUNCdmNIUTZJR2gwZEhCekxsSmxjWFZsYzNSUGNIUnBiMjV6TEZ4dUlDQmliMlI1T2lCQ2RXWm1aWElnZkNCemRISnBibWNnZkNCemRISmxZVzB1VW1WaFpHRmliR1VnZkNCdWRXeHNJRDBnYm5Wc2JDeGNiaWs2SUZCeWIyMXBjMlU4YUhSMGNDNUpibU52YldsdVowMWxjM05oWjJVK0lIdGNiaUFnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sUEdoMGRIQXVTVzVqYjIxcGJtZE5aWE56WVdkbFBpZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2NtVnhkV1Z6ZEU5aWFpQTlJSFJ5WVc1emNHOXlkQzV5WlhGMVpYTjBLRzl3ZEN3Z0tISmxjM0FwSUQwK0lIdGNiaUFnSUNBZ0lISmxjMjlzZG1Vb2NtVnpjQ2xjYmlBZ0lDQjlLVnh1WEc0Z0lDQWdhV1lnS0NGaWIyUjVJSHg4SUVKMVptWmxjaTVwYzBKMVptWmxjaWhpYjJSNUtTQjhmQ0IwZVhCbGIyWWdZbTlrZVNBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJSEpsY1hWbGMzUlBZbXBjYmlBZ0lDQWdJQ0FnTG05dUtDZGxjbkp2Y2ljc0lDaGxPaUIxYm10dWIzZHVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVXBYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUM1bGJtUW9ZbTlrZVNsY2JseHVJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnY0hWdGNDQnlaV0ZrWVdKc1pTQnpkSEpsWVcxY2JpQWdJQ0J3YVhCbGJHbHVaU2hpYjJSNUxDQnlaWEYxWlhOMFQySnFMQ0FvWlhKeUtTQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNsY2JpQWdmU2xjYm4xY2JpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlIwRXNVMEZCVTBFc1VVRkJVVHRCUVVscVFpeFBRVUZQTEdWQlFXVkRMRTlCUVU5QkxFTkJRek5DUXl4VFFVRnZRaXhGUVVOd1FrTXNSMEZCZVVJc1JVRkRla0pETEVsQlFUaERMRWRCUVVjc1NVRkJTU3hGUVVOMFFqdEZRVU12UWl4UFFVRlBMRWxCUVVsRExFOUJRVThzUTBGQmRVSXNRMEZCUTBNc1QwRkJUeXhGUVVGRlF5eE5RVUZOTEV0QlFVczdTVUZETlVRc1RVRkJUVU1zVlVGQlZTeEhRVUZIVGl4VFFVRlRMRU5CUVVORUxFOUJRVThzUTBGQlEwVXNSMEZCUnl4RlFVRkhUU3hKUVVGSkxFbEJRVXM3VFVGRGJFUklMRTlCUVU4c1EwRkJRMGNzU1VGQlNTeERRVUZETzBsQlEyWXNRMEZCUXl4RFFVRkRPMGxCUlVZc1NVRkJTU3hEUVVGRFRDeEpRVUZKTEVsQlFVbE5MRTFCUVUwc1EwRkJRME1zVVVGQlVTeERRVUZEVUN4SlFVRkpMRU5CUVVNc1NVRkJTU3hQUVVGUFFTeEpRVUZKTEV0QlFVc3NVVUZCVVN4RlFVRkZPMDFCUXpsRVNTeFZRVUZWTEVOQlExQkpMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVWRETEVOQlFWVXNTVUZCU3p0UlFVTXpRazRzVFVGQlRTeERRVUZEVFN4RFFVRkRMRU5CUVVNN1RVRkRXQ3hEUVVGRExFTkJRVU1zUTBGRFJFTXNSMEZCUnl4RFFVRkRWaXhKUVVGSkxFTkJRVU03VFVGRldqdEpRVU5HT3p0SlFVVkJPMGxCUTBGS0xGRkJRVkVzUTBGQlEwa3NTVUZCU1N4RlFVRkZTU3hWUVVGVkxFVkJRVWRQTEVkQlFVY3NTVUZCU3p0TlFVTnNReXhKUVVGSlFTeEhRVUZITEVWQlFVVTdVVUZEVUZJc1RVRkJUU3hEUVVGRFVTeEhRVUZITEVOQlFVTTdUVUZEWWp0SlFVTkdMRU5CUVVNc1EwRkJRenRGUVVOS0xFTkJRVU1zUTBGQlF6dEJRVU5LSW4wPSJdLCJuYW1lcyI6WyJwaXBlbGluZSIsInJlcXVlc3QiLCJ0cmFuc3BvcnQiLCJvcHQiLCJib2R5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0T2JqIiwicmVzcCIsIkJ1ZmZlciIsImlzQnVmZmVyIiwib24iLCJlIiwiZW5kIiwiZXJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/internal/request.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/internal/response.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/minio/dist/esm/internal/response.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drainResponse: () => (/* binding */ drainResponse),\n/* harmony export */   readAsBuffer: () => (/* binding */ readAsBuffer),\n/* harmony export */   readAsString: () => (/* binding */ readAsString)\n/* harmony export */ });\nasync function readAsBuffer(res) {\n    return new Promise((resolve, reject)=>{\n        const body = [];\n        res.on(\"data\", (chunk)=>body.push(chunk)).on(\"error\", (e)=>reject(e)).on(\"end\", ()=>resolve(Buffer.concat(body)));\n    });\n}\nasync function readAsString(res) {\n    const body = await readAsBuffer(res);\n    return body.toString();\n}\nasync function drainResponse(res) {\n    return new Promise((resolve, reject)=>{\n        res.on(\"data\", ()=>{}).on(\"error\", (e)=>reject(e)).on(\"end\", ()=>resolve());\n    });\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFkQXNCdWZmZXIiLCJyZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImJvZHkiLCJvbiIsImNodW5rIiwicHVzaCIsImUiLCJCdWZmZXIiLCJjb25jYXQiLCJyZWFkQXNTdHJpbmciLCJ0b1N0cmluZyIsImRyYWluUmVzcG9uc2UiXSwic291cmNlcyI6WyJyZXNwb25zZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSBodHRwIGZyb20gJ25vZGU6aHR0cCdcbmltcG9ydCB0eXBlIHN0cmVhbSBmcm9tICdub2RlOnN0cmVhbSdcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWRBc0J1ZmZlcihyZXM6IHN0cmVhbS5SZWFkYWJsZSk6IFByb21pc2U8QnVmZmVyPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgYm9keTogQnVmZmVyW10gPSBbXVxuICAgIHJlc1xuICAgICAgLm9uKCdkYXRhJywgKGNodW5rOiBCdWZmZXIpID0+IGJvZHkucHVzaChjaHVuaykpXG4gICAgICAub24oJ2Vycm9yJywgKGUpID0+IHJlamVjdChlKSlcbiAgICAgIC5vbignZW5kJywgKCkgPT4gcmVzb2x2ZShCdWZmZXIuY29uY2F0KGJvZHkpKSlcbiAgfSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWRBc1N0cmluZyhyZXM6IGh0dHAuSW5jb21pbmdNZXNzYWdlKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgYm9keSA9IGF3YWl0IHJlYWRBc0J1ZmZlcihyZXMpXG4gIHJldHVybiBib2R5LnRvU3RyaW5nKClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRyYWluUmVzcG9uc2UocmVzOiBzdHJlYW0uUmVhZGFibGUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICByZXNcbiAgICAgIC5vbignZGF0YScsICgpID0+IHt9KVxuICAgICAgLm9uKCdlcnJvcicsIChlKSA9PiByZWplY3QoZSkpXG4gICAgICAub24oJ2VuZCcsICgpID0+IHJlc29sdmUoKSlcbiAgfSlcbn1cbiJdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxlQUFlQSxZQUFZQSxDQUFDQyxHQUFvQixFQUFtQjtFQUN4RSxPQUFPLElBQUlDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztJQUN0QyxNQUFNQyxJQUFjLEdBQUcsRUFBRTtJQUN6QkosR0FBRyxDQUNBSyxFQUFFLENBQUMsTUFBTSxFQUFHQyxLQUFhLElBQUtGLElBQUksQ0FBQ0csSUFBSSxDQUFDRCxLQUFLLENBQUMsQ0FBQyxDQUMvQ0QsRUFBRSxDQUFDLE9BQU8sRUFBR0csQ0FBQyxJQUFLTCxNQUFNLENBQUNLLENBQUMsQ0FBQyxDQUFDLENBQzdCSCxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU1ILE9BQU8sQ0FBQ08sTUFBTSxDQUFDQyxNQUFNLENBQUNOLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbEQsQ0FBQyxDQUFDO0FBQ0o7QUFFQSxPQUFPLGVBQWVPLFlBQVlBLENBQUNYLEdBQXlCLEVBQW1CO0VBQzdFLE1BQU1JLElBQUksR0FBRyxNQUFNTCxZQUFZLENBQUNDLEdBQUcsQ0FBQztFQUNwQyxPQUFPSSxJQUFJLENBQUNRLFFBQVEsQ0FBQyxDQUFDO0FBQ3hCO0FBRUEsT0FBTyxlQUFlQyxhQUFhQSxDQUFDYixHQUFvQixFQUFpQjtFQUN2RSxPQUFPLElBQUlDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztJQUN0Q0gsR0FBRyxDQUNBSyxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FDcEJBLEVBQUUsQ0FBQyxPQUFPLEVBQUdHLENBQUMsSUFBS0wsTUFBTSxDQUFDSyxDQUFDLENBQUMsQ0FBQyxDQUM3QkgsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNSCxPQUFPLENBQUMsQ0FBQyxDQUFDO0VBQy9CLENBQUMsQ0FBQztBQUNKIn0=\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWluaW8vZGlzdC9lc20vaW50ZXJuYWwvcmVzcG9uc2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFPLGVBQWVBLGFBQWFDLEdBQUc7SUFDcEMsT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1FBQzNCLE1BQU1DLE9BQU8sRUFBRTtRQUNmSixJQUFJSyxFQUFFLENBQUMsUUFBUUMsQ0FBQUEsUUFBU0YsS0FBS0csSUFBSSxDQUFDRCxRQUFRRCxFQUFFLENBQUMsU0FBU0csQ0FBQUEsSUFBS0wsT0FBT0ssSUFBSUgsRUFBRSxDQUFDLE9BQU8sSUFBTUgsUUFBUU8sT0FBT0MsTUFBTSxDQUFDTjtJQUM5RztBQUNGO0FBQ08sZUFBZU8sYUFBYVgsR0FBRztJQUNwQyxNQUFNSSxPQUFPLE1BQU1MLGFBQWFDO0lBQ2hDLE9BQU9JLEtBQUtRLFFBQVE7QUFDdEI7QUFDTyxlQUFlQyxjQUFjYixHQUFHO0lBQ3JDLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztRQUMzQkgsSUFBSUssRUFBRSxDQUFDLFFBQVEsS0FBTyxHQUFHQSxFQUFFLENBQUMsU0FBU0csQ0FBQUEsSUFBS0wsT0FBT0ssSUFBSUgsRUFBRSxDQUFDLE9BQU8sSUFBTUg7SUFDdkU7QUFDRixFQUNBLDQ3RUFBNDdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmlsZS1tYW5hZ2VtZW50LXN5c3RlbS8uL25vZGVfbW9kdWxlcy9taW5pby9kaXN0L2VzbS9pbnRlcm5hbC9yZXNwb25zZS5tanM/ZjIxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZEFzQnVmZmVyKHJlcykge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBbXTtcbiAgICByZXMub24oJ2RhdGEnLCBjaHVuayA9PiBib2R5LnB1c2goY2h1bmspKS5vbignZXJyb3InLCBlID0+IHJlamVjdChlKSkub24oJ2VuZCcsICgpID0+IHJlc29sdmUoQnVmZmVyLmNvbmNhdChib2R5KSkpO1xuICB9KTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkQXNTdHJpbmcocmVzKSB7XG4gIGNvbnN0IGJvZHkgPSBhd2FpdCByZWFkQXNCdWZmZXIocmVzKTtcbiAgcmV0dXJuIGJvZHkudG9TdHJpbmcoKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkcmFpblJlc3BvbnNlKHJlcykge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHJlcy5vbignZGF0YScsICgpID0+IHt9KS5vbignZXJyb3InLCBlID0+IHJlamVjdChlKSkub24oJ2VuZCcsICgpID0+IHJlc29sdmUoKSk7XG4gIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUp5WldGa1FYTkNkV1ptWlhJaUxDSnlaWE1pTENKUWNtOXRhWE5sSWl3aWNtVnpiMngyWlNJc0luSmxhbVZqZENJc0ltSnZaSGtpTENKdmJpSXNJbU5vZFc1cklpd2ljSFZ6YUNJc0ltVWlMQ0pDZFdabVpYSWlMQ0pqYjI1allYUWlMQ0p5WldGa1FYTlRkSEpwYm1jaUxDSjBiMU4wY21sdVp5SXNJbVJ5WVdsdVVtVnpjRzl1YzJVaVhTd2ljMjkxY21ObGN5STZXeUp5WlhOd2IyNXpaUzUwY3lKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2RIbHdaU0JvZEhSd0lHWnliMjBnSjI1dlpHVTZhSFIwY0NkY2JtbHRjRzl5ZENCMGVYQmxJSE4wY21WaGJTQm1jbTl0SUNkdWIyUmxPbk4wY21WaGJTZGNibHh1Wlhod2IzSjBJR0Z6ZVc1aklHWjFibU4wYVc5dUlISmxZV1JCYzBKMVptWmxjaWh5WlhNNklITjBjbVZoYlM1U1pXRmtZV0pzWlNrNklGQnliMjFwYzJVOFFuVm1abVZ5UGlCN1hHNGdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdZbTlrZVRvZ1FuVm1abVZ5VzEwZ1BTQmJYVnh1SUNBZ0lISmxjMXh1SUNBZ0lDQWdMbTl1S0Nka1lYUmhKeXdnS0dOb2RXNXJPaUJDZFdabVpYSXBJRDArSUdKdlpIa3VjSFZ6YUNoamFIVnVheWtwWEc0Z0lDQWdJQ0F1YjI0b0oyVnljbTl5Snl3Z0tHVXBJRDArSUhKbGFtVmpkQ2hsS1NsY2JpQWdJQ0FnSUM1dmJpZ25aVzVrSnl3Z0tDa2dQVDRnY21WemIyeDJaU2hDZFdabVpYSXVZMjl1WTJGMEtHSnZaSGtwS1NsY2JpQWdmU2xjYm4xY2JseHVaWGh3YjNKMElHRnplVzVqSUdaMWJtTjBhVzl1SUhKbFlXUkJjMU4wY21sdVp5aHlaWE02SUdoMGRIQXVTVzVqYjIxcGJtZE5aWE56WVdkbEtUb2dVSEp2YldselpUeHpkSEpwYm1jK0lIdGNiaUFnWTI5dWMzUWdZbTlrZVNBOUlHRjNZV2wwSUhKbFlXUkJjMEoxWm1abGNpaHlaWE1wWEc0Z0lISmxkSFZ5YmlCaWIyUjVMblJ2VTNSeWFXNW5LQ2xjYm4xY2JseHVaWGh3YjNKMElHRnplVzVqSUdaMWJtTjBhVzl1SUdSeVlXbHVVbVZ6Y0c5dWMyVW9jbVZ6T2lCemRISmxZVzB1VW1WaFpHRmliR1VwT2lCUWNtOXRhWE5sUEhadmFXUStJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQnlaWE5jYmlBZ0lDQWdJQzV2YmlnblpHRjBZU2NzSUNncElEMCtJSHQ5S1Z4dUlDQWdJQ0FnTG05dUtDZGxjbkp2Y2ljc0lDaGxLU0E5UGlCeVpXcGxZM1FvWlNrcFhHNGdJQ0FnSUNBdWIyNG9KMlZ1WkNjc0lDZ3BJRDArSUhKbGMyOXNkbVVvS1NsY2JpQWdmU2xjYm4xY2JpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlIwRXNUMEZCVHl4bFFVRmxRU3haUVVGWlFTeERRVUZEUXl4SFFVRnZRaXhGUVVGdFFqdEZRVU40UlN4UFFVRlBMRWxCUVVsRExFOUJRVThzUTBGQlF5eERRVUZEUXl4UFFVRlBMRVZCUVVWRExFMUJRVTBzUzBGQlN6dEpRVU4wUXl4TlFVRk5ReXhKUVVGakxFZEJRVWNzUlVGQlJUdEpRVU42UWtvc1IwRkJSeXhEUVVOQlN5eEZRVUZGTEVOQlFVTXNUVUZCVFN4RlFVRkhReXhMUVVGaExFbEJRVXRHTEVsQlFVa3NRMEZCUTBjc1NVRkJTU3hEUVVGRFJDeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVTXZRMFFzUlVGQlJTeERRVUZETEU5QlFVOHNSVUZCUjBjc1EwRkJReXhKUVVGTFRDeE5RVUZOTEVOQlFVTkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRemRDU0N4RlFVRkZMRU5CUVVNc1MwRkJTeXhGUVVGRkxFMUJRVTFJTEU5QlFVOHNRMEZCUTA4c1RVRkJUU3hEUVVGRFF5eE5RVUZOTEVOQlFVTk9MRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRGJFUXNRMEZCUXl4RFFVRkRPMEZCUTBvN1FVRkZRU3hQUVVGUExHVkJRV1ZQTEZsQlFWbEJMRU5CUVVOWUxFZEJRWGxDTEVWQlFXMUNPMFZCUXpkRkxFMUJRVTFKTEVsQlFVa3NSMEZCUnl4TlFVRk5UQ3haUVVGWkxFTkJRVU5ETEVkQlFVY3NRMEZCUXp0RlFVTndReXhQUVVGUFNTeEpRVUZKTEVOQlFVTlJMRkZCUVZFc1EwRkJReXhEUVVGRE8wRkJRM2hDTzBGQlJVRXNUMEZCVHl4bFFVRmxReXhoUVVGaFFTeERRVUZEWWl4SFFVRnZRaXhGUVVGcFFqdEZRVU4yUlN4UFFVRlBMRWxCUVVsRExFOUJRVThzUTBGQlF5eERRVUZEUXl4UFFVRlBMRVZCUVVWRExFMUJRVTBzUzBGQlN6dEpRVU4wUTBnc1IwRkJSeXhEUVVOQlN5eEZRVUZGTEVOQlFVTXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGRGNFSkJMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVWRITEVOQlFVTXNTVUZCUzB3c1RVRkJUU3hEUVVGRFN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVTTNRa2dzUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlN4TlFVRk5TQ3hQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETzBWQlF5OUNMRU5CUVVNc1EwRkJRenRCUVVOS0luMD0iXSwibmFtZXMiOlsicmVhZEFzQnVmZmVyIiwicmVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJib2R5Iiwib24iLCJjaHVuayIsInB1c2giLCJlIiwiQnVmZmVyIiwiY29uY2F0IiwicmVhZEFzU3RyaW5nIiwidG9TdHJpbmciLCJkcmFpblJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/internal/response.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/internal/s3-endpoints.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/minio/dist/esm/internal/s3-endpoints.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getS3Endpoint: () => (/* binding */ getS3Endpoint)\n/* harmony export */ });\n/* harmony import */ var _helper_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\");\n/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015, 2016 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \n// List of currently supported endpoints.\nconst awsS3Endpoint = {\n    \"us-east-1\": \"s3.amazonaws.com\",\n    \"us-east-2\": \"s3-us-east-2.amazonaws.com\",\n    \"us-west-1\": \"s3-us-west-1.amazonaws.com\",\n    \"us-west-2\": \"s3-us-west-2.amazonaws.com\",\n    \"ca-central-1\": \"s3.ca-central-1.amazonaws.com\",\n    \"eu-west-1\": \"s3-eu-west-1.amazonaws.com\",\n    \"eu-west-2\": \"s3-eu-west-2.amazonaws.com\",\n    \"sa-east-1\": \"s3-sa-east-1.amazonaws.com\",\n    \"eu-central-1\": \"s3-eu-central-1.amazonaws.com\",\n    \"ap-south-1\": \"s3-ap-south-1.amazonaws.com\",\n    \"ap-southeast-1\": \"s3-ap-southeast-1.amazonaws.com\",\n    \"ap-southeast-2\": \"s3-ap-southeast-2.amazonaws.com\",\n    \"ap-northeast-1\": \"s3-ap-northeast-1.amazonaws.com\",\n    \"cn-north-1\": \"s3.cn-north-1.amazonaws.com.cn\",\n    \"ap-east-1\": \"s3.ap-east-1.amazonaws.com\",\n    \"eu-north-1\": \"s3.eu-north-1.amazonaws.com\"\n};\n// getS3Endpoint get relevant endpoint for the region.\nfunction getS3Endpoint(region) {\n    if (!(0,_helper_mjs__WEBPACK_IMPORTED_MODULE_0__.isString)(region)) {\n        throw new TypeError(`Invalid region: ${region}`);\n    }\n    const endpoint = awsS3Endpoint[region];\n    if (endpoint) {\n        return endpoint;\n    }\n    return \"s3.amazonaws.com\";\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc1N0cmluZyIsImF3c1MzRW5kcG9pbnQiLCJnZXRTM0VuZHBvaW50IiwicmVnaW9uIiwiVHlwZUVycm9yIiwiZW5kcG9pbnQiXSwic291cmNlcyI6WyJzMy1lbmRwb2ludHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1pbklPIEphdmFzY3JpcHQgTGlicmFyeSBmb3IgQW1hem9uIFMzIENvbXBhdGlibGUgQ2xvdWQgU3RvcmFnZSwgKEMpIDIwMTUsIDIwMTYgTWluSU8sIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuL2hlbHBlci50cydcblxuLy8gTGlzdCBvZiBjdXJyZW50bHkgc3VwcG9ydGVkIGVuZHBvaW50cy5cbmNvbnN0IGF3c1MzRW5kcG9pbnQgPSB7XG4gICd1cy1lYXN0LTEnOiAnczMuYW1hem9uYXdzLmNvbScsXG4gICd1cy1lYXN0LTInOiAnczMtdXMtZWFzdC0yLmFtYXpvbmF3cy5jb20nLFxuICAndXMtd2VzdC0xJzogJ3MzLXVzLXdlc3QtMS5hbWF6b25hd3MuY29tJyxcbiAgJ3VzLXdlc3QtMic6ICdzMy11cy13ZXN0LTIuYW1hem9uYXdzLmNvbScsXG4gICdjYS1jZW50cmFsLTEnOiAnczMuY2EtY2VudHJhbC0xLmFtYXpvbmF3cy5jb20nLFxuICAnZXUtd2VzdC0xJzogJ3MzLWV1LXdlc3QtMS5hbWF6b25hd3MuY29tJyxcbiAgJ2V1LXdlc3QtMic6ICdzMy1ldS13ZXN0LTIuYW1hem9uYXdzLmNvbScsXG4gICdzYS1lYXN0LTEnOiAnczMtc2EtZWFzdC0xLmFtYXpvbmF3cy5jb20nLFxuICAnZXUtY2VudHJhbC0xJzogJ3MzLWV1LWNlbnRyYWwtMS5hbWF6b25hd3MuY29tJyxcbiAgJ2FwLXNvdXRoLTEnOiAnczMtYXAtc291dGgtMS5hbWF6b25hd3MuY29tJyxcbiAgJ2FwLXNvdXRoZWFzdC0xJzogJ3MzLWFwLXNvdXRoZWFzdC0xLmFtYXpvbmF3cy5jb20nLFxuICAnYXAtc291dGhlYXN0LTInOiAnczMtYXAtc291dGhlYXN0LTIuYW1hem9uYXdzLmNvbScsXG4gICdhcC1ub3J0aGVhc3QtMSc6ICdzMy1hcC1ub3J0aGVhc3QtMS5hbWF6b25hd3MuY29tJyxcbiAgJ2NuLW5vcnRoLTEnOiAnczMuY24tbm9ydGgtMS5hbWF6b25hd3MuY29tLmNuJyxcbiAgJ2FwLWVhc3QtMSc6ICdzMy5hcC1lYXN0LTEuYW1hem9uYXdzLmNvbScsXG4gICdldS1ub3J0aC0xJzogJ3MzLmV1LW5vcnRoLTEuYW1hem9uYXdzLmNvbScsXG4gIC8vIEFkZCBuZXcgZW5kcG9pbnRzIGhlcmUuXG59XG5cbmV4cG9ydCB0eXBlIFJlZ2lvbiA9IGtleW9mIHR5cGVvZiBhd3NTM0VuZHBvaW50IHwgc3RyaW5nXG5cbi8vIGdldFMzRW5kcG9pbnQgZ2V0IHJlbGV2YW50IGVuZHBvaW50IGZvciB0aGUgcmVnaW9uLlxuZXhwb3J0IGZ1bmN0aW9uIGdldFMzRW5kcG9pbnQocmVnaW9uOiBSZWdpb24pOiBzdHJpbmcge1xuICBpZiAoIWlzU3RyaW5nKHJlZ2lvbikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHJlZ2lvbjogJHtyZWdpb259YClcbiAgfVxuXG4gIGNvbnN0IGVuZHBvaW50ID0gKGF3c1MzRW5kcG9pbnQgYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nPilbcmVnaW9uXVxuICBpZiAoZW5kcG9pbnQpIHtcbiAgICByZXR1cm4gZW5kcG9pbnRcbiAgfVxuICByZXR1cm4gJ3MzLmFtYXpvbmF3cy5jb20nXG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxRQUFRLFFBQVEsY0FBYTs7QUFFdEM7QUFDQSxNQUFNQyxhQUFhLEdBQUc7RUFDcEIsV0FBVyxFQUFFLGtCQUFrQjtFQUMvQixXQUFXLEVBQUUsNEJBQTRCO0VBQ3pDLFdBQVcsRUFBRSw0QkFBNEI7RUFDekMsV0FBVyxFQUFFLDRCQUE0QjtFQUN6QyxjQUFjLEVBQUUsK0JBQStCO0VBQy9DLFdBQVcsRUFBRSw0QkFBNEI7RUFDekMsV0FBVyxFQUFFLDRCQUE0QjtFQUN6QyxXQUFXLEVBQUUsNEJBQTRCO0VBQ3pDLGNBQWMsRUFBRSwrQkFBK0I7RUFDL0MsWUFBWSxFQUFFLDZCQUE2QjtFQUMzQyxnQkFBZ0IsRUFBRSxpQ0FBaUM7RUFDbkQsZ0JBQWdCLEVBQUUsaUNBQWlDO0VBQ25ELGdCQUFnQixFQUFFLGlDQUFpQztFQUNuRCxZQUFZLEVBQUUsZ0NBQWdDO0VBQzlDLFdBQVcsRUFBRSw0QkFBNEI7RUFDekMsWUFBWSxFQUFFO0VBQ2Q7QUFDRixDQUFDOztBQUlEO0FBQ0EsT0FBTyxTQUFTQyxhQUFhQSxDQUFDQyxNQUFjLEVBQVU7RUFDcEQsSUFBSSxDQUFDSCxRQUFRLENBQUNHLE1BQU0sQ0FBQyxFQUFFO0lBQ3JCLE1BQU0sSUFBSUMsU0FBUyxDQUFFLG1CQUFrQkQsTUFBTyxFQUFDLENBQUM7RUFDbEQ7RUFFQSxNQUFNRSxRQUFRLEdBQUlKLGFBQWEsQ0FBNEJFLE1BQU0sQ0FBQztFQUNsRSxJQUFJRSxRQUFRLEVBQUU7SUFDWixPQUFPQSxRQUFRO0VBQ2pCO0VBQ0EsT0FBTyxrQkFBa0I7QUFDM0IifQ==\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/internal/s3-endpoints.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/internal/type.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/minio/dist/esm/internal/type.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ENCRYPTION_TYPES: () => (/* binding */ ENCRYPTION_TYPES),\n/* harmony export */   LEGAL_HOLD_STATUS: () => (/* binding */ LEGAL_HOLD_STATUS),\n/* harmony export */   RETENTION_MODES: () => (/* binding */ RETENTION_MODES),\n/* harmony export */   RETENTION_VALIDITY_UNITS: () => (/* binding */ RETENTION_VALIDITY_UNITS)\n/* harmony export */ });\n// nodejs IncomingHttpHeaders is Record<string, string | string[]>, but it's actually this:\nlet ENCRYPTION_TYPES = /*#__PURE__*/ function(ENCRYPTION_TYPES) {\n    ENCRYPTION_TYPES[\"SSEC\"] = \"SSE-C\";\n    ENCRYPTION_TYPES[\"KMS\"] = \"KMS\";\n    return ENCRYPTION_TYPES;\n}({});\nlet RETENTION_MODES = /*#__PURE__*/ function(RETENTION_MODES) {\n    RETENTION_MODES[\"GOVERNANCE\"] = \"GOVERNANCE\";\n    RETENTION_MODES[\"COMPLIANCE\"] = \"COMPLIANCE\";\n    return RETENTION_MODES;\n}({});\nlet RETENTION_VALIDITY_UNITS = /*#__PURE__*/ function(RETENTION_VALIDITY_UNITS) {\n    RETENTION_VALIDITY_UNITS[\"DAYS\"] = \"Days\";\n    RETENTION_VALIDITY_UNITS[\"YEARS\"] = \"Years\";\n    return RETENTION_VALIDITY_UNITS;\n}({});\nlet LEGAL_HOLD_STATUS = /*#__PURE__*/ function(LEGAL_HOLD_STATUS) {\n    LEGAL_HOLD_STATUS[\"ENABLED\"] = \"ON\";\n    LEGAL_HOLD_STATUS[\"DISABLED\"] = \"OFF\";\n    return LEGAL_HOLD_STATUS;\n}({}); /* Replication Config types */  /* Replication Config types */  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFTkNSWVBUSU9OX1RZUEVTIiwiUkVURU5USU9OX01PREVTIiwiUkVURU5USU9OX1ZBTElESVRZX1VOSVRTIiwiTEVHQUxfSE9MRF9TVEFUVVMiXSwic291cmNlcyI6WyJ0eXBlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlICogYXMgaHR0cCBmcm9tICdub2RlOmh0dHAnXG5pbXBvcnQgdHlwZSB7IFJlYWRhYmxlIGFzIFJlYWRhYmxlU3RyZWFtIH0gZnJvbSAnbm9kZTpzdHJlYW0nXG5cbmV4cG9ydCB0eXBlIEJpbmFyeSA9IHN0cmluZyB8IEJ1ZmZlclxuXG4vLyBub2RlanMgSW5jb21pbmdIdHRwSGVhZGVycyBpcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBzdHJpbmdbXT4sIGJ1dCBpdCdzIGFjdHVhbGx5IHRoaXM6XG5leHBvcnQgdHlwZSBSZXNwb25zZUhlYWRlciA9IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cblxuZXhwb3J0IHR5cGUgT2JqZWN0TWV0YURhdGEgPSBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXI+XG5cbmV4cG9ydCB0eXBlIFJlcXVlc3RIZWFkZXJzID0gUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgYm9vbGVhbiB8IG51bWJlciB8IHVuZGVmaW5lZD5cblxuZXhwb3J0IHR5cGUgRW5jcnlwdGlvbiA9XG4gIHwge1xuICAgICAgdHlwZTogRU5DUllQVElPTl9UWVBFUy5TU0VDXG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IEVOQ1JZUFRJT05fVFlQRVMuS01TXG4gICAgICBTU0VBbGdvcml0aG0/OiBzdHJpbmdcbiAgICAgIEtNU01hc3RlcktleUlEPzogc3RyaW5nXG4gICAgfVxuXG5leHBvcnQgZW51bSBFTkNSWVBUSU9OX1RZUEVTIHtcbiAgLyoqXG4gICAqIFNTRUMgcmVwcmVzZW50cyBzZXJ2ZXItc2lkZS1lbmNyeXB0aW9uIHdpdGggY3VzdG9tZXIgcHJvdmlkZWQga2V5c1xuICAgKi9cbiAgU1NFQyA9ICdTU0UtQycsXG4gIC8qKlxuICAgKiBLTVMgcmVwcmVzZW50cyBzZXJ2ZXItc2lkZS1lbmNyeXB0aW9uIHdpdGggbWFuYWdlZCBrZXlzXG4gICAqL1xuICBLTVMgPSAnS01TJyxcbn1cblxuZXhwb3J0IGVudW0gUkVURU5USU9OX01PREVTIHtcbiAgR09WRVJOQU5DRSA9ICdHT1ZFUk5BTkNFJyxcbiAgQ09NUExJQU5DRSA9ICdDT01QTElBTkNFJyxcbn1cblxuZXhwb3J0IGVudW0gUkVURU5USU9OX1ZBTElESVRZX1VOSVRTIHtcbiAgREFZUyA9ICdEYXlzJyxcbiAgWUVBUlMgPSAnWWVhcnMnLFxufVxuXG5leHBvcnQgZW51bSBMRUdBTF9IT0xEX1NUQVRVUyB7XG4gIEVOQUJMRUQgPSAnT04nLFxuICBESVNBQkxFRCA9ICdPRkYnLFxufVxuXG5leHBvcnQgdHlwZSBUcmFuc3BvcnQgPSBQaWNrPHR5cGVvZiBodHRwLCAncmVxdWVzdCc+XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlcXVlc3Qge1xuICBwcm90b2NvbDogc3RyaW5nXG4gIHBvcnQ/OiBudW1iZXIgfCBzdHJpbmdcbiAgbWV0aG9kOiBzdHJpbmdcbiAgcGF0aDogc3RyaW5nXG4gIGhlYWRlcnM6IFJlcXVlc3RIZWFkZXJzXG59XG5cbmV4cG9ydCB0eXBlIElDYW5vbmljYWxSZXF1ZXN0ID0gc3RyaW5nXG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5jb21wbGV0ZVVwbG9hZGVkQnVja2V0SXRlbSB7XG4gIGtleTogc3RyaW5nXG4gIHVwbG9hZElkOiBzdHJpbmdcbiAgc2l6ZTogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YWRhdGFJdGVtIHtcbiAgS2V5OiBzdHJpbmdcbiAgVmFsdWU6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEl0ZW1CdWNrZXRNZXRhZGF0YUxpc3Qge1xuICBJdGVtczogTWV0YWRhdGFJdGVtW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJdGVtQnVja2V0TWV0YWRhdGEge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBba2V5OiBzdHJpbmddOiBhbnlcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCdWNrZXRJdGVtRnJvbUxpc3Qge1xuICBuYW1lOiBzdHJpbmdcbiAgY3JlYXRpb25EYXRlOiBEYXRlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnVja2V0SXRlbUNvcHkge1xuICBldGFnOiBzdHJpbmdcbiAgbGFzdE1vZGlmaWVkOiBEYXRlXG59XG5cbmV4cG9ydCB0eXBlIEJ1Y2tldEl0ZW0gPVxuICB8IHtcbiAgICAgIG5hbWU6IHN0cmluZ1xuICAgICAgc2l6ZTogbnVtYmVyXG4gICAgICBldGFnOiBzdHJpbmdcbiAgICAgIHByZWZpeD86IG5ldmVyXG4gICAgICBsYXN0TW9kaWZpZWQ6IERhdGVcbiAgICB9XG4gIHwge1xuICAgICAgbmFtZT86IG5ldmVyXG4gICAgICBldGFnPzogbmV2ZXJcbiAgICAgIGxhc3RNb2RpZmllZD86IG5ldmVyXG4gICAgICBwcmVmaXg6IHN0cmluZ1xuICAgICAgc2l6ZTogMFxuICAgIH1cblxuZXhwb3J0IHR5cGUgQnVja2V0SXRlbVdpdGhNZXRhZGF0YSA9IEJ1Y2tldEl0ZW0gJiB7XG4gIG1ldGFkYXRhPzogSXRlbUJ1Y2tldE1ldGFkYXRhIHwgSXRlbUJ1Y2tldE1ldGFkYXRhTGlzdFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJ1Y2tldFN0cmVhbTxUPiBleHRlbmRzIFJlYWRhYmxlU3RyZWFtIHtcbiAgb24oZXZlbnQ6ICdkYXRhJywgbGlzdGVuZXI6IChpdGVtOiBUKSA9PiB2b2lkKTogdGhpc1xuXG4gIG9uKGV2ZW50OiAnZW5kJyB8ICdwYXVzZScgfCAncmVhZGFibGUnIHwgJ3Jlc3VtZScgfCAnY2xvc2UnLCBsaXN0ZW5lcjogKCkgPT4gdm9pZCk6IHRoaXNcblxuICBvbihldmVudDogJ2Vycm9yJywgbGlzdGVuZXI6IChlcnI6IEVycm9yKSA9PiB2b2lkKTogdGhpc1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIG9uKGV2ZW50OiBzdHJpbmcgfCBzeW1ib2wsIGxpc3RlbmVyOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiB0aGlzXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnVja2V0SXRlbVN0YXQge1xuICBzaXplOiBudW1iZXJcbiAgZXRhZzogc3RyaW5nXG4gIGxhc3RNb2RpZmllZDogRGF0ZVxuICBtZXRhRGF0YTogSXRlbUJ1Y2tldE1ldGFkYXRhXG4gIHZlcnNpb25JZD86IHN0cmluZyB8IG51bGxcbn1cblxuZXhwb3J0IHR5cGUgU3RhdE9iamVjdE9wdHMgPSB7XG4gIHZlcnNpb25JZD86IHN0cmluZ1xufVxuXG4vKiBSZXBsaWNhdGlvbiBDb25maWcgdHlwZXMgKi9cbmV4cG9ydCB0eXBlIFJlcGxpY2F0aW9uUnVsZVN0YXR1cyA9IHtcbiAgU3RhdHVzOiAnRW5hYmxlZCcgfCAnRGlzYWJsZWQnXG59XG5cbmV4cG9ydCB0eXBlIFRhZyA9IHtcbiAgS2V5OiBzdHJpbmdcbiAgVmFsdWU6IHN0cmluZ1xufVxuXG5leHBvcnQgdHlwZSBSZXBsaWNhdGlvblJ1bGVEZXN0aW5hdGlvbiA9IHtcbiAgQnVja2V0OiBzdHJpbmdcbiAgU3RvcmFnZUNsYXNzOiBzdHJpbmdcbn1cbmV4cG9ydCB0eXBlIFJlcGxpY2F0aW9uUnVsZUFuZCA9IHtcbiAgUHJlZml4OiBzdHJpbmdcbiAgVGFnczogVGFnW11cbn1cblxuZXhwb3J0IHR5cGUgUmVwbGljYXRpb25SdWxlRmlsdGVyID0ge1xuICBQcmVmaXg6IHN0cmluZ1xuICBBbmQ6IFJlcGxpY2F0aW9uUnVsZUFuZFxuICBUYWc6IFRhZ1xufVxuXG5leHBvcnQgdHlwZSBSZXBsaWNhTW9kaWZpY2F0aW9ucyA9IHtcbiAgU3RhdHVzOiBSZXBsaWNhdGlvblJ1bGVTdGF0dXNcbn1cblxuZXhwb3J0IHR5cGUgU291cmNlU2VsZWN0aW9uQ3JpdGVyaWEgPSB7XG4gIFJlcGxpY2FNb2RpZmljYXRpb25zOiBSZXBsaWNhTW9kaWZpY2F0aW9uc1xufVxuXG5leHBvcnQgdHlwZSBFeGlzdGluZ09iamVjdFJlcGxpY2F0aW9uID0ge1xuICBTdGF0dXM6IFJlcGxpY2F0aW9uUnVsZVN0YXR1c1xufVxuXG5leHBvcnQgdHlwZSBSZXBsaWNhdGlvblJ1bGUgPSB7XG4gIElEOiBzdHJpbmdcbiAgU3RhdHVzOiBSZXBsaWNhdGlvblJ1bGVTdGF0dXNcbiAgUHJpb3JpdHk6IG51bWJlclxuICBEZWxldGVNYXJrZXJSZXBsaWNhdGlvbjogUmVwbGljYXRpb25SdWxlU3RhdHVzIC8vIHNob3VsZCBiZSBzZXQgdG8gXCJEaXNhYmxlZFwiIGJ5IGRlZmF1bHRcbiAgRGVsZXRlUmVwbGljYXRpb246IFJlcGxpY2F0aW9uUnVsZVN0YXR1c1xuICBEZXN0aW5hdGlvbjogUmVwbGljYXRpb25SdWxlRGVzdGluYXRpb25cbiAgRmlsdGVyOiBSZXBsaWNhdGlvblJ1bGVGaWx0ZXJcbiAgU291cmNlU2VsZWN0aW9uQ3JpdGVyaWE6IFNvdXJjZVNlbGVjdGlvbkNyaXRlcmlhXG4gIEV4aXN0aW5nT2JqZWN0UmVwbGljYXRpb246IEV4aXN0aW5nT2JqZWN0UmVwbGljYXRpb25cbn1cblxuZXhwb3J0IHR5cGUgUmVwbGljYXRpb25Db25maWdPcHRzID0ge1xuICByb2xlOiBzdHJpbmdcbiAgcnVsZXM6IFJlcGxpY2F0aW9uUnVsZVtdXG59XG5cbmV4cG9ydCB0eXBlIFJlcGxpY2F0aW9uQ29uZmlnID0ge1xuICBSZXBsaWNhdGlvbkNvbmZpZ3VyYXRpb246IFJlcGxpY2F0aW9uQ29uZmlnT3B0c1xufVxuLyogUmVwbGljYXRpb24gQ29uZmlnIHR5cGVzICovXG5cbmV4cG9ydCB0eXBlIFJlc3VsdENhbGxiYWNrPFQ+ID0gKGVycm9yOiBFcnJvciB8IG51bGwsIHJlc3VsdDogVCkgPT4gdm9pZFxuIl0sIm1hcHBpbmdzIjoiQUFLQTs7QUFpQkEsV0FBWUEsZ0JBQWdCLDBCQUFoQkEsZ0JBQWdCO0VBQWhCQSxnQkFBZ0I7RUFBaEJBLGdCQUFnQjtFQUFBLE9BQWhCQSxnQkFBZ0I7QUFBQTtBQVc1QixXQUFZQyxlQUFlLDBCQUFmQSxlQUFlO0VBQWZBLGVBQWU7RUFBZkEsZUFBZTtFQUFBLE9BQWZBLGVBQWU7QUFBQTtBQUszQixXQUFZQyx3QkFBd0IsMEJBQXhCQSx3QkFBd0I7RUFBeEJBLHdCQUF3QjtFQUF4QkEsd0JBQXdCO0VBQUEsT0FBeEJBLHdCQUF3QjtBQUFBO0FBS3BDLFdBQVlDLGlCQUFpQiwwQkFBakJBLGlCQUFpQjtFQUFqQkEsaUJBQWlCO0VBQWpCQSxpQkFBaUI7RUFBQSxPQUFqQkEsaUJBQWlCO0FBQUE7O0FBMEY3Qjs7QUF5REEifQ==\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/internal/type.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/internal/xml-parser.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/minio/dist/esm/internal/xml-parser.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseBucketRegion: () => (/* binding */ parseBucketRegion),\n/* harmony export */   parseError: () => (/* binding */ parseError),\n/* harmony export */   parseInitiateMultipart: () => (/* binding */ parseInitiateMultipart),\n/* harmony export */   parseListBucket: () => (/* binding */ parseListBucket),\n/* harmony export */   parseListObjectsV2WithMetadata: () => (/* binding */ parseListObjectsV2WithMetadata),\n/* harmony export */   parseListParts: () => (/* binding */ parseListParts),\n/* harmony export */   parseReplicationConfig: () => (/* binding */ parseReplicationConfig),\n/* harmony export */   parseResponseError: () => (/* binding */ parseResponseError)\n/* harmony export */ });\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-xml-parser */ \"(rsc)/./node_modules/fast-xml-parser/src/fxp.js\");\n/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors.mjs */ \"(rsc)/./node_modules/minio/dist/esm/errors.mjs\");\n/* harmony import */ var _helper_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helper.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\");\n/* harmony import */ var _response_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./response.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/response.mjs\");\n\n\n\n\n// parse XML response for bucket region\nfunction parseBucketRegion(xml) {\n    // return region information\n    return (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.parseXml)(xml).LocationConstraint;\n}\nconst fxp = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__.XMLParser();\n// Parse XML and return information as Javascript types\n// parse error XML response\nfunction parseError(xml, headerInfo) {\n    let xmlErr = {};\n    const xmlObj = fxp.parse(xml);\n    if (xmlObj.Error) {\n        xmlErr = xmlObj.Error;\n    }\n    const e = new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.S3Error();\n    Object.entries(xmlErr).forEach(([key, value])=>{\n        e[key.toLowerCase()] = value;\n    });\n    Object.entries(headerInfo).forEach(([key, value])=>{\n        e[key] = value;\n    });\n    return e;\n}\n// Generates an Error object depending on http statusCode and XML body\nasync function parseResponseError(response) {\n    const statusCode = response.statusCode;\n    let code, message;\n    if (statusCode === 301) {\n        code = \"MovedPermanently\";\n        message = \"Moved Permanently\";\n    } else if (statusCode === 307) {\n        code = \"TemporaryRedirect\";\n        message = \"Are you using the correct endpoint URL?\";\n    } else if (statusCode === 403) {\n        code = \"AccessDenied\";\n        message = \"Valid and authorized credentials required\";\n    } else if (statusCode === 404) {\n        code = \"NotFound\";\n        message = \"Not Found\";\n    } else if (statusCode === 405) {\n        code = \"MethodNotAllowed\";\n        message = \"Method Not Allowed\";\n    } else if (statusCode === 501) {\n        code = \"MethodNotAllowed\";\n        message = \"Method Not Allowed\";\n    } else {\n        code = \"UnknownError\";\n        message = `${statusCode}`;\n    }\n    const headerInfo = {};\n    // A value created by S3 compatible server that uniquely identifies the request.\n    headerInfo.amzRequestid = response.headers[\"x-amz-request-id\"];\n    // A special token that helps troubleshoot API replies and issues.\n    headerInfo.amzId2 = response.headers[\"x-amz-id-2\"];\n    // Region where the bucket is located. This header is returned only\n    // in HEAD bucket and ListObjects response.\n    headerInfo.amzBucketRegion = response.headers[\"x-amz-bucket-region\"];\n    const xmlString = await (0,_response_mjs__WEBPACK_IMPORTED_MODULE_3__.readAsString)(response);\n    if (xmlString) {\n        throw parseError(xmlString, headerInfo);\n    }\n    // Message should be instantiated for each S3Errors.\n    const e = new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.S3Error(message, {\n        cause: headerInfo\n    });\n    // S3 Error code.\n    e.code = code;\n    Object.entries(headerInfo).forEach(([key, value])=>{\n        // @ts-expect-error force set error properties\n        e[key] = value;\n    });\n    throw e;\n}\n/**\n * parse XML response for list objects v2 with metadata in a bucket\n */ function parseListObjectsV2WithMetadata(xml) {\n    const result = {\n        objects: [],\n        isTruncated: false,\n        nextContinuationToken: \"\"\n    };\n    let xmlobj = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.parseXml)(xml);\n    if (!xmlobj.ListBucketResult) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.InvalidXMLError('Missing tag: \"ListBucketResult\"');\n    }\n    xmlobj = xmlobj.ListBucketResult;\n    if (xmlobj.IsTruncated) {\n        result.isTruncated = xmlobj.IsTruncated;\n    }\n    if (xmlobj.NextContinuationToken) {\n        result.nextContinuationToken = xmlobj.NextContinuationToken;\n    }\n    if (xmlobj.Contents) {\n        (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.toArray)(xmlobj.Contents).forEach((content)=>{\n            const name = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.sanitizeObjectKey)(content.Key);\n            const lastModified = new Date(content.LastModified);\n            const etag = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.sanitizeETag)(content.ETag);\n            const size = content.Size;\n            let metadata;\n            if (content.UserMetadata != null) {\n                metadata = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.toArray)(content.UserMetadata)[0];\n            } else {\n                metadata = null;\n            }\n            result.objects.push({\n                name,\n                lastModified,\n                etag,\n                size,\n                metadata\n            });\n        });\n    }\n    if (xmlobj.CommonPrefixes) {\n        (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.toArray)(xmlobj.CommonPrefixes).forEach((commonPrefix)=>{\n            result.objects.push({\n                prefix: (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.sanitizeObjectKey)((0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.toArray)(commonPrefix.Prefix)[0]),\n                size: 0\n            });\n        });\n    }\n    return result;\n}\n// parse XML response for list parts of an in progress multipart upload\nfunction parseListParts(xml) {\n    let xmlobj = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.parseXml)(xml);\n    const result = {\n        isTruncated: false,\n        parts: [],\n        marker: 0\n    };\n    if (!xmlobj.ListPartsResult) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.InvalidXMLError('Missing tag: \"ListPartsResult\"');\n    }\n    xmlobj = xmlobj.ListPartsResult;\n    if (xmlobj.IsTruncated) {\n        result.isTruncated = xmlobj.IsTruncated;\n    }\n    if (xmlobj.NextPartNumberMarker) {\n        result.marker = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.toArray)(xmlobj.NextPartNumberMarker)[0] || \"\";\n    }\n    if (xmlobj.Part) {\n        (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.toArray)(xmlobj.Part).forEach((p)=>{\n            const part = parseInt((0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.toArray)(p.PartNumber)[0], 10);\n            const lastModified = new Date(p.LastModified);\n            const etag = p.ETag.replace(/^\"/g, \"\").replace(/\"$/g, \"\").replace(/^&quot;/g, \"\").replace(/&quot;$/g, \"\").replace(/^&#34;/g, \"\").replace(/&#34;$/g, \"\");\n            result.parts.push({\n                part,\n                lastModified,\n                etag,\n                size: parseInt(p.Size, 10)\n            });\n        });\n    }\n    return result;\n}\nfunction parseListBucket(xml) {\n    let result = [];\n    const parsedXmlRes = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.parseXml)(xml);\n    if (!parsedXmlRes.ListAllMyBucketsResult) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.InvalidXMLError('Missing tag: \"ListAllMyBucketsResult\"');\n    }\n    const { ListAllMyBucketsResult: { Buckets = {} } = {} } = parsedXmlRes;\n    if (Buckets.Bucket) {\n        result = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.toArray)(Buckets.Bucket).map((bucket = {})=>{\n            const { Name: bucketName, CreationDate } = bucket;\n            const creationDate = new Date(CreationDate);\n            return {\n                name: bucketName,\n                creationDate: creationDate\n            };\n        });\n    }\n    return result;\n}\nfunction parseInitiateMultipart(xml) {\n    let xmlobj = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.parseXml)(xml);\n    if (!xmlobj.InitiateMultipartUploadResult) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.InvalidXMLError('Missing tag: \"InitiateMultipartUploadResult\"');\n    }\n    xmlobj = xmlobj.InitiateMultipartUploadResult;\n    if (xmlobj.UploadId) {\n        return xmlobj.UploadId;\n    }\n    throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.InvalidXMLError('Missing tag: \"UploadId\"');\n}\nfunction parseReplicationConfig(xml) {\n    const xmlObj = (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.parseXml)(xml);\n    const { Role, Rule } = xmlObj.ReplicationConfiguration;\n    return {\n        ReplicationConfiguration: {\n            role: Role,\n            rules: (0,_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.toArray)(Rule)\n        }\n    };\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/internal/xml-parser.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/minio.mjs":
/*!***********************************************!*\
  !*** ./node_modules/minio/dist/esm/minio.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ Client),\n/* harmony export */   CloudFunctionConfig: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.CloudFunctionConfig),\n/* harmony export */   CopyConditions: () => (/* reexport safe */ _internal_copy_conditions_mjs__WEBPACK_IMPORTED_MODULE_14__.CopyConditions),\n/* harmony export */   CopyDestinationOptions: () => (/* reexport safe */ _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.CopyDestinationOptions),\n/* harmony export */   CopySourceOptions: () => (/* reexport safe */ _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.CopySourceOptions),\n/* harmony export */   DEFAULT_REGION: () => (/* reexport safe */ _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_REGION),\n/* harmony export */   ENCRYPTION_TYPES: () => (/* reexport safe */ _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.ENCRYPTION_TYPES),\n/* harmony export */   LEGAL_HOLD_STATUS: () => (/* reexport safe */ _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.LEGAL_HOLD_STATUS),\n/* harmony export */   NotificationConfig: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.NotificationConfig),\n/* harmony export */   NotificationPoller: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.NotificationPoller),\n/* harmony export */   ObjectCreatedAll: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.ObjectCreatedAll),\n/* harmony export */   ObjectCreatedCompleteMultipartUpload: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.ObjectCreatedCompleteMultipartUpload),\n/* harmony export */   ObjectCreatedCopy: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.ObjectCreatedCopy),\n/* harmony export */   ObjectCreatedPost: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.ObjectCreatedPost),\n/* harmony export */   ObjectCreatedPut: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.ObjectCreatedPut),\n/* harmony export */   ObjectReducedRedundancyLostObject: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.ObjectReducedRedundancyLostObject),\n/* harmony export */   ObjectRemovedAll: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.ObjectRemovedAll),\n/* harmony export */   ObjectRemovedDelete: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.ObjectRemovedDelete),\n/* harmony export */   ObjectRemovedDeleteMarkerCreated: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.ObjectRemovedDeleteMarkerCreated),\n/* harmony export */   PostPolicy: () => (/* reexport safe */ _internal_post_policy_mjs__WEBPACK_IMPORTED_MODULE_16__.PostPolicy),\n/* harmony export */   QueueConfig: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.QueueConfig),\n/* harmony export */   RETENTION_MODES: () => (/* reexport safe */ _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.RETENTION_MODES),\n/* harmony export */   RETENTION_VALIDITY_UNITS: () => (/* reexport safe */ _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.RETENTION_VALIDITY_UNITS),\n/* harmony export */   SelectResults: () => (/* reexport safe */ _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.SelectResults),\n/* harmony export */   TopicConfig: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.TopicConfig),\n/* harmony export */   buildARN: () => (/* reexport safe */ _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.buildARN),\n/* harmony export */   removeDirAndFiles: () => (/* reexport safe */ _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.removeDirAndFiles)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var async__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! async */ \"(rsc)/./node_modules/async/dist/async.mjs\");\n/* harmony import */ var block_stream2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! block-stream2 */ \"(rsc)/./node_modules/block-stream2/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash */ \"lodash\");\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! query-string */ \"(rsc)/./node_modules/query-string/index.js\");\n/* harmony import */ var web_encoding__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! web-encoding */ \"(rsc)/./node_modules/web-encoding/src/lib.mjs\");\n/* harmony import */ var xml__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! xml */ \"(rsc)/./node_modules/xml/lib/xml.js\");\n/* harmony import */ var xml2js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\n/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./errors.mjs */ \"(rsc)/./node_modules/minio/dist/esm/errors.mjs\");\n/* harmony import */ var _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers.mjs */ \"(rsc)/./node_modules/minio/dist/esm/helpers.mjs\");\n/* harmony import */ var _internal_callbackify_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal/callbackify.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/callbackify.mjs\");\n/* harmony import */ var _internal_client_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./internal/client.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/client.mjs\");\n/* harmony import */ var _internal_copy_conditions_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./internal/copy-conditions.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/copy-conditions.mjs\");\n/* harmony import */ var _internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./internal/helper.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\");\n/* harmony import */ var _internal_post_policy_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./internal/post-policy.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/post-policy.mjs\");\n/* harmony import */ var _internal_type_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./internal/type.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/type.mjs\");\n/* harmony import */ var _notification_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./notification.mjs */ \"(rsc)/./node_modules/minio/dist/esm/notification.mjs\");\n/* harmony import */ var _object_uploader_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./object-uploader.mjs */ \"(rsc)/./node_modules/minio/dist/esm/object-uploader.mjs\");\n/* harmony import */ var _promisify_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./promisify.mjs */ \"(rsc)/./node_modules/minio/dist/esm/promisify.mjs\");\n/* harmony import */ var _signing_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./signing.mjs */ \"(rsc)/./node_modules/minio/dist/esm/signing.mjs\");\n/* harmony import */ var _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./transformers.mjs */ \"(rsc)/./node_modules/minio/dist/esm/transformers.mjs\");\n/* harmony import */ var _xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./xml-parsers.mjs */ \"(rsc)/./node_modules/minio/dist/esm/xml-parsers.mjs\");\n/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Client extends _internal_client_mjs__WEBPACK_IMPORTED_MODULE_13__.TypedClient {\n    // Set application specific information.\n    //\n    // Generates User-Agent in the following style.\n    //\n    //       MinIO (OS; ARCH) LIB/VER APP/VER\n    //\n    // __Arguments__\n    // * `appName` _string_ - Application name.\n    // * `appVersion` _string_ - Application version.\n    setAppInfo(appName, appVersion) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(appName)) {\n            throw new TypeError(`Invalid appName: ${appName}`);\n        }\n        if (appName.trim() === \"\") {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"Input appName cannot be empty.\");\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(appVersion)) {\n            throw new TypeError(`Invalid appVersion: ${appVersion}`);\n        }\n        if (appVersion.trim() === \"\") {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"Input appVersion cannot be empty.\");\n        }\n        this.userAgent = `${this.userAgent} ${appName}/${appVersion}`;\n    }\n    // Calculate part size given the object size. Part size will be atleast this.partSize\n    calculatePartSize(size) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isNumber)(size)) {\n            throw new TypeError('size should be of type \"number\"');\n        }\n        if (size > this.maxObjectSize) {\n            throw new TypeError(`size should not be more than ${this.maxObjectSize}`);\n        }\n        if (this.overRidePartSize) {\n            return this.partSize;\n        }\n        var partSize = this.partSize;\n        for(;;){\n            // while(true) {...} throws linting error.\n            // If partSize is big enough to accomodate the object size, then use it.\n            if (partSize * 10000 > size) {\n                return partSize;\n            }\n            // Try part sizes as 64MB, 80MB, 96MB etc.\n            partSize += 16 * 1024 * 1024;\n        }\n    }\n    // Creates the bucket `bucketName`.\n    //\n    // __Arguments__\n    // * `bucketName` _string_ - Name of the bucket\n    // * `region` _string_ - region valid values are _us-west-1_, _us-west-2_,  _eu-west-1_, _eu-central-1_, _ap-southeast-1_, _ap-northeast-1_, _ap-southeast-2_, _sa-east-1_.\n    // * `makeOpts` _object_ - Options to create a bucket. e.g {ObjectLocking:true} (Optional)\n    // * `callback(err)` _function_ - callback function with `err` as the error argument. `err` is null if the bucket is successfully created.\n    makeBucket(bucketName, region, makeOpts = {}, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        // Backward Compatibility\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(region)) {\n            cb = makeOpts;\n            makeOpts = region;\n            region = \"\";\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(region)) {\n            cb = region;\n            region = \"\";\n            makeOpts = {};\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(makeOpts)) {\n            cb = makeOpts;\n            makeOpts = {};\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(region)) {\n            throw new TypeError('region should be of type \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(makeOpts)) {\n            throw new TypeError('makeOpts should be of type \"object\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        var payload = \"\";\n        // Region already set in constructor, validate if\n        // caller requested bucket location is same.\n        if (region && this.region) {\n            if (region !== this.region) {\n                throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(`Configured region ${this.region}, requested ${region}`);\n            }\n        }\n        // sending makeBucket request with XML containing 'us-east-1' fails. For\n        // default region server expects the request without body\n        if (region && region !== _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_REGION) {\n            var createBucketConfiguration = [];\n            createBucketConfiguration.push({\n                _attr: {\n                    xmlns: \"http://s3.amazonaws.com/doc/2006-03-01/\"\n                }\n            });\n            createBucketConfiguration.push({\n                LocationConstraint: region\n            });\n            var payloadObject = {\n                CreateBucketConfiguration: createBucketConfiguration\n            };\n            payload = xml__WEBPACK_IMPORTED_MODULE_8__(payloadObject);\n        }\n        var method = \"PUT\";\n        var headers = {};\n        if (makeOpts.ObjectLocking) {\n            headers[\"x-amz-bucket-object-lock-enabled\"] = true;\n        }\n        if (!region) {\n            region = _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_REGION;\n        }\n        const processWithRetry = (err)=>{\n            if (err && (region === \"\" || region === _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_REGION)) {\n                if (err.code === \"AuthorizationHeaderMalformed\" && err.region !== \"\") {\n                    // Retry with region returned as part of error\n                    this.makeRequest({\n                        method,\n                        bucketName,\n                        headers\n                    }, payload, [\n                        200\n                    ], err.region, false, cb);\n                } else {\n                    return cb && cb(err);\n                }\n            }\n            return cb && cb(err);\n        };\n        this.makeRequest({\n            method,\n            bucketName,\n            headers\n        }, payload, [\n            200\n        ], region, false, processWithRetry);\n    }\n    // Returns a stream that emits objects that are partially uploaded.\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `prefix` _string_: prefix of the object names that are partially uploaded (optional, default `''`)\n    // * `recursive` _bool_: directory style listing when false, recursive listing when true (optional, default `false`)\n    //\n    // __Return Value__\n    // * `stream` _Stream_ : emits objects of the format:\n    //   * `object.key` _string_: name of the object\n    //   * `object.uploadId` _string_: upload ID of the object\n    //   * `object.size` _Integer_: size of the partially uploaded object\n    listIncompleteUploads(bucket, prefix, recursive) {\n        if (prefix === undefined) {\n            prefix = \"\";\n        }\n        if (recursive === undefined) {\n            recursive = false;\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucket)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucket);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidPrefix)(prefix)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidPrefixError(`Invalid prefix : ${prefix}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isBoolean)(recursive)) {\n            throw new TypeError('recursive should be of type \"boolean\"');\n        }\n        var delimiter = recursive ? \"\" : \"/\";\n        var keyMarker = \"\";\n        var uploadIdMarker = \"\";\n        var uploads = [];\n        var ended = false;\n        var readStream = stream__WEBPACK_IMPORTED_MODULE_2__.Readable({\n            objectMode: true\n        });\n        readStream._read = ()=>{\n            // push one upload info per _read()\n            if (uploads.length) {\n                return readStream.push(uploads.shift());\n            }\n            if (ended) {\n                return readStream.push(null);\n            }\n            this.listIncompleteUploadsQuery(bucket, prefix, keyMarker, uploadIdMarker, delimiter).on(\"error\", (e)=>readStream.emit(\"error\", e)).on(\"data\", (result)=>{\n                result.prefixes.forEach((prefix)=>uploads.push(prefix));\n                async__WEBPACK_IMPORTED_MODULE_3__[\"default\"].eachSeries(result.uploads, (upload, cb)=>{\n                    // for each incomplete upload add the sizes of its uploaded parts\n                    this.listParts(bucket, upload.key, upload.uploadId).then((parts)=>{\n                        upload.size = parts.reduce((acc, item)=>acc + item.size, 0);\n                        uploads.push(upload);\n                        cb();\n                    }, cb);\n                }, (err)=>{\n                    if (err) {\n                        readStream.emit(\"error\", err);\n                        return;\n                    }\n                    if (result.isTruncated) {\n                        keyMarker = result.nextKeyMarker;\n                        uploadIdMarker = result.nextUploadIdMarker;\n                    } else {\n                        ended = true;\n                    }\n                    readStream._read();\n                });\n            });\n        };\n        return readStream;\n    }\n    // To check if a bucket already exists.\n    //\n    // __Arguments__\n    // * `bucketName` _string_ : name of the bucket\n    // * `callback(err)` _function_ : `err` is `null` if the bucket exists\n    bucketExists(bucketName, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        var method = \"HEAD\";\n        this.makeRequest({\n            method,\n            bucketName\n        }, \"\", [\n            200\n        ], \"\", false, (err)=>{\n            if (err) {\n                if (err.code == \"NoSuchBucket\" || err.code == \"NotFound\") {\n                    return cb(null, false);\n                }\n                return cb(err);\n            }\n            cb(null, true);\n        });\n    }\n    // Remove the partially uploaded object.\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `objectName` _string_: name of the object\n    // * `callback(err)` _function_: callback function is called with non `null` value in case of error\n    removeIncompleteUpload(bucketName, objectName, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.IsValidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        var removeUploadId;\n        async__WEBPACK_IMPORTED_MODULE_3__[\"default\"].during((cb)=>{\n            this.findUploadId(bucketName, objectName, (e, uploadId)=>{\n                if (e) {\n                    return cb(e);\n                }\n                removeUploadId = uploadId;\n                cb(null, uploadId);\n            });\n        }, (cb)=>{\n            var method = \"DELETE\";\n            var query = `uploadId=${removeUploadId}`;\n            this.makeRequest({\n                method,\n                bucketName,\n                objectName,\n                query\n            }, \"\", [\n                204\n            ], \"\", false, (e)=>cb(e));\n        }, cb);\n    }\n    // Callback is called with `error` in case of error or `null` in case of success\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `objectName` _string_: name of the object\n    // * `filePath` _string_: path to which the object data will be written to\n    // * `getOpts` _object_: Version of the object in the form `{versionId:'my-uuid'}`. Default is `{}`. (optional)\n    // * `callback(err)` _function_: callback is called with `err` in case of error.\n    fGetObject(bucketName, objectName, filePath, getOpts = {}, cb) {\n        // Input validation.\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(filePath)) {\n            throw new TypeError('filePath should be of type \"string\"');\n        }\n        // Backward Compatibility\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(getOpts)) {\n            cb = getOpts;\n            getOpts = {};\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        // Internal data.\n        var partFile;\n        var partFileStream;\n        var objStat;\n        // Rename wrapper.\n        var rename = (err)=>{\n            if (err) {\n                return cb(err);\n            }\n            fs__WEBPACK_IMPORTED_MODULE_0__.rename(partFile, filePath, cb);\n        };\n        async__WEBPACK_IMPORTED_MODULE_3__[\"default\"].waterfall([\n            (cb)=>this.statObject(bucketName, objectName, getOpts, cb),\n            (result, cb)=>{\n                objStat = result;\n                // Create any missing top level directories.\n                fs__WEBPACK_IMPORTED_MODULE_0__.mkdir(path__WEBPACK_IMPORTED_MODULE_1__.dirname(filePath), {\n                    recursive: true\n                }, (err)=>cb(err));\n            },\n            (cb)=>{\n                partFile = `${filePath}.${objStat.etag}.part.minio`;\n                fs__WEBPACK_IMPORTED_MODULE_0__.stat(partFile, (e, stats)=>{\n                    var offset = 0;\n                    if (e) {\n                        partFileStream = fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream(partFile, {\n                            flags: \"w\"\n                        });\n                    } else {\n                        if (objStat.size === stats.size) {\n                            return rename();\n                        }\n                        offset = stats.size;\n                        partFileStream = fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream(partFile, {\n                            flags: \"a\"\n                        });\n                    }\n                    this.getPartialObject(bucketName, objectName, offset, 0, getOpts, cb);\n                });\n            },\n            (downloadStream, cb)=>{\n                (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(downloadStream, partFileStream).on(\"error\", (e)=>cb(e)).on(\"finish\", cb);\n            },\n            (cb)=>fs__WEBPACK_IMPORTED_MODULE_0__.stat(partFile, cb),\n            (stats, cb)=>{\n                if (stats.size === objStat.size) {\n                    return cb();\n                }\n                cb(new Error(\"Size mismatch between downloaded file and the object\"));\n            }\n        ], rename);\n    }\n    // Callback is called with readable stream of the object content.\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `objectName` _string_: name of the object\n    // * `getOpts` _object_: Version of the object in the form `{versionId:'my-uuid'}`. Default is `{}`. (optional)\n    // * `callback(err, stream)` _function_: callback is called with `err` in case of error. `stream` is the object content stream\n    getObject(bucketName, objectName, getOpts = {}, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        // Backward Compatibility\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(getOpts)) {\n            cb = getOpts;\n            getOpts = {};\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        this.getPartialObject(bucketName, objectName, 0, 0, getOpts, cb);\n    }\n    // Callback is called with readable stream of the partial object content.\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `objectName` _string_: name of the object\n    // * `offset` _number_: offset of the object from where the stream will start\n    // * `length` _number_: length of the object that will be read in the stream (optional, if not specified we read the rest of the file from the offset)\n    // * `getOpts` _object_: Version of the object in the form `{versionId:'my-uuid'}`. Default is `{}`. (optional)\n    // * `callback(err, stream)` _function_: callback is called with `err` in case of error. `stream` is the object content stream\n    getPartialObject(bucketName, objectName, offset, length, getOpts = {}, cb) {\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(length)) {\n            cb = length;\n            length = 0;\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isNumber)(offset)) {\n            throw new TypeError('offset should be of type \"number\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isNumber)(length)) {\n            throw new TypeError('length should be of type \"number\"');\n        }\n        // Backward Compatibility\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(getOpts)) {\n            cb = getOpts;\n            getOpts = {};\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        var range = \"\";\n        if (offset || length) {\n            if (offset) {\n                range = `bytes=${+offset}-`;\n            } else {\n                range = \"bytes=0-\";\n                offset = 0;\n            }\n            if (length) {\n                range += `${+length + offset - 1}`;\n            }\n        }\n        var headers = {};\n        if (range !== \"\") {\n            headers.range = range;\n        }\n        var expectedStatusCodes = [\n            200\n        ];\n        if (range) {\n            expectedStatusCodes.push(206);\n        }\n        var method = \"GET\";\n        var query = query_string__WEBPACK_IMPORTED_MODULE_6__.stringify(getOpts);\n        this.makeRequest({\n            method,\n            bucketName,\n            objectName,\n            headers,\n            query\n        }, \"\", expectedStatusCodes, \"\", true, cb);\n    }\n    // Uploads the object using contents from a file\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `objectName` _string_: name of the object\n    // * `filePath` _string_: file path of the file to be uploaded\n    // * `metaData` _Javascript Object_: metaData assosciated with the object\n    // * `callback(err, objInfo)` _function_: non null `err` indicates error, `objInfo` _object_ which contains versionId and etag.\n    fPutObject(bucketName, objectName, filePath, metaData, callback) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(filePath)) {\n            throw new TypeError('filePath should be of type \"string\"');\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(metaData)) {\n            callback = metaData;\n            metaData = {}; // Set metaData empty if no metaData provided.\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(metaData)) {\n            throw new TypeError('metaData should be of type \"object\"');\n        }\n        // Inserts correct `content-type` attribute based on metaData and filePath\n        metaData = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.insertContentType)(metaData, filePath);\n        fs__WEBPACK_IMPORTED_MODULE_0__.lstat(filePath, (err, stat)=>{\n            if (err) {\n                return callback(err);\n            }\n            return this.putObject(bucketName, objectName, fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream(filePath), stat.size, metaData, callback);\n        });\n    }\n    // Uploads the object.\n    //\n    // Uploading a stream\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `objectName` _string_: name of the object\n    // * `stream` _Stream_: Readable stream\n    // * `size` _number_: size of the object (optional)\n    // * `callback(err, etag)` _function_: non null `err` indicates error, `etag` _string_ is the etag of the object uploaded.\n    //\n    // Uploading \"Buffer\" or \"string\"\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `objectName` _string_: name of the object\n    // * `string or Buffer` _string_ or _Buffer_: string or buffer\n    // * `callback(err, objInfo)` _function_: `err` is `null` in case of success and `info` will have the following object details:\n    //   * `etag` _string_: etag of the object\n    //   * `versionId` _string_: versionId of the object\n    putObject(bucketName, objectName, stream, size, metaData, callback) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        // We'll need to shift arguments to the left because of size and metaData.\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(size)) {\n            callback = size;\n            metaData = {};\n        } else if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(metaData)) {\n            callback = metaData;\n            metaData = {};\n        }\n        // We'll need to shift arguments to the left because of metaData\n        // and size being optional.\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(size)) {\n            metaData = size;\n        }\n        // Ensures Metadata has appropriate prefix for A3 API\n        metaData = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.prependXAMZMeta)(metaData);\n        if (typeof stream === \"string\" || stream instanceof Buffer) {\n            // Adapts the non-stream interface into a stream.\n            size = stream.length;\n            stream = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.readableStream)(stream);\n        } else if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isReadableStream)(stream)) {\n            throw new TypeError('third argument should be of type \"stream.Readable\" or \"Buffer\" or \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(callback)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isNumber)(size) && size < 0) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(`size cannot be negative, given size: ${size}`);\n        }\n        // Get the part size and forward that to the BlockStream. Default to the\n        // largest block size possible if necessary.\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isNumber)(size)) {\n            size = this.maxObjectSize;\n        }\n        size = this.calculatePartSize(size);\n        // s3 requires that all non-end chunks be at least `this.partSize`,\n        // so we chunk the stream until we hit either that size or the end before\n        // we flush it to s3.\n        let chunker = new block_stream2__WEBPACK_IMPORTED_MODULE_4__({\n            size,\n            zeroPadding: false\n        });\n        // This is a Writable stream that can be written to in order to upload\n        // to the specified bucket and object automatically.\n        let uploader = new _object_uploader_mjs__WEBPACK_IMPORTED_MODULE_19__.ObjectUploader(this, bucketName, objectName, size, metaData, callback);\n        // stream => chunker => uploader\n        (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(stream, chunker, uploader);\n    }\n    // Copy the object.\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `objectName` _string_: name of the object\n    // * `srcObject` _string_: path of the source object to be copied\n    // * `conditions` _CopyConditions_: copy conditions that needs to be satisfied (optional, default `null`)\n    // * `callback(err, {etag, lastModified})` _function_: non null `err` indicates error, `etag` _string_ and `listModifed` _Date_ are respectively the etag and the last modified date of the newly copied object\n    copyObjectV1(arg1, arg2, arg3, arg4, arg5) {\n        var bucketName = arg1;\n        var objectName = arg2;\n        var srcObject = arg3;\n        var conditions, cb;\n        if (typeof arg4 == \"function\" && arg5 === undefined) {\n            conditions = null;\n            cb = arg4;\n        } else {\n            conditions = arg4;\n            cb = arg5;\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(srcObject)) {\n            throw new TypeError('srcObject should be of type \"string\"');\n        }\n        if (srcObject === \"\") {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidPrefixError(`Empty source prefix`);\n        }\n        if (conditions !== null && !(conditions instanceof _internal_copy_conditions_mjs__WEBPACK_IMPORTED_MODULE_14__.CopyConditions)) {\n            throw new TypeError('conditions should be of type \"CopyConditions\"');\n        }\n        var headers = {};\n        headers[\"x-amz-copy-source\"] = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.uriResourceEscape)(srcObject);\n        if (conditions !== null) {\n            if (conditions.modified !== \"\") {\n                headers[\"x-amz-copy-source-if-modified-since\"] = conditions.modified;\n            }\n            if (conditions.unmodified !== \"\") {\n                headers[\"x-amz-copy-source-if-unmodified-since\"] = conditions.unmodified;\n            }\n            if (conditions.matchETag !== \"\") {\n                headers[\"x-amz-copy-source-if-match\"] = conditions.matchETag;\n            }\n            if (conditions.matchEtagExcept !== \"\") {\n                headers[\"x-amz-copy-source-if-none-match\"] = conditions.matchETagExcept;\n            }\n        }\n        var method = \"PUT\";\n        this.makeRequest({\n            method,\n            bucketName,\n            objectName,\n            headers\n        }, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return cb(e);\n            }\n            var transformer = _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.getCopyObjectTransformer();\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, transformer).on(\"error\", (e)=>cb(e)).on(\"data\", (data)=>cb(null, data));\n        });\n    }\n    /**\n   * Internal Method to perform copy of an object.\n   * @param sourceConfig __object__   instance of CopySourceOptions @link ./helpers/CopySourceOptions\n   * @param destConfig  __object__   instance of CopyDestinationOptions @link ./helpers/CopyDestinationOptions\n   * @param cb __function__ called with null if there is an error\n   * @returns Promise if no callack is passed.\n   */ copyObjectV2(sourceConfig, destConfig, cb) {\n        if (!(sourceConfig instanceof _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.CopySourceOptions)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"sourceConfig should of type CopySourceOptions \");\n        }\n        if (!(destConfig instanceof _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.CopyDestinationOptions)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"destConfig should of type CopyDestinationOptions \");\n        }\n        if (!destConfig.validate()) {\n            return false;\n        }\n        if (!destConfig.validate()) {\n            return false;\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        const headers = Object.assign({}, sourceConfig.getHeaders(), destConfig.getHeaders());\n        const bucketName = destConfig.Bucket;\n        const objectName = destConfig.Object;\n        const method = \"PUT\";\n        this.makeRequest({\n            method,\n            bucketName,\n            objectName,\n            headers\n        }, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return cb(e);\n            }\n            const transformer = _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.getCopyObjectTransformer();\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, transformer).on(\"error\", (e)=>cb(e)).on(\"data\", (data)=>{\n                const resHeaders = response.headers;\n                const copyObjResponse = {\n                    Bucket: destConfig.Bucket,\n                    Key: destConfig.Object,\n                    LastModified: data.LastModified,\n                    MetaData: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.extractMetadata)(resHeaders),\n                    VersionId: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.getVersionId)(resHeaders),\n                    SourceVersionId: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.getSourceVersionId)(resHeaders),\n                    Etag: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.sanitizeETag)(resHeaders.etag),\n                    Size: +resHeaders[\"content-length\"]\n                };\n                return cb(null, copyObjResponse);\n            });\n        });\n    }\n    // Backward compatibility for Copy Object API.\n    copyObject(...allArgs) {\n        if (allArgs[0] instanceof _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.CopySourceOptions && allArgs[1] instanceof _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.CopyDestinationOptions) {\n            return this.copyObjectV2(...arguments);\n        }\n        return this.copyObjectV1(...arguments);\n    }\n    // list a batch of objects\n    listObjectsQuery(bucketName, prefix, marker, listQueryOpts = {}) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(prefix)) {\n            throw new TypeError('prefix should be of type \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(marker)) {\n            throw new TypeError('marker should be of type \"string\"');\n        }\n        let { Delimiter, MaxKeys, IncludeVersion } = listQueryOpts;\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(listQueryOpts)) {\n            throw new TypeError('listQueryOpts should be of type \"object\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(Delimiter)) {\n            throw new TypeError('Delimiter should be of type \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isNumber)(MaxKeys)) {\n            throw new TypeError('MaxKeys should be of type \"number\"');\n        }\n        const queries = [];\n        // escape every value in query string, except maxKeys\n        queries.push(`prefix=${(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.uriEscape)(prefix)}`);\n        queries.push(`delimiter=${(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.uriEscape)(Delimiter)}`);\n        queries.push(`encoding-type=url`);\n        if (IncludeVersion) {\n            queries.push(`versions`);\n        }\n        if (marker) {\n            marker = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.uriEscape)(marker);\n            if (IncludeVersion) {\n                queries.push(`key-marker=${marker}`);\n            } else {\n                queries.push(`marker=${marker}`);\n            }\n        }\n        // no need to escape maxKeys\n        if (MaxKeys) {\n            if (MaxKeys >= 1000) {\n                MaxKeys = 1000;\n            }\n            queries.push(`max-keys=${MaxKeys}`);\n        }\n        queries.sort();\n        var query = \"\";\n        if (queries.length > 0) {\n            query = `${queries.join(\"&\")}`;\n        }\n        var method = \"GET\";\n        var transformer = _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.getListObjectsTransformer();\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return transformer.emit(\"error\", e);\n            }\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, transformer);\n        });\n        return transformer;\n    }\n    // List the objects in the bucket.\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `prefix` _string_: the prefix of the objects that should be listed (optional, default `''`)\n    // * `recursive` _bool_: `true` indicates recursive style listing and `false` indicates directory style listing delimited by '/'. (optional, default `false`)\n    // * `listOpts _object_: query params to list object with below keys\n    // *    listOpts.MaxKeys _int_ maximum number of keys to return\n    // *    listOpts.IncludeVersion  _bool_ true|false to include versions.\n    // __Return Value__\n    // * `stream` _Stream_: stream emitting the objects in the bucket, the object is of the format:\n    // * `obj.name` _string_: name of the object\n    // * `obj.prefix` _string_: name of the object prefix\n    // * `obj.size` _number_: size of the object\n    // * `obj.etag` _string_: etag of the object\n    // * `obj.lastModified` _Date_: modified time stamp\n    // * `obj.isDeleteMarker` _boolean_: true if it is a delete marker\n    // * `obj.versionId` _string_: versionId of the object\n    listObjects(bucketName, prefix, recursive, listOpts = {}) {\n        if (prefix === undefined) {\n            prefix = \"\";\n        }\n        if (recursive === undefined) {\n            recursive = false;\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidPrefix)(prefix)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidPrefixError(`Invalid prefix : ${prefix}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(prefix)) {\n            throw new TypeError('prefix should be of type \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isBoolean)(recursive)) {\n            throw new TypeError('recursive should be of type \"boolean\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(listOpts)) {\n            throw new TypeError('listOpts should be of type \"object\"');\n        }\n        var marker = \"\";\n        const listQueryOpts = {\n            Delimiter: recursive ? \"\" : \"/\",\n            // if recursive is false set delimiter to '/'\n            MaxKeys: 1000,\n            IncludeVersion: listOpts.IncludeVersion\n        };\n        var objects = [];\n        var ended = false;\n        var readStream = stream__WEBPACK_IMPORTED_MODULE_2__.Readable({\n            objectMode: true\n        });\n        readStream._read = ()=>{\n            // push one object per _read()\n            if (objects.length) {\n                readStream.push(objects.shift());\n                return;\n            }\n            if (ended) {\n                return readStream.push(null);\n            }\n            // if there are no objects to push do query for the next batch of objects\n            this.listObjectsQuery(bucketName, prefix, marker, listQueryOpts).on(\"error\", (e)=>readStream.emit(\"error\", e)).on(\"data\", (result)=>{\n                if (result.isTruncated) {\n                    marker = result.nextMarker || result.versionIdMarker;\n                } else {\n                    ended = true;\n                }\n                objects = result.objects;\n                readStream._read();\n            });\n        };\n        return readStream;\n    }\n    // listObjectsV2Query - (List Objects V2) - List some or all (up to 1000) of the objects in a bucket.\n    //\n    // You can use the request parameters as selection criteria to return a subset of the objects in a bucket.\n    // request parameters :-\n    // * `bucketName` _string_: name of the bucket\n    // * `prefix` _string_: Limits the response to keys that begin with the specified prefix.\n    // * `continuation-token` _string_: Used to continue iterating over a set of objects.\n    // * `delimiter` _string_: A delimiter is a character you use to group keys.\n    // * `max-keys` _number_: Sets the maximum number of keys returned in the response body.\n    // * `start-after` _string_: Specifies the key to start after when listing objects in a bucket.\n    listObjectsV2Query(bucketName, prefix, continuationToken, delimiter, maxKeys, startAfter) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(prefix)) {\n            throw new TypeError('prefix should be of type \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(continuationToken)) {\n            throw new TypeError('continuationToken should be of type \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(delimiter)) {\n            throw new TypeError('delimiter should be of type \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isNumber)(maxKeys)) {\n            throw new TypeError('maxKeys should be of type \"number\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(startAfter)) {\n            throw new TypeError('startAfter should be of type \"string\"');\n        }\n        var queries = [];\n        // Call for listing objects v2 API\n        queries.push(`list-type=2`);\n        queries.push(`encoding-type=url`);\n        // escape every value in query string, except maxKeys\n        queries.push(`prefix=${(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.uriEscape)(prefix)}`);\n        queries.push(`delimiter=${(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.uriEscape)(delimiter)}`);\n        if (continuationToken) {\n            continuationToken = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.uriEscape)(continuationToken);\n            queries.push(`continuation-token=${continuationToken}`);\n        }\n        // Set start-after\n        if (startAfter) {\n            startAfter = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.uriEscape)(startAfter);\n            queries.push(`start-after=${startAfter}`);\n        }\n        // no need to escape maxKeys\n        if (maxKeys) {\n            if (maxKeys >= 1000) {\n                maxKeys = 1000;\n            }\n            queries.push(`max-keys=${maxKeys}`);\n        }\n        queries.sort();\n        var query = \"\";\n        if (queries.length > 0) {\n            query = `${queries.join(\"&\")}`;\n        }\n        var method = \"GET\";\n        var transformer = _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.getListObjectsV2Transformer();\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return transformer.emit(\"error\", e);\n            }\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, transformer);\n        });\n        return transformer;\n    }\n    // List the objects in the bucket using S3 ListObjects V2\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `prefix` _string_: the prefix of the objects that should be listed (optional, default `''`)\n    // * `recursive` _bool_: `true` indicates recursive style listing and `false` indicates directory style listing delimited by '/'. (optional, default `false`)\n    // * `startAfter` _string_: Specifies the key to start after when listing objects in a bucket. (optional, default `''`)\n    //\n    // __Return Value__\n    // * `stream` _Stream_: stream emitting the objects in the bucket, the object is of the format:\n    //   * `obj.name` _string_: name of the object\n    //   * `obj.prefix` _string_: name of the object prefix\n    //   * `obj.size` _number_: size of the object\n    //   * `obj.etag` _string_: etag of the object\n    //   * `obj.lastModified` _Date_: modified time stamp\n    listObjectsV2(bucketName, prefix, recursive, startAfter) {\n        if (prefix === undefined) {\n            prefix = \"\";\n        }\n        if (recursive === undefined) {\n            recursive = false;\n        }\n        if (startAfter === undefined) {\n            startAfter = \"\";\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidPrefix)(prefix)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidPrefixError(`Invalid prefix : ${prefix}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(prefix)) {\n            throw new TypeError('prefix should be of type \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isBoolean)(recursive)) {\n            throw new TypeError('recursive should be of type \"boolean\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(startAfter)) {\n            throw new TypeError('startAfter should be of type \"string\"');\n        }\n        // if recursive is false set delimiter to '/'\n        var delimiter = recursive ? \"\" : \"/\";\n        var continuationToken = \"\";\n        var objects = [];\n        var ended = false;\n        var readStream = stream__WEBPACK_IMPORTED_MODULE_2__.Readable({\n            objectMode: true\n        });\n        readStream._read = ()=>{\n            // push one object per _read()\n            if (objects.length) {\n                readStream.push(objects.shift());\n                return;\n            }\n            if (ended) {\n                return readStream.push(null);\n            }\n            // if there are no objects to push do query for the next batch of objects\n            this.listObjectsV2Query(bucketName, prefix, continuationToken, delimiter, 1000, startAfter).on(\"error\", (e)=>readStream.emit(\"error\", e)).on(\"data\", (result)=>{\n                if (result.isTruncated) {\n                    continuationToken = result.nextContinuationToken;\n                } else {\n                    ended = true;\n                }\n                objects = result.objects;\n                readStream._read();\n            });\n        };\n        return readStream;\n    }\n    // Remove all the objects residing in the objectsList.\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `objectsList` _array_: array of objects of one of the following:\n    // *         List of Object names as array of strings which are object keys:  ['objectname1','objectname2']\n    // *         List of Object name and versionId as an object:  [{name:\"objectname\",versionId:\"my-version-id\"}]\n    removeObjects(bucketName, objectsList, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!Array.isArray(objectsList)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"objectsList should be a list\");\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        const maxEntries = 1000;\n        const query = \"delete\";\n        const method = \"POST\";\n        let result = objectsList.reduce((result, entry)=>{\n            result.list.push(entry);\n            if (result.list.length === maxEntries) {\n                result.listOfList.push(result.list);\n                result.list = [];\n            }\n            return result;\n        }, {\n            listOfList: [],\n            list: []\n        });\n        if (result.list.length > 0) {\n            result.listOfList.push(result.list);\n        }\n        const encoder = new web_encoding__WEBPACK_IMPORTED_MODULE_7__.TextEncoder();\n        const batchResults = [];\n        async__WEBPACK_IMPORTED_MODULE_3__[\"default\"].eachSeries(result.listOfList, (list, batchCb)=>{\n            var objects = [];\n            list.forEach(function(value) {\n                if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(value)) {\n                    objects.push({\n                        Key: value.name,\n                        VersionId: value.versionId\n                    });\n                } else {\n                    objects.push({\n                        Key: value\n                    });\n                }\n            });\n            let deleteObjects = {\n                Delete: {\n                    Quiet: true,\n                    Object: objects\n                }\n            };\n            const builder = new xml2js__WEBPACK_IMPORTED_MODULE_9__.Builder({\n                headless: true\n            });\n            let payload = builder.buildObject(deleteObjects);\n            payload = Buffer.from(encoder.encode(payload));\n            const headers = {};\n            headers[\"Content-MD5\"] = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.toMd5)(payload);\n            let removeObjectsResult;\n            this.makeRequest({\n                method,\n                bucketName,\n                query,\n                headers\n            }, payload, [\n                200\n            ], \"\", true, (e, response)=>{\n                if (e) {\n                    return batchCb(e);\n                }\n                (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.removeObjectsTransformer()).on(\"data\", (data)=>{\n                    removeObjectsResult = data;\n                }).on(\"error\", (e)=>{\n                    return batchCb(e, null);\n                }).on(\"end\", ()=>{\n                    batchResults.push(removeObjectsResult);\n                    return batchCb(null, removeObjectsResult);\n                });\n            });\n        }, ()=>{\n            cb(null, lodash__WEBPACK_IMPORTED_MODULE_5__.flatten(batchResults));\n        });\n    }\n    // Get the policy on a bucket or an object prefix.\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `callback(err, policy)` _function_: callback function\n    getBucketPolicy(bucketName, cb) {\n        // Validate arguments.\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        let method = \"GET\";\n        let query = \"policy\";\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return cb(e);\n            }\n            let policy = Buffer.from(\"\");\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.getConcater()).on(\"data\", (data)=>policy = data).on(\"error\", cb).on(\"end\", ()=>{\n                cb(null, policy.toString());\n            });\n        });\n    }\n    // Set the policy on a bucket or an object prefix.\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `bucketPolicy` _string_: bucket policy (JSON stringify'ed)\n    // * `callback(err)` _function_: callback function\n    setBucketPolicy(bucketName, policy, cb) {\n        // Validate arguments.\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(policy)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketPolicyError(`Invalid bucket policy: ${policy} - must be \"string\"`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        let method = \"DELETE\";\n        let query = \"policy\";\n        if (policy) {\n            method = \"PUT\";\n        }\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, policy, [\n            204\n        ], \"\", false, cb);\n    }\n    // Generate a generic presigned URL which can be\n    // used for HTTP methods GET, PUT, HEAD and DELETE\n    //\n    // __Arguments__\n    // * `method` _string_: name of the HTTP method\n    // * `bucketName` _string_: name of the bucket\n    // * `objectName` _string_: name of the object\n    // * `expiry` _number_: expiry in seconds (optional, default 7 days)\n    // * `reqParams` _object_: request parameters (optional) e.g {versionId:\"10fa9946-3f64-4137-a58f-888065c0732e\"}\n    // * `requestDate` _Date_: A date object, the url will be issued at (optional)\n    presignedUrl(method, bucketName, objectName, expires, reqParams, requestDate, cb) {\n        if (this.anonymous) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.AnonymousRequestError(\"Presigned \" + method + \" url cannot be generated for anonymous requests\");\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(requestDate)) {\n            cb = requestDate;\n            requestDate = new Date();\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(reqParams)) {\n            cb = reqParams;\n            reqParams = {};\n            requestDate = new Date();\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(expires)) {\n            cb = expires;\n            reqParams = {};\n            expires = 24 * 60 * 60 * 7; // 7 days in seconds\n            requestDate = new Date();\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isNumber)(expires)) {\n            throw new TypeError('expires should be of type \"number\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(reqParams)) {\n            throw new TypeError('reqParams should be of type \"object\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidDate)(requestDate)) {\n            throw new TypeError('requestDate should be of type \"Date\" and valid');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        var query = query_string__WEBPACK_IMPORTED_MODULE_6__.stringify(reqParams);\n        this.getBucketRegion(bucketName, (e, region)=>{\n            if (e) {\n                return cb(e);\n            }\n            // This statement is added to ensure that we send error through\n            // callback on presign failure.\n            var url;\n            var reqOptions = this.getRequestOptions({\n                method,\n                region,\n                bucketName,\n                objectName,\n                query\n            });\n            this.checkAndRefreshCreds();\n            try {\n                url = (0,_signing_mjs__WEBPACK_IMPORTED_MODULE_21__.presignSignatureV4)(reqOptions, this.accessKey, this.secretKey, this.sessionToken, region, requestDate, expires);\n            } catch (pe) {\n                return cb(pe);\n            }\n            cb(null, url);\n        });\n    }\n    // Generate a presigned URL for GET\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `objectName` _string_: name of the object\n    // * `expiry` _number_: expiry in seconds (optional, default 7 days)\n    // * `respHeaders` _object_: response headers to override or request params for query (optional) e.g {versionId:\"10fa9946-3f64-4137-a58f-888065c0732e\"}\n    // * `requestDate` _Date_: A date object, the url will be issued at (optional)\n    presignedGetObject(bucketName, objectName, expires, respHeaders, requestDate, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(respHeaders)) {\n            cb = respHeaders;\n            respHeaders = {};\n            requestDate = new Date();\n        }\n        var validRespHeaders = [\n            \"response-content-type\",\n            \"response-content-language\",\n            \"response-expires\",\n            \"response-cache-control\",\n            \"response-content-disposition\",\n            \"response-content-encoding\"\n        ];\n        validRespHeaders.forEach((header)=>{\n            if (respHeaders !== undefined && respHeaders[header] !== undefined && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(respHeaders[header])) {\n                throw new TypeError(`response header ${header} should be of type \"string\"`);\n            }\n        });\n        return this.presignedUrl(\"GET\", bucketName, objectName, expires, respHeaders, requestDate, cb);\n    }\n    // Generate a presigned URL for PUT. Using this URL, the browser can upload to S3 only with the specified object name.\n    //\n    // __Arguments__\n    // * `bucketName` _string_: name of the bucket\n    // * `objectName` _string_: name of the object\n    // * `expiry` _number_: expiry in seconds (optional, default 7 days)\n    presignedPutObject(bucketName, objectName, expires, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        return this.presignedUrl(\"PUT\", bucketName, objectName, expires, cb);\n    }\n    // return PostPolicy object\n    newPostPolicy() {\n        return new _internal_post_policy_mjs__WEBPACK_IMPORTED_MODULE_16__.PostPolicy();\n    }\n    // presignedPostPolicy can be used in situations where we want more control on the upload than what\n    // presignedPutObject() provides. i.e Using presignedPostPolicy we will be able to put policy restrictions\n    // on the object's `name` `bucket` `expiry` `Content-Type` `Content-Disposition` `metaData`\n    presignedPostPolicy(postPolicy, cb) {\n        if (this.anonymous) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.AnonymousRequestError(\"Presigned POST policy cannot be generated for anonymous requests\");\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(postPolicy)) {\n            throw new TypeError('postPolicy should be of type \"object\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('cb should be of type \"function\"');\n        }\n        this.getBucketRegion(postPolicy.formData.bucket, (e, region)=>{\n            if (e) {\n                return cb(e);\n            }\n            var date = new Date();\n            var dateStr = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.makeDateLong)(date);\n            this.checkAndRefreshCreds();\n            if (!postPolicy.policy.expiration) {\n                // 'expiration' is mandatory field for S3.\n                // Set default expiration date of 7 days.\n                var expires = new Date();\n                expires.setSeconds(24 * 60 * 60 * 7);\n                postPolicy.setExpires(expires);\n            }\n            postPolicy.policy.conditions.push([\n                \"eq\",\n                \"$x-amz-date\",\n                dateStr\n            ]);\n            postPolicy.formData[\"x-amz-date\"] = dateStr;\n            postPolicy.policy.conditions.push([\n                \"eq\",\n                \"$x-amz-algorithm\",\n                \"AWS4-HMAC-SHA256\"\n            ]);\n            postPolicy.formData[\"x-amz-algorithm\"] = \"AWS4-HMAC-SHA256\";\n            postPolicy.policy.conditions.push([\n                \"eq\",\n                \"$x-amz-credential\",\n                this.accessKey + \"/\" + (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.getScope)(region, date)\n            ]);\n            postPolicy.formData[\"x-amz-credential\"] = this.accessKey + \"/\" + (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.getScope)(region, date);\n            if (this.sessionToken) {\n                postPolicy.policy.conditions.push([\n                    \"eq\",\n                    \"$x-amz-security-token\",\n                    this.sessionToken\n                ]);\n                postPolicy.formData[\"x-amz-security-token\"] = this.sessionToken;\n            }\n            var policyBase64 = Buffer.from(JSON.stringify(postPolicy.policy)).toString(\"base64\");\n            postPolicy.formData.policy = policyBase64;\n            var signature = (0,_signing_mjs__WEBPACK_IMPORTED_MODULE_21__.postPresignSignatureV4)(region, date, this.secretKey, policyBase64);\n            postPolicy.formData[\"x-amz-signature\"] = signature;\n            var opts = {};\n            opts.region = region;\n            opts.bucketName = postPolicy.formData.bucket;\n            var reqOptions = this.getRequestOptions(opts);\n            var portStr = this.port == 80 || this.port === 443 ? \"\" : `:${this.port.toString()}`;\n            var urlStr = `${reqOptions.protocol}//${reqOptions.host}${portStr}${reqOptions.path}`;\n            cb(null, {\n                postURL: urlStr,\n                formData: postPolicy.formData\n            });\n        });\n    }\n    // Complete the multipart upload. After all the parts are uploaded issuing\n    // this call will aggregate the parts on the server into a single object.\n    completeMultipartUpload(bucketName, objectName, uploadId, etags, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(uploadId)) {\n            throw new TypeError('uploadId should be of type \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(etags)) {\n            throw new TypeError('etags should be of type \"Array\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('cb should be of type \"function\"');\n        }\n        if (!uploadId) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"uploadId cannot be empty\");\n        }\n        var method = \"POST\";\n        var query = `uploadId=${(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.uriEscape)(uploadId)}`;\n        var parts = [];\n        etags.forEach((element)=>{\n            parts.push({\n                Part: [\n                    {\n                        PartNumber: element.part\n                    },\n                    {\n                        ETag: element.etag\n                    }\n                ]\n            });\n        });\n        var payloadObject = {\n            CompleteMultipartUpload: parts\n        };\n        var payload = xml__WEBPACK_IMPORTED_MODULE_8__(payloadObject);\n        this.makeRequest({\n            method,\n            bucketName,\n            objectName,\n            query\n        }, payload, [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return cb(e);\n            }\n            var transformer = _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.getCompleteMultipartTransformer();\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, transformer).on(\"error\", (e)=>cb(e)).on(\"data\", (result)=>{\n                if (result.errCode) {\n                    // Multipart Complete API returns an error XML after a 200 http status\n                    cb(new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.S3Error(result.errMessage));\n                } else {\n                    const completeMultipartResult = {\n                        etag: result.etag,\n                        versionId: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.getVersionId)(response.headers)\n                    };\n                    cb(null, completeMultipartResult);\n                }\n            });\n        });\n    }\n    // Called by listIncompleteUploads to fetch a batch of incomplete uploads.\n    listIncompleteUploadsQuery(bucketName, prefix, keyMarker, uploadIdMarker, delimiter) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(prefix)) {\n            throw new TypeError('prefix should be of type \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(keyMarker)) {\n            throw new TypeError('keyMarker should be of type \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(uploadIdMarker)) {\n            throw new TypeError('uploadIdMarker should be of type \"string\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(delimiter)) {\n            throw new TypeError('delimiter should be of type \"string\"');\n        }\n        var queries = [];\n        queries.push(`prefix=${(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.uriEscape)(prefix)}`);\n        queries.push(`delimiter=${(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.uriEscape)(delimiter)}`);\n        if (keyMarker) {\n            keyMarker = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.uriEscape)(keyMarker);\n            queries.push(`key-marker=${keyMarker}`);\n        }\n        if (uploadIdMarker) {\n            queries.push(`upload-id-marker=${uploadIdMarker}`);\n        }\n        var maxUploads = 1000;\n        queries.push(`max-uploads=${maxUploads}`);\n        queries.sort();\n        queries.unshift(\"uploads\");\n        var query = \"\";\n        if (queries.length > 0) {\n            query = `${queries.join(\"&\")}`;\n        }\n        var method = \"GET\";\n        var transformer = _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.getListMultipartTransformer();\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return transformer.emit(\"error\", e);\n            }\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, transformer);\n        });\n        return transformer;\n    }\n    // Find uploadId of an incomplete upload.\n    findUploadId(bucketName, objectName, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('cb should be of type \"function\"');\n        }\n        var latestUpload;\n        var listNext = (keyMarker, uploadIdMarker)=>{\n            this.listIncompleteUploadsQuery(bucketName, objectName, keyMarker, uploadIdMarker, \"\").on(\"error\", (e)=>cb(e)).on(\"data\", (result)=>{\n                result.uploads.forEach((upload)=>{\n                    if (upload.key === objectName) {\n                        if (!latestUpload || upload.initiated.getTime() > latestUpload.initiated.getTime()) {\n                            latestUpload = upload;\n                            return;\n                        }\n                    }\n                });\n                if (result.isTruncated) {\n                    listNext(result.nextKeyMarker, result.nextUploadIdMarker);\n                    return;\n                }\n                if (latestUpload) {\n                    return cb(null, latestUpload.uploadId);\n                }\n                cb(null, undefined);\n            });\n        };\n        listNext(\"\", \"\");\n    }\n    // Remove all the notification configurations in the S3 provider\n    setBucketNotification(bucketName, config, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(config)) {\n            throw new TypeError('notification config should be of type \"Object\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        var method = \"PUT\";\n        var query = \"notification\";\n        var builder = new xml2js__WEBPACK_IMPORTED_MODULE_9__.Builder({\n            rootName: \"NotificationConfiguration\",\n            renderOpts: {\n                pretty: false\n            },\n            headless: true\n        });\n        var payload = builder.buildObject(config);\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, payload, [\n            200\n        ], \"\", false, cb);\n    }\n    removeAllBucketNotification(bucketName, cb) {\n        this.setBucketNotification(bucketName, new _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.NotificationConfig(), cb);\n    }\n    // Return the list of notification configurations stored\n    // in the S3 provider\n    getBucketNotification(bucketName, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        var method = \"GET\";\n        var query = \"notification\";\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return cb(e);\n            }\n            var transformer = _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.getBucketNotificationTransformer();\n            var bucketNotification;\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, transformer).on(\"data\", (result)=>bucketNotification = result).on(\"error\", (e)=>cb(e)).on(\"end\", ()=>cb(null, bucketNotification));\n        });\n    }\n    // Listens for bucket notifications. Returns an EventEmitter.\n    listenBucketNotification(bucketName, prefix, suffix, events) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(prefix)) {\n            throw new TypeError(\"prefix must be of type string\");\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(suffix)) {\n            throw new TypeError(\"suffix must be of type string\");\n        }\n        if (!Array.isArray(events)) {\n            throw new TypeError(\"events must be of type Array\");\n        }\n        let listener = new _notification_mjs__WEBPACK_IMPORTED_MODULE_18__.NotificationPoller(this, bucketName, prefix, suffix, events);\n        listener.start();\n        return listener;\n    }\n    getBucketVersioning(bucketName, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('callback should be of type \"function\"');\n        }\n        var method = \"GET\";\n        var query = \"versioning\";\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return cb(e);\n            }\n            let versionConfig = Buffer.from(\"\");\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.bucketVersioningTransformer()).on(\"data\", (data)=>{\n                versionConfig = data;\n            }).on(\"error\", cb).on(\"end\", ()=>{\n                cb(null, versionConfig);\n            });\n        });\n    }\n    setBucketVersioning(bucketName, versionConfig, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!Object.keys(versionConfig).length) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('versionConfig should be of type \"object\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        var method = \"PUT\";\n        var query = \"versioning\";\n        var builder = new xml2js__WEBPACK_IMPORTED_MODULE_9__.Builder({\n            rootName: \"VersioningConfiguration\",\n            renderOpts: {\n                pretty: false\n            },\n            headless: true\n        });\n        var payload = builder.buildObject(versionConfig);\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, payload, [\n            200\n        ], \"\", false, cb);\n    }\n    /** To set Tags on a bucket or object based on the params\n   *  __Arguments__\n   * taggingParams _object_ Which contains the following properties\n   *  bucketName _string_,\n   *  objectName _string_ (Optional),\n   *  tags _object_ of the form {'<tag-key-1>':'<tag-value-1>','<tag-key-2>':'<tag-value-2>'}\n   *  putOpts _object_ (Optional) e.g {versionId:\"my-object-version-id\"},\n   *  cb(error)` _function_ - callback function with `err` as the error argument. `err` is null if the operation is successful.\n   */ setTagging(taggingParams) {\n        const { bucketName, objectName, tags, putOpts = {}, cb } = taggingParams;\n        const method = \"PUT\";\n        let query = \"tagging\";\n        if (putOpts && putOpts.versionId) {\n            query = `${query}&versionId=${putOpts.versionId}`;\n        }\n        const tagsList = [];\n        for (const [key, value] of Object.entries(tags)){\n            tagsList.push({\n                Key: key,\n                Value: value\n            });\n        }\n        const taggingConfig = {\n            Tagging: {\n                TagSet: {\n                    Tag: tagsList\n                }\n            }\n        };\n        const encoder = new web_encoding__WEBPACK_IMPORTED_MODULE_7__.TextEncoder();\n        const headers = {};\n        const builder = new xml2js__WEBPACK_IMPORTED_MODULE_9__.Builder({\n            headless: true,\n            renderOpts: {\n                pretty: false\n            }\n        });\n        let payload = builder.buildObject(taggingConfig);\n        payload = Buffer.from(encoder.encode(payload));\n        headers[\"Content-MD5\"] = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.toMd5)(payload);\n        const requestOptions = {\n            method,\n            bucketName,\n            query,\n            headers\n        };\n        if (objectName) {\n            requestOptions[\"objectName\"] = objectName;\n        }\n        headers[\"Content-MD5\"] = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.toMd5)(payload);\n        this.makeRequest(requestOptions, payload, [\n            200\n        ], \"\", false, cb);\n    }\n    /** Set Tags on a Bucket\n   * __Arguments__\n   * bucketName _string_\n   * tags _object_ of the form {'<tag-key-1>':'<tag-value-1>','<tag-key-2>':'<tag-value-2>'}\n   * `cb(error)` _function_ - callback function with `err` as the error argument. `err` is null if the operation is successful.\n   */ setBucketTagging(bucketName, tags, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(tags)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('tags should be of type \"object\"');\n        }\n        if (Object.keys(tags).length > 10) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('maximum tags allowed is 10\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('callback should be of type \"function\"');\n        }\n        return this.setTagging({\n            bucketName,\n            tags,\n            cb\n        });\n    }\n    /** Set Tags on an Object\n   * __Arguments__\n   * bucketName _string_\n   * objectName _string_\n   *  * tags _object_ of the form {'<tag-key-1>':'<tag-value-1>','<tag-key-2>':'<tag-value-2>'}\n   *  putOpts _object_ (Optional) e.g {versionId:\"my-object-version-id\"},\n   * `cb(error)` _function_ - callback function with `err` as the error argument. `err` is null if the operation is successful.\n   */ setObjectTagging(bucketName, objectName, tags, putOpts = {}, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid object name: \" + objectName);\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(putOpts)) {\n            cb = putOpts;\n            putOpts = {};\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(tags)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('tags should be of type \"object\"');\n        }\n        if (Object.keys(tags).length > 10) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('Maximum tags allowed is 10\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        return this.setTagging({\n            bucketName,\n            objectName,\n            tags,\n            putOpts,\n            cb\n        });\n    }\n    /** Remove Tags on an Bucket/Object based on params\n   * __Arguments__\n   * bucketName _string_\n   * objectName _string_ (optional)\n   * removeOpts _object_ (Optional) e.g {versionId:\"my-object-version-id\"},\n   * `cb(error)` _function_ - callback function with `err` as the error argument. `err` is null if the operation is successful.\n   */ removeTagging({ bucketName, objectName, removeOpts, cb }) {\n        const method = \"DELETE\";\n        let query = \"tagging\";\n        if (removeOpts && Object.keys(removeOpts).length && removeOpts.versionId) {\n            query = `${query}&versionId=${removeOpts.versionId}`;\n        }\n        const requestOptions = {\n            method,\n            bucketName,\n            objectName,\n            query\n        };\n        if (objectName) {\n            requestOptions[\"objectName\"] = objectName;\n        }\n        this.makeRequest(requestOptions, \"\", [\n            200,\n            204\n        ], \"\", true, cb);\n    }\n    /** Remove Tags associated with a bucket\n   *  __Arguments__\n   * bucketName _string_\n   * `cb(error)` _function_ - callback function with `err` as the error argument. `err` is null if the operation is successful.\n   */ removeBucketTagging(bucketName, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        return this.removeTagging({\n            bucketName,\n            cb\n        });\n    }\n    /** Remove tags associated with an object\n   * __Arguments__\n   * bucketName _string_\n   * objectName _string_\n   * removeOpts _object_ (Optional) e.g. {VersionID:\"my-object-version-id\"}\n   * `cb(error)` _function_ - callback function with `err` as the error argument. `err` is null if the operation is successful.\n   */ removeObjectTagging(bucketName, objectName, removeOpts, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid object name: \" + objectName);\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(removeOpts)) {\n            cb = removeOpts;\n            removeOpts = {};\n        }\n        if (removeOpts && Object.keys(removeOpts).length && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(removeOpts)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('removeOpts should be of type \"object\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        return this.removeTagging({\n            bucketName,\n            objectName,\n            removeOpts,\n            cb\n        });\n    }\n    /** Get Tags associated with a Bucket\n   *  __Arguments__\n   * bucketName _string_\n   * `cb(error, tags)` _function_ - callback function with `err` as the error argument. `err` is null if the operation is successful.\n   */ getBucketTagging(bucketName, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n        }\n        const method = \"GET\";\n        const query = \"tagging\";\n        const requestOptions = {\n            method,\n            bucketName,\n            query\n        };\n        this.makeRequest(requestOptions, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            var transformer = _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.getTagsTransformer();\n            if (e) {\n                return cb(e);\n            }\n            let tagsList;\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, transformer).on(\"data\", (result)=>tagsList = result).on(\"error\", (e)=>cb(e)).on(\"end\", ()=>cb(null, tagsList));\n        });\n    }\n    /** Get the tags associated with a bucket OR an object\n   * bucketName _string_\n   * objectName _string_ (Optional)\n   * getOpts _object_ (Optional) e.g {versionId:\"my-object-version-id\"}\n   * `cb(error, tags)` _function_ - callback function with `err` as the error argument. `err` is null if the operation is successful.\n   */ getObjectTagging(bucketName, objectName, getOpts = {}, cb = ()=>false) {\n        const method = \"GET\";\n        let query = \"tagging\";\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid object name: \" + objectName);\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(getOpts)) {\n            cb = getOpts;\n            getOpts = {};\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(getOpts)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('getOpts should be of type \"object\"');\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        if (getOpts && getOpts.versionId) {\n            query = `${query}&versionId=${getOpts.versionId}`;\n        }\n        const requestOptions = {\n            method,\n            bucketName,\n            query\n        };\n        if (objectName) {\n            requestOptions[\"objectName\"] = objectName;\n        }\n        this.makeRequest(requestOptions, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            const transformer = _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.getTagsTransformer();\n            if (e) {\n                return cb(e);\n            }\n            let tagsList;\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, transformer).on(\"data\", (result)=>tagsList = result).on(\"error\", (e)=>cb(e)).on(\"end\", ()=>cb(null, tagsList));\n        });\n    }\n    /**\n   * Apply lifecycle configuration on a bucket.\n   * bucketName _string_\n   * policyConfig _object_ a valid policy configuration object.\n   * `cb(error)` _function_ - callback function with `err` as the error argument. `err` is null if the operation is successful.\n   */ applyBucketLifecycle(bucketName, policyConfig, cb) {\n        const method = \"PUT\";\n        const query = \"lifecycle\";\n        const encoder = new web_encoding__WEBPACK_IMPORTED_MODULE_7__.TextEncoder();\n        const headers = {};\n        const builder = new xml2js__WEBPACK_IMPORTED_MODULE_9__.Builder({\n            rootName: \"LifecycleConfiguration\",\n            headless: true,\n            renderOpts: {\n                pretty: false\n            }\n        });\n        let payload = builder.buildObject(policyConfig);\n        payload = Buffer.from(encoder.encode(payload));\n        const requestOptions = {\n            method,\n            bucketName,\n            query,\n            headers\n        };\n        headers[\"Content-MD5\"] = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.toMd5)(payload);\n        this.makeRequest(requestOptions, payload, [\n            200\n        ], \"\", false, cb);\n    }\n    /** Remove lifecycle configuration of a bucket.\n   * bucketName _string_\n   * `cb(error)` _function_ - callback function with `err` as the error argument. `err` is null if the operation is successful.\n   */ removeBucketLifecycle(bucketName, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        const method = \"DELETE\";\n        const query = \"lifecycle\";\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, \"\", [\n            204\n        ], \"\", false, cb);\n    }\n    /** Set/Override lifecycle configuration on a bucket. if the configuration is empty, it removes the configuration.\n   * bucketName _string_\n   * lifeCycleConfig _object_ one of the following values: (null or '') to remove the lifecycle configuration. or a valid lifecycle configuration\n   * `cb(error)` _function_ - callback function with `err` as the error argument. `err` is null if the operation is successful.\n   */ setBucketLifecycle(bucketName, lifeCycleConfig = null, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (lodash__WEBPACK_IMPORTED_MODULE_5__.isEmpty(lifeCycleConfig)) {\n            this.removeBucketLifecycle(bucketName, cb);\n        } else {\n            this.applyBucketLifecycle(bucketName, lifeCycleConfig, cb);\n        }\n    }\n    /** Get lifecycle configuration on a bucket.\n   * bucketName _string_\n   * `cb(config)` _function_ - callback function with lifecycle configuration as the error argument.\n   */ getBucketLifecycle(bucketName, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        const method = \"GET\";\n        const query = \"lifecycle\";\n        const requestOptions = {\n            method,\n            bucketName,\n            query\n        };\n        this.makeRequest(requestOptions, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            const transformer = _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.lifecycleTransformer();\n            if (e) {\n                return cb(e);\n            }\n            let lifecycleConfig;\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, transformer).on(\"data\", (result)=>lifecycleConfig = result).on(\"error\", (e)=>cb(e)).on(\"end\", ()=>cb(null, lifecycleConfig));\n        });\n    }\n    setObjectLockConfig(bucketName, lockConfigOpts = {}, cb) {\n        const retentionModes = [\n            _internal_type_mjs__WEBPACK_IMPORTED_MODULE_17__.RETENTION_MODES.COMPLIANCE,\n            _internal_type_mjs__WEBPACK_IMPORTED_MODULE_17__.RETENTION_MODES.GOVERNANCE\n        ];\n        const validUnits = [\n            _internal_type_mjs__WEBPACK_IMPORTED_MODULE_17__.RETENTION_VALIDITY_UNITS.DAYS,\n            _internal_type_mjs__WEBPACK_IMPORTED_MODULE_17__.RETENTION_VALIDITY_UNITS.YEARS\n        ];\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (lockConfigOpts.mode && !retentionModes.includes(lockConfigOpts.mode)) {\n            throw new TypeError(`lockConfigOpts.mode should be one of ${retentionModes}`);\n        }\n        if (lockConfigOpts.unit && !validUnits.includes(lockConfigOpts.unit)) {\n            throw new TypeError(`lockConfigOpts.unit should be one of ${validUnits}`);\n        }\n        if (lockConfigOpts.validity && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isNumber)(lockConfigOpts.validity)) {\n            throw new TypeError(`lockConfigOpts.validity should be a number`);\n        }\n        const method = \"PUT\";\n        const query = \"object-lock\";\n        let config = {\n            ObjectLockEnabled: \"Enabled\"\n        };\n        const configKeys = Object.keys(lockConfigOpts);\n        // Check if keys are present and all keys are present.\n        if (configKeys.length > 0) {\n            if (lodash__WEBPACK_IMPORTED_MODULE_5__.difference(configKeys, [\n                \"unit\",\n                \"mode\",\n                \"validity\"\n            ]).length !== 0) {\n                throw new TypeError(`lockConfigOpts.mode,lockConfigOpts.unit,lockConfigOpts.validity all the properties should be specified.`);\n            } else {\n                config.Rule = {\n                    DefaultRetention: {}\n                };\n                if (lockConfigOpts.mode) {\n                    config.Rule.DefaultRetention.Mode = lockConfigOpts.mode;\n                }\n                if (lockConfigOpts.unit === _internal_type_mjs__WEBPACK_IMPORTED_MODULE_17__.RETENTION_VALIDITY_UNITS.DAYS) {\n                    config.Rule.DefaultRetention.Days = lockConfigOpts.validity;\n                } else if (lockConfigOpts.unit === _internal_type_mjs__WEBPACK_IMPORTED_MODULE_17__.RETENTION_VALIDITY_UNITS.YEARS) {\n                    config.Rule.DefaultRetention.Years = lockConfigOpts.validity;\n                }\n            }\n        }\n        const builder = new xml2js__WEBPACK_IMPORTED_MODULE_9__.Builder({\n            rootName: \"ObjectLockConfiguration\",\n            renderOpts: {\n                pretty: false\n            },\n            headless: true\n        });\n        const payload = builder.buildObject(config);\n        const headers = {};\n        headers[\"Content-MD5\"] = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.toMd5)(payload);\n        this.makeRequest({\n            method,\n            bucketName,\n            query,\n            headers\n        }, payload, [\n            200\n        ], \"\", false, cb);\n    }\n    getObjectLockConfig(bucketName, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('callback should be of type \"function\"');\n        }\n        const method = \"GET\";\n        const query = \"object-lock\";\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return cb(e);\n            }\n            let objectLockConfig = Buffer.from(\"\");\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.objectLockTransformer()).on(\"data\", (data)=>{\n                objectLockConfig = data;\n            }).on(\"error\", cb).on(\"end\", ()=>{\n                cb(null, objectLockConfig);\n            });\n        });\n    }\n    putObjectRetention(bucketName, objectName, retentionOpts = {}, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(retentionOpts)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('retentionOpts should be of type \"object\"');\n        } else {\n            if (retentionOpts.governanceBypass && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isBoolean)(retentionOpts.governanceBypass)) {\n                throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"Invalid value for governanceBypass\", retentionOpts.governanceBypass);\n            }\n            if (retentionOpts.mode && ![\n                _internal_type_mjs__WEBPACK_IMPORTED_MODULE_17__.RETENTION_MODES.COMPLIANCE,\n                _internal_type_mjs__WEBPACK_IMPORTED_MODULE_17__.RETENTION_MODES.GOVERNANCE\n            ].includes(retentionOpts.mode)) {\n                throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"Invalid object retention mode \", retentionOpts.mode);\n            }\n            if (retentionOpts.retainUntilDate && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(retentionOpts.retainUntilDate)) {\n                throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"Invalid value for retainUntilDate\", retentionOpts.retainUntilDate);\n            }\n            if (retentionOpts.versionId && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(retentionOpts.versionId)) {\n                throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"Invalid value for versionId\", retentionOpts.versionId);\n            }\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        const method = \"PUT\";\n        let query = \"retention\";\n        const headers = {};\n        if (retentionOpts.governanceBypass) {\n            headers[\"X-Amz-Bypass-Governance-Retention\"] = true;\n        }\n        const builder = new xml2js__WEBPACK_IMPORTED_MODULE_9__.Builder({\n            rootName: \"Retention\",\n            renderOpts: {\n                pretty: false\n            },\n            headless: true\n        });\n        const params = {};\n        if (retentionOpts.mode) {\n            params.Mode = retentionOpts.mode;\n        }\n        if (retentionOpts.retainUntilDate) {\n            params.RetainUntilDate = retentionOpts.retainUntilDate;\n        }\n        if (retentionOpts.versionId) {\n            query += `&versionId=${retentionOpts.versionId}`;\n        }\n        let payload = builder.buildObject(params);\n        headers[\"Content-MD5\"] = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.toMd5)(payload);\n        this.makeRequest({\n            method,\n            bucketName,\n            objectName,\n            query,\n            headers\n        }, payload, [\n            200,\n            204\n        ], \"\", false, cb);\n    }\n    getObjectRetention(bucketName, objectName, getOpts, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(getOpts)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('callback should be of type \"object\"');\n        } else if (getOpts.versionId && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(getOpts.versionId)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('VersionID should be of type \"string\"');\n        }\n        if (cb && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('callback should be of type \"function\"');\n        }\n        const method = \"GET\";\n        let query = \"retention\";\n        if (getOpts.versionId) {\n            query += `&versionId=${getOpts.versionId}`;\n        }\n        this.makeRequest({\n            method,\n            bucketName,\n            objectName,\n            query\n        }, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return cb(e);\n            }\n            let retentionConfig = Buffer.from(\"\");\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.objectRetentionTransformer()).on(\"data\", (data)=>{\n                retentionConfig = data;\n            }).on(\"error\", cb).on(\"end\", ()=>{\n                cb(null, retentionConfig);\n            });\n        });\n    }\n    setBucketEncryption(bucketName, encryptionConfig, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(encryptionConfig)) {\n            cb = encryptionConfig;\n            encryptionConfig = null;\n        }\n        if (!lodash__WEBPACK_IMPORTED_MODULE_5__.isEmpty(encryptionConfig) && encryptionConfig.Rule.length > 1) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"Invalid Rule length. Only one rule is allowed.: \" + encryptionConfig.Rule);\n        }\n        if (cb && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        let encryptionObj = encryptionConfig;\n        if (lodash__WEBPACK_IMPORTED_MODULE_5__.isEmpty(encryptionConfig)) {\n            encryptionObj = {\n                // Default MinIO Server Supported Rule\n                Rule: [\n                    {\n                        ApplyServerSideEncryptionByDefault: {\n                            SSEAlgorithm: \"AES256\"\n                        }\n                    }\n                ]\n            };\n        }\n        let method = \"PUT\";\n        let query = \"encryption\";\n        let builder = new xml2js__WEBPACK_IMPORTED_MODULE_9__.Builder({\n            rootName: \"ServerSideEncryptionConfiguration\",\n            renderOpts: {\n                pretty: false\n            },\n            headless: true\n        });\n        let payload = builder.buildObject(encryptionObj);\n        const headers = {};\n        headers[\"Content-MD5\"] = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.toMd5)(payload);\n        this.makeRequest({\n            method,\n            bucketName,\n            query,\n            headers\n        }, payload, [\n            200\n        ], \"\", false, cb);\n    }\n    getBucketEncryption(bucketName, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('callback should be of type \"function\"');\n        }\n        const method = \"GET\";\n        const query = \"encryption\";\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return cb(e);\n            }\n            let bucketEncConfig = Buffer.from(\"\");\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.bucketEncryptionTransformer()).on(\"data\", (data)=>{\n                bucketEncConfig = data;\n            }).on(\"error\", cb).on(\"end\", ()=>{\n                cb(null, bucketEncConfig);\n            });\n        });\n    }\n    removeBucketEncryption(bucketName, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('callback should be of type \"function\"');\n        }\n        const method = \"DELETE\";\n        const query = \"encryption\";\n        this.makeRequest({\n            method,\n            bucketName,\n            query\n        }, \"\", [\n            204\n        ], \"\", false, cb);\n    }\n    getObjectLegalHold(bucketName, objectName, getOpts = {}, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(getOpts)) {\n            cb = getOpts;\n            getOpts = {};\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(getOpts)) {\n            throw new TypeError('getOpts should be of type \"Object\"');\n        } else if (Object.keys(getOpts).length > 0 && getOpts.versionId && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(getOpts.versionId)) {\n            throw new TypeError(\"versionId should be of type string.:\", getOpts.versionId);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('callback should be of type \"function\"');\n        }\n        const method = \"GET\";\n        let query = \"legal-hold\";\n        if (getOpts.versionId) {\n            query += `&versionId=${getOpts.versionId}`;\n        }\n        this.makeRequest({\n            method,\n            bucketName,\n            objectName,\n            query\n        }, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return cb(e);\n            }\n            let legalHoldConfig = Buffer.from(\"\");\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.objectLegalHoldTransformer()).on(\"data\", (data)=>{\n                legalHoldConfig = data;\n            }).on(\"error\", cb).on(\"end\", ()=>{\n                cb(null, legalHoldConfig);\n            });\n        });\n    }\n    setObjectLegalHold(bucketName, objectName, setOpts = {}, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(\"Invalid bucket name: \" + bucketName);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        const defaultOpts = {\n            status: _internal_type_mjs__WEBPACK_IMPORTED_MODULE_17__.LEGAL_HOLD_STATUS.ENABLED\n        };\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(setOpts)) {\n            cb = setOpts;\n            setOpts = defaultOpts;\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(setOpts)) {\n            throw new TypeError('setOpts should be of type \"Object\"');\n        } else {\n            if (![\n                _internal_type_mjs__WEBPACK_IMPORTED_MODULE_17__.LEGAL_HOLD_STATUS.ENABLED,\n                _internal_type_mjs__WEBPACK_IMPORTED_MODULE_17__.LEGAL_HOLD_STATUS.DISABLED\n            ].includes(setOpts.status)) {\n                throw new TypeError(\"Invalid status: \" + setOpts.status);\n            }\n            if (setOpts.versionId && !setOpts.versionId.length) {\n                throw new TypeError(\"versionId should be of type string.:\" + setOpts.versionId);\n            }\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError('callback should be of type \"function\"');\n        }\n        if (lodash__WEBPACK_IMPORTED_MODULE_5__.isEmpty(setOpts)) {\n            setOpts = {\n                defaultOpts\n            };\n        }\n        const method = \"PUT\";\n        let query = \"legal-hold\";\n        if (setOpts.versionId) {\n            query += `&versionId=${setOpts.versionId}`;\n        }\n        let config = {\n            Status: setOpts.status\n        };\n        const builder = new xml2js__WEBPACK_IMPORTED_MODULE_9__.Builder({\n            rootName: \"LegalHold\",\n            renderOpts: {\n                pretty: false\n            },\n            headless: true\n        });\n        const payload = builder.buildObject(config);\n        const headers = {};\n        headers[\"Content-MD5\"] = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.toMd5)(payload);\n        this.makeRequest({\n            method,\n            bucketName,\n            objectName,\n            query,\n            headers\n        }, payload, [\n            200\n        ], \"\", false, cb);\n    }\n    /**\n   * Internal method to upload a part during compose object.\n   * @param partConfig __object__ contains the following.\n   *    bucketName __string__\n   *    objectName __string__\n   *    uploadID __string__\n   *    partNumber __number__\n   *    headers __object__\n   * @param cb called with null incase of error.\n   */ uploadPartCopy(partConfig, cb) {\n        const { bucketName, objectName, uploadID, partNumber, headers } = partConfig;\n        const method = \"PUT\";\n        let query = `uploadId=${uploadID}&partNumber=${partNumber}`;\n        const requestOptions = {\n            method,\n            bucketName,\n            objectName: objectName,\n            query,\n            headers\n        };\n        return this.makeRequest(requestOptions, \"\", [\n            200\n        ], \"\", true, (e, response)=>{\n            let partCopyResult = Buffer.from(\"\");\n            if (e) {\n                return cb(e);\n            }\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.uploadPartTransformer()).on(\"data\", (data)=>{\n                partCopyResult = data;\n            }).on(\"error\", cb).on(\"end\", ()=>{\n                let uploadPartCopyRes = {\n                    etag: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.sanitizeETag)(partCopyResult.ETag),\n                    key: objectName,\n                    part: partNumber\n                };\n                cb(null, uploadPartCopyRes);\n            });\n        });\n    }\n    composeObject(destObjConfig = {}, sourceObjList = [], cb) {\n        const me = this; // many async flows. so store the ref.\n        const sourceFilesLength = sourceObjList.length;\n        if (!Array.isArray(sourceObjList)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"sourceConfig should an array of CopySourceOptions \");\n        }\n        if (!(destObjConfig instanceof _helpers_mjs__WEBPACK_IMPORTED_MODULE_11__.CopyDestinationOptions)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(\"destConfig should of type CopyDestinationOptions \");\n        }\n        if (sourceFilesLength < 1 || sourceFilesLength > _internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.PART_CONSTRAINTS.MAX_PARTS_COUNT) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(`\"There must be as least one and up to ${_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.PART_CONSTRAINTS.MAX_PARTS_COUNT} source objects.`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        for(let i = 0; i < sourceFilesLength; i++){\n            if (!sourceObjList[i].validate()) {\n                return false;\n            }\n        }\n        if (!destObjConfig.validate()) {\n            return false;\n        }\n        const getStatOptions = (srcConfig)=>{\n            let statOpts = {};\n            if (!lodash__WEBPACK_IMPORTED_MODULE_5__.isEmpty(srcConfig.VersionID)) {\n                statOpts = {\n                    versionId: srcConfig.VersionID\n                };\n            }\n            return statOpts;\n        };\n        const srcObjectSizes = [];\n        let totalSize = 0;\n        let totalParts = 0;\n        const sourceObjStats = sourceObjList.map((srcItem)=>me.statObject(srcItem.Bucket, srcItem.Object, getStatOptions(srcItem)));\n        return Promise.all(sourceObjStats).then((srcObjectInfos)=>{\n            const validatedStats = srcObjectInfos.map((resItemStat, index)=>{\n                const srcConfig = sourceObjList[index];\n                let srcCopySize = resItemStat.size;\n                // Check if a segment is specified, and if so, is the\n                // segment within object bounds?\n                if (srcConfig.MatchRange) {\n                    // Since range is specified,\n                    //    0 <= src.srcStart <= src.srcEnd\n                    // so only invalid case to check is:\n                    const srcStart = srcConfig.Start;\n                    const srcEnd = srcConfig.End;\n                    if (srcEnd >= srcCopySize || srcStart < 0) {\n                        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(`CopySrcOptions ${index} has invalid segment-to-copy [${srcStart}, ${srcEnd}] (size is ${srcCopySize})`);\n                    }\n                    srcCopySize = srcEnd - srcStart + 1;\n                }\n                // Only the last source may be less than `absMinPartSize`\n                if (srcCopySize < _internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.PART_CONSTRAINTS.ABS_MIN_PART_SIZE && index < sourceFilesLength - 1) {\n                    throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(`CopySrcOptions ${index} is too small (${srcCopySize}) and it is not the last part.`);\n                }\n                // Is data to copy too large?\n                totalSize += srcCopySize;\n                if (totalSize > _internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.PART_CONSTRAINTS.MAX_MULTIPART_PUT_OBJECT_SIZE) {\n                    throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(`Cannot compose an object of size ${totalSize} (> 5TiB)`);\n                }\n                // record source size\n                srcObjectSizes[index] = srcCopySize;\n                // calculate parts needed for current source\n                totalParts += (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.partsRequired)(srcCopySize);\n                // Do we need more parts than we are allowed?\n                if (totalParts > _internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.PART_CONSTRAINTS.MAX_PARTS_COUNT) {\n                    throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentError(`Your proposed compose object requires more than ${_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.PART_CONSTRAINTS.MAX_PARTS_COUNT} parts`);\n                }\n                return resItemStat;\n            });\n            if (totalParts === 1 && totalSize <= _internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.PART_CONSTRAINTS.MAX_PART_SIZE || totalSize === 0) {\n                return this.copyObject(sourceObjList[0], destObjConfig, cb); // use copyObjectV2\n            }\n            // preserve etag to avoid modification of object while copying.\n            for(let i = 0; i < sourceFilesLength; i++){\n                sourceObjList[i].MatchETag = validatedStats[i].etag;\n            }\n            const splitPartSizeList = validatedStats.map((resItemStat, idx)=>{\n                const calSize = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.calculateEvenSplits)(srcObjectSizes[idx], sourceObjList[idx]);\n                return calSize;\n            });\n            function getUploadPartConfigList(uploadId) {\n                const uploadPartConfigList = [];\n                splitPartSizeList.forEach((splitSize, splitIndex)=>{\n                    const { startIndex: startIdx, endIndex: endIdx, objInfo: objConfig } = splitSize;\n                    let partIndex = splitIndex + 1; // part index starts from 1.\n                    const totalUploads = Array.from(startIdx);\n                    const headers = sourceObjList[splitIndex].getHeaders();\n                    totalUploads.forEach((splitStart, upldCtrIdx)=>{\n                        let splitEnd = endIdx[upldCtrIdx];\n                        const sourceObj = `${objConfig.Bucket}/${objConfig.Object}`;\n                        headers[\"x-amz-copy-source\"] = `${sourceObj}`;\n                        headers[\"x-amz-copy-source-range\"] = `bytes=${splitStart}-${splitEnd}`;\n                        const uploadPartConfig = {\n                            bucketName: destObjConfig.Bucket,\n                            objectName: destObjConfig.Object,\n                            uploadID: uploadId,\n                            partNumber: partIndex,\n                            headers: headers,\n                            sourceObj: sourceObj\n                        };\n                        uploadPartConfigList.push(uploadPartConfig);\n                    });\n                });\n                return uploadPartConfigList;\n            }\n            const performUploadParts = (uploadId)=>{\n                const uploadList = getUploadPartConfigList(uploadId);\n                async__WEBPACK_IMPORTED_MODULE_3__[\"default\"].map(uploadList, me.uploadPartCopy.bind(me), (err, res)=>{\n                    if (err) {\n                        this.abortMultipartUpload(destObjConfig.Bucket, destObjConfig.Object, uploadId).then(()=>cb(), (err)=>cb(err));\n                        return;\n                    }\n                    const partsDone = res.map((partCopy)=>({\n                            etag: partCopy.etag,\n                            part: partCopy.part\n                        }));\n                    return me.completeMultipartUpload(destObjConfig.Bucket, destObjConfig.Object, uploadId, partsDone, cb);\n                });\n            };\n            const newUploadHeaders = destObjConfig.getHeaders();\n            me.initiateNewMultipartUpload(destObjConfig.Bucket, destObjConfig.Object, newUploadHeaders).then((uploadId)=>{\n                performUploadParts(uploadId);\n            }, (err)=>{\n                cb(err, null);\n            });\n        }).catch((error)=>{\n            cb(error, null);\n        });\n    }\n    selectObjectContent(bucketName, objectName, selectOpts = {}, cb) {\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidBucketName)(bucketName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isValidObjectName)(objectName)) {\n            throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n        }\n        if (!lodash__WEBPACK_IMPORTED_MODULE_5__.isEmpty(selectOpts)) {\n            if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isString)(selectOpts.expression)) {\n                throw new TypeError('sqlExpression should be of type \"string\"');\n            }\n            if (!lodash__WEBPACK_IMPORTED_MODULE_5__.isEmpty(selectOpts.inputSerialization)) {\n                if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(selectOpts.inputSerialization)) {\n                    throw new TypeError('inputSerialization should be of type \"object\"');\n                }\n            } else {\n                throw new TypeError(\"inputSerialization is required\");\n            }\n            if (!lodash__WEBPACK_IMPORTED_MODULE_5__.isEmpty(selectOpts.outputSerialization)) {\n                if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isObject)(selectOpts.outputSerialization)) {\n                    throw new TypeError('outputSerialization should be of type \"object\"');\n                }\n            } else {\n                throw new TypeError(\"outputSerialization is required\");\n            }\n        } else {\n            throw new TypeError(\"valid select configuration is required\");\n        }\n        if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.isFunction)(cb)) {\n            throw new TypeError('callback should be of type \"function\"');\n        }\n        const method = \"POST\";\n        let query = `select`;\n        query += \"&select-type=2\";\n        const config = [\n            {\n                Expression: selectOpts.expression\n            },\n            {\n                ExpressionType: selectOpts.expressionType || \"SQL\"\n            },\n            {\n                InputSerialization: [\n                    selectOpts.inputSerialization\n                ]\n            },\n            {\n                OutputSerialization: [\n                    selectOpts.outputSerialization\n                ]\n            }\n        ];\n        // Optional\n        if (selectOpts.requestProgress) {\n            config.push({\n                RequestProgress: selectOpts.requestProgress\n            });\n        }\n        // Optional\n        if (selectOpts.scanRange) {\n            config.push({\n                ScanRange: selectOpts.scanRange\n            });\n        }\n        const builder = new xml2js__WEBPACK_IMPORTED_MODULE_9__.Builder({\n            rootName: \"SelectObjectContentRequest\",\n            renderOpts: {\n                pretty: false\n            },\n            headless: true\n        });\n        const payload = builder.buildObject(config);\n        this.makeRequest({\n            method,\n            bucketName,\n            objectName,\n            query\n        }, payload, [\n            200\n        ], \"\", true, (e, response)=>{\n            if (e) {\n                return cb(e);\n            }\n            let selectResult;\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_15__.pipesetup)(response, _transformers_mjs__WEBPACK_IMPORTED_MODULE_22__.selectObjectContentTransformer()).on(\"data\", (data)=>{\n                selectResult = (0,_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_23__.parseSelectObjectContentResponse)(data);\n            }).on(\"error\", cb).on(\"end\", ()=>{\n                cb(null, selectResult);\n            });\n        });\n    }\n}\n// Promisify various public-facing APIs on the Client module.\nClient.prototype.makeBucket = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.makeBucket);\nClient.prototype.bucketExists = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.bucketExists);\nClient.prototype.getObject = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.getObject);\nClient.prototype.getPartialObject = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.getPartialObject);\nClient.prototype.fGetObject = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.fGetObject);\nClient.prototype.putObject = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.putObject);\nClient.prototype.fPutObject = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.fPutObject);\nClient.prototype.copyObject = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.copyObject);\nClient.prototype.removeObjects = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.removeObjects);\nClient.prototype.presignedUrl = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.presignedUrl);\nClient.prototype.presignedGetObject = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.presignedGetObject);\nClient.prototype.presignedPutObject = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.presignedPutObject);\nClient.prototype.presignedPostPolicy = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.presignedPostPolicy);\nClient.prototype.getBucketNotification = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.getBucketNotification);\nClient.prototype.setBucketNotification = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.setBucketNotification);\nClient.prototype.removeAllBucketNotification = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.removeAllBucketNotification);\nClient.prototype.getBucketPolicy = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.getBucketPolicy);\nClient.prototype.setBucketPolicy = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.setBucketPolicy);\nClient.prototype.removeIncompleteUpload = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.removeIncompleteUpload);\nClient.prototype.getBucketVersioning = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.getBucketVersioning);\nClient.prototype.setBucketVersioning = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.setBucketVersioning);\nClient.prototype.setBucketTagging = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.setBucketTagging);\nClient.prototype.removeBucketTagging = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.removeBucketTagging);\nClient.prototype.getBucketTagging = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.getBucketTagging);\nClient.prototype.setObjectTagging = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.setObjectTagging);\nClient.prototype.removeObjectTagging = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.removeObjectTagging);\nClient.prototype.getObjectTagging = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.getObjectTagging);\nClient.prototype.setBucketLifecycle = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.setBucketLifecycle);\nClient.prototype.getBucketLifecycle = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.getBucketLifecycle);\nClient.prototype.removeBucketLifecycle = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.removeBucketLifecycle);\nClient.prototype.setObjectLockConfig = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.setObjectLockConfig);\nClient.prototype.getObjectLockConfig = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.getObjectLockConfig);\nClient.prototype.putObjectRetention = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.putObjectRetention);\nClient.prototype.getObjectRetention = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.getObjectRetention);\nClient.prototype.setBucketEncryption = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.setBucketEncryption);\nClient.prototype.getBucketEncryption = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.getBucketEncryption);\nClient.prototype.removeBucketEncryption = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.removeBucketEncryption);\nClient.prototype.setObjectLegalHold = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.setObjectLegalHold);\nClient.prototype.getObjectLegalHold = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.getObjectLegalHold);\nClient.prototype.composeObject = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.composeObject);\nClient.prototype.selectObjectContent = (0,_promisify_mjs__WEBPACK_IMPORTED_MODULE_20__.promisify)(Client.prototype.selectObjectContent);\n// refactored API use promise internally\nClient.prototype.removeObject = (0,_internal_callbackify_mjs__WEBPACK_IMPORTED_MODULE_12__.callbackify)(Client.prototype.removeObject);\nClient.prototype.statObject = (0,_internal_callbackify_mjs__WEBPACK_IMPORTED_MODULE_12__.callbackify)(Client.prototype.statObject);\nClient.prototype.removeBucket = (0,_internal_callbackify_mjs__WEBPACK_IMPORTED_MODULE_12__.callbackify)(Client.prototype.removeBucket);\nClient.prototype.listBuckets = (0,_internal_callbackify_mjs__WEBPACK_IMPORTED_MODULE_12__.callbackify)(Client.prototype.listBuckets);\nClient.prototype.removeBucketReplication = (0,_internal_callbackify_mjs__WEBPACK_IMPORTED_MODULE_12__.callbackify)(Client.prototype.removeBucketReplication);\nClient.prototype.setBucketReplication = (0,_internal_callbackify_mjs__WEBPACK_IMPORTED_MODULE_12__.callbackify)(Client.prototype.setBucketReplication);\nClient.prototype.getBucketReplication = (0,_internal_callbackify_mjs__WEBPACK_IMPORTED_MODULE_12__.callbackify)(Client.prototype.getBucketReplication); //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/minio.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/notification.mjs":
/*!******************************************************!*\
  !*** ./node_modules/minio/dist/esm/notification.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CloudFunctionConfig: () => (/* binding */ CloudFunctionConfig),\n/* harmony export */   NotificationConfig: () => (/* binding */ NotificationConfig),\n/* harmony export */   NotificationPoller: () => (/* binding */ NotificationPoller),\n/* harmony export */   ObjectCreatedAll: () => (/* binding */ ObjectCreatedAll),\n/* harmony export */   ObjectCreatedCompleteMultipartUpload: () => (/* binding */ ObjectCreatedCompleteMultipartUpload),\n/* harmony export */   ObjectCreatedCopy: () => (/* binding */ ObjectCreatedCopy),\n/* harmony export */   ObjectCreatedPost: () => (/* binding */ ObjectCreatedPost),\n/* harmony export */   ObjectCreatedPut: () => (/* binding */ ObjectCreatedPut),\n/* harmony export */   ObjectReducedRedundancyLostObject: () => (/* binding */ ObjectReducedRedundancyLostObject),\n/* harmony export */   ObjectRemovedAll: () => (/* binding */ ObjectRemovedAll),\n/* harmony export */   ObjectRemovedDelete: () => (/* binding */ ObjectRemovedDelete),\n/* harmony export */   ObjectRemovedDeleteMarkerCreated: () => (/* binding */ ObjectRemovedDeleteMarkerCreated),\n/* harmony export */   QueueConfig: () => (/* binding */ QueueConfig),\n/* harmony export */   TopicConfig: () => (/* binding */ TopicConfig),\n/* harmony export */   buildARN: () => (/* binding */ buildARN)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var _helpers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.mjs */ \"(rsc)/./node_modules/minio/dist/esm/helpers.mjs\");\n/* harmony import */ var _internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/helper.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\");\n/* harmony import */ var _transformers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transformers.mjs */ \"(rsc)/./node_modules/minio/dist/esm/transformers.mjs\");\n/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2016 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \n\n\n\n// Notification config - array of target configs.\n// Target configs can be\n// 1. Topic (simple notification service)\n// 2. Queue (simple queue service)\n// 3. CloudFront (lambda function)\nclass NotificationConfig {\n    add(target) {\n        let instance = \"\";\n        if (target instanceof TopicConfig) {\n            instance = \"TopicConfiguration\";\n        }\n        if (target instanceof QueueConfig) {\n            instance = \"QueueConfiguration\";\n        }\n        if (target instanceof CloudFunctionConfig) {\n            instance = \"CloudFunctionConfiguration\";\n        }\n        if (!this[instance]) {\n            this[instance] = [];\n        }\n        this[instance].push(target);\n    }\n}\n// Base class for three supported configs.\nclass TargetConfig {\n    setId(id) {\n        this.Id = id;\n    }\n    addEvent(newevent) {\n        if (!this.Event) {\n            this.Event = [];\n        }\n        this.Event.push(newevent);\n    }\n    addFilterSuffix(suffix) {\n        if (!this.Filter) {\n            this.Filter = {\n                S3Key: {\n                    FilterRule: []\n                }\n            };\n        }\n        this.Filter.S3Key.FilterRule.push({\n            Name: \"suffix\",\n            Value: suffix\n        });\n    }\n    addFilterPrefix(prefix) {\n        if (!this.Filter) {\n            this.Filter = {\n                S3Key: {\n                    FilterRule: []\n                }\n            };\n        }\n        this.Filter.S3Key.FilterRule.push({\n            Name: \"prefix\",\n            Value: prefix\n        });\n    }\n}\n// 1. Topic (simple notification service)\nclass TopicConfig extends TargetConfig {\n    constructor(arn){\n        super();\n        this.Topic = arn;\n    }\n}\n// 2. Queue (simple queue service)\nclass QueueConfig extends TargetConfig {\n    constructor(arn){\n        super();\n        this.Queue = arn;\n    }\n}\n// 3. CloudFront (lambda function)\nclass CloudFunctionConfig extends TargetConfig {\n    constructor(arn){\n        super();\n        this.CloudFunction = arn;\n    }\n}\nconst buildARN = (partition, service, region, accountId, resource)=>{\n    return \"arn:\" + partition + \":\" + service + \":\" + region + \":\" + accountId + \":\" + resource;\n};\nconst ObjectCreatedAll = \"s3:ObjectCreated:*\";\nconst ObjectCreatedPut = \"s3:ObjectCreated:Put\";\nconst ObjectCreatedPost = \"s3:ObjectCreated:Post\";\nconst ObjectCreatedCopy = \"s3:ObjectCreated:Copy\";\nconst ObjectCreatedCompleteMultipartUpload = \"s3:ObjectCreated:CompleteMultipartUpload\";\nconst ObjectRemovedAll = \"s3:ObjectRemoved:*\";\nconst ObjectRemovedDelete = \"s3:ObjectRemoved:Delete\";\nconst ObjectRemovedDeleteMarkerCreated = \"s3:ObjectRemoved:DeleteMarkerCreated\";\nconst ObjectReducedRedundancyLostObject = \"s3:ReducedRedundancyLostObject\";\n// Poll for notifications, used in #listenBucketNotification.\n// Listening constitutes repeatedly requesting s3 whether or not any\n// changes have occurred.\nclass NotificationPoller extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n    constructor(client, bucketName, prefix, suffix, events){\n        super();\n        this.client = client;\n        this.bucketName = bucketName;\n        this.prefix = prefix;\n        this.suffix = suffix;\n        this.events = events;\n        this.ending = false;\n    }\n    // Starts the polling.\n    start() {\n        this.ending = false;\n        process.nextTick(()=>{\n            this.checkForChanges();\n        });\n    }\n    // Stops the polling.\n    stop() {\n        this.ending = true;\n    }\n    checkForChanges() {\n        // Don't continue if we're looping again but are cancelled.\n        if (this.ending) {\n            return;\n        }\n        let method = \"GET\";\n        var queries = [];\n        if (this.prefix) {\n            var prefix = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.uriEscape)(this.prefix);\n            queries.push(`prefix=${prefix}`);\n        }\n        if (this.suffix) {\n            var suffix = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.uriEscape)(this.suffix);\n            queries.push(`suffix=${suffix}`);\n        }\n        if (this.events) {\n            this.events.forEach((s3event)=>queries.push(\"events=\" + (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.uriEscape)(s3event)));\n        }\n        queries.sort();\n        var query = \"\";\n        if (queries.length > 0) {\n            query = `${queries.join(\"&\")}`;\n        }\n        const region = this.client.region || _helpers_mjs__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_REGION;\n        this.client.makeRequest({\n            method,\n            bucketName: this.bucketName,\n            query\n        }, \"\", [\n            200\n        ], region, true, (e, response)=>{\n            if (e) {\n                return this.emit(\"error\", e);\n            }\n            let transformer = _transformers_mjs__WEBPACK_IMPORTED_MODULE_3__.getNotificationTransformer();\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.pipesetup)(response, transformer).on(\"data\", (result)=>{\n                // Data is flushed periodically (every 5 seconds), so we should\n                // handle it after flushing from the JSON parser.\n                let records = result.Records;\n                // If null (= no records), change to an empty array.\n                if (!records) {\n                    records = [];\n                }\n                // Iterate over the notifications and emit them individually.\n                records.forEach((record)=>{\n                    this.emit(\"notification\", record);\n                });\n                // If we're done, stop.\n                if (this.ending) {\n                    response.destroy();\n                }\n            }).on(\"error\", (e)=>this.emit(\"error\", e)).on(\"end\", ()=>{\n                // Do it again, if we haven't cancelled yet.\n                process.nextTick(()=>{\n                    this.checkForChanges();\n                });\n            });\n        });\n    }\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJERUZBVUxUX1JFR0lPTiIsInBpcGVzZXR1cCIsInVyaUVzY2FwZSIsInRyYW5zZm9ybWVycyIsIk5vdGlmaWNhdGlvbkNvbmZpZyIsImFkZCIsInRhcmdldCIsImluc3RhbmNlIiwiVG9waWNDb25maWciLCJRdWV1ZUNvbmZpZyIsIkNsb3VkRnVuY3Rpb25Db25maWciLCJwdXNoIiwiVGFyZ2V0Q29uZmlnIiwic2V0SWQiLCJpZCIsIklkIiwiYWRkRXZlbnQiLCJuZXdldmVudCIsIkV2ZW50IiwiYWRkRmlsdGVyU3VmZml4Iiwic3VmZml4IiwiRmlsdGVyIiwiUzNLZXkiLCJGaWx0ZXJSdWxlIiwiTmFtZSIsIlZhbHVlIiwiYWRkRmlsdGVyUHJlZml4IiwicHJlZml4IiwiY29uc3RydWN0b3IiLCJhcm4iLCJUb3BpYyIsIlF1ZXVlIiwiQ2xvdWRGdW5jdGlvbiIsImJ1aWxkQVJOIiwicGFydGl0aW9uIiwic2VydmljZSIsInJlZ2lvbiIsImFjY291bnRJZCIsInJlc291cmNlIiwiT2JqZWN0Q3JlYXRlZEFsbCIsIk9iamVjdENyZWF0ZWRQdXQiLCJPYmplY3RDcmVhdGVkUG9zdCIsIk9iamVjdENyZWF0ZWRDb3B5IiwiT2JqZWN0Q3JlYXRlZENvbXBsZXRlTXVsdGlwYXJ0VXBsb2FkIiwiT2JqZWN0UmVtb3ZlZEFsbCIsIk9iamVjdFJlbW92ZWREZWxldGUiLCJPYmplY3RSZW1vdmVkRGVsZXRlTWFya2VyQ3JlYXRlZCIsIk9iamVjdFJlZHVjZWRSZWR1bmRhbmN5TG9zdE9iamVjdCIsIk5vdGlmaWNhdGlvblBvbGxlciIsImNsaWVudCIsImJ1Y2tldE5hbWUiLCJldmVudHMiLCJlbmRpbmciLCJzdGFydCIsInByb2Nlc3MiLCJuZXh0VGljayIsImNoZWNrRm9yQ2hhbmdlcyIsInN0b3AiLCJtZXRob2QiLCJxdWVyaWVzIiwiZm9yRWFjaCIsInMzZXZlbnQiLCJzb3J0IiwicXVlcnkiLCJsZW5ndGgiLCJqb2luIiwibWFrZVJlcXVlc3QiLCJlIiwicmVzcG9uc2UiLCJlbWl0IiwidHJhbnNmb3JtZXIiLCJnZXROb3RpZmljYXRpb25UcmFuc2Zvcm1lciIsIm9uIiwicmVzdWx0IiwicmVjb3JkcyIsIlJlY29yZHMiLCJyZWNvcmQiLCJkZXN0cm95Il0sInNvdXJjZXMiOlsibm90aWZpY2F0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaW5JTyBKYXZhc2NyaXB0IExpYnJhcnkgZm9yIEFtYXpvbiBTMyBDb21wYXRpYmxlIENsb3VkIFN0b3JhZ2UsIChDKSAyMDE2IE1pbklPLCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ25vZGU6ZXZlbnRzJ1xuXG5pbXBvcnQgeyBERUZBVUxUX1JFR0lPTiB9IGZyb20gJy4vaGVscGVycy50cydcbmltcG9ydCB7IHBpcGVzZXR1cCwgdXJpRXNjYXBlIH0gZnJvbSAnLi9pbnRlcm5hbC9oZWxwZXIudHMnXG5pbXBvcnQgKiBhcyB0cmFuc2Zvcm1lcnMgZnJvbSAnLi90cmFuc2Zvcm1lcnMuanMnXG5cbi8vIE5vdGlmaWNhdGlvbiBjb25maWcgLSBhcnJheSBvZiB0YXJnZXQgY29uZmlncy5cbi8vIFRhcmdldCBjb25maWdzIGNhbiBiZVxuLy8gMS4gVG9waWMgKHNpbXBsZSBub3RpZmljYXRpb24gc2VydmljZSlcbi8vIDIuIFF1ZXVlIChzaW1wbGUgcXVldWUgc2VydmljZSlcbi8vIDMuIENsb3VkRnJvbnQgKGxhbWJkYSBmdW5jdGlvbilcbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25Db25maWcge1xuICBhZGQodGFyZ2V0KSB7XG4gICAgbGV0IGluc3RhbmNlID0gJydcbiAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgVG9waWNDb25maWcpIHtcbiAgICAgIGluc3RhbmNlID0gJ1RvcGljQ29uZmlndXJhdGlvbidcbiAgICB9XG4gICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIFF1ZXVlQ29uZmlnKSB7XG4gICAgICBpbnN0YW5jZSA9ICdRdWV1ZUNvbmZpZ3VyYXRpb24nXG4gICAgfVxuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBDbG91ZEZ1bmN0aW9uQ29uZmlnKSB7XG4gICAgICBpbnN0YW5jZSA9ICdDbG91ZEZ1bmN0aW9uQ29uZmlndXJhdGlvbidcbiAgICB9XG4gICAgaWYgKCF0aGlzW2luc3RhbmNlXSkge1xuICAgICAgdGhpc1tpbnN0YW5jZV0gPSBbXVxuICAgIH1cbiAgICB0aGlzW2luc3RhbmNlXS5wdXNoKHRhcmdldClcbiAgfVxufVxuXG4vLyBCYXNlIGNsYXNzIGZvciB0aHJlZSBzdXBwb3J0ZWQgY29uZmlncy5cbmNsYXNzIFRhcmdldENvbmZpZyB7XG4gIHNldElkKGlkKSB7XG4gICAgdGhpcy5JZCA9IGlkXG4gIH1cbiAgYWRkRXZlbnQobmV3ZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuRXZlbnQpIHtcbiAgICAgIHRoaXMuRXZlbnQgPSBbXVxuICAgIH1cbiAgICB0aGlzLkV2ZW50LnB1c2gobmV3ZXZlbnQpXG4gIH1cbiAgYWRkRmlsdGVyU3VmZml4KHN1ZmZpeCkge1xuICAgIGlmICghdGhpcy5GaWx0ZXIpIHtcbiAgICAgIHRoaXMuRmlsdGVyID0geyBTM0tleTogeyBGaWx0ZXJSdWxlOiBbXSB9IH1cbiAgICB9XG4gICAgdGhpcy5GaWx0ZXIuUzNLZXkuRmlsdGVyUnVsZS5wdXNoKHsgTmFtZTogJ3N1ZmZpeCcsIFZhbHVlOiBzdWZmaXggfSlcbiAgfVxuICBhZGRGaWx0ZXJQcmVmaXgocHJlZml4KSB7XG4gICAgaWYgKCF0aGlzLkZpbHRlcikge1xuICAgICAgdGhpcy5GaWx0ZXIgPSB7IFMzS2V5OiB7IEZpbHRlclJ1bGU6IFtdIH0gfVxuICAgIH1cbiAgICB0aGlzLkZpbHRlci5TM0tleS5GaWx0ZXJSdWxlLnB1c2goeyBOYW1lOiAncHJlZml4JywgVmFsdWU6IHByZWZpeCB9KVxuICB9XG59XG5cbi8vIDEuIFRvcGljIChzaW1wbGUgbm90aWZpY2F0aW9uIHNlcnZpY2UpXG5leHBvcnQgY2xhc3MgVG9waWNDb25maWcgZXh0ZW5kcyBUYXJnZXRDb25maWcge1xuICBjb25zdHJ1Y3Rvcihhcm4pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5Ub3BpYyA9IGFyblxuICB9XG59XG5cbi8vIDIuIFF1ZXVlIChzaW1wbGUgcXVldWUgc2VydmljZSlcbmV4cG9ydCBjbGFzcyBRdWV1ZUNvbmZpZyBleHRlbmRzIFRhcmdldENvbmZpZyB7XG4gIGNvbnN0cnVjdG9yKGFybikge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLlF1ZXVlID0gYXJuXG4gIH1cbn1cblxuLy8gMy4gQ2xvdWRGcm9udCAobGFtYmRhIGZ1bmN0aW9uKVxuZXhwb3J0IGNsYXNzIENsb3VkRnVuY3Rpb25Db25maWcgZXh0ZW5kcyBUYXJnZXRDb25maWcge1xuICBjb25zdHJ1Y3Rvcihhcm4pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5DbG91ZEZ1bmN0aW9uID0gYXJuXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGJ1aWxkQVJOID0gKHBhcnRpdGlvbiwgc2VydmljZSwgcmVnaW9uLCBhY2NvdW50SWQsIHJlc291cmNlKSA9PiB7XG4gIHJldHVybiAnYXJuOicgKyBwYXJ0aXRpb24gKyAnOicgKyBzZXJ2aWNlICsgJzonICsgcmVnaW9uICsgJzonICsgYWNjb3VudElkICsgJzonICsgcmVzb3VyY2Vcbn1cblxuZXhwb3J0IGNvbnN0IE9iamVjdENyZWF0ZWRBbGwgPSAnczM6T2JqZWN0Q3JlYXRlZDoqJ1xuZXhwb3J0IGNvbnN0IE9iamVjdENyZWF0ZWRQdXQgPSAnczM6T2JqZWN0Q3JlYXRlZDpQdXQnXG5leHBvcnQgY29uc3QgT2JqZWN0Q3JlYXRlZFBvc3QgPSAnczM6T2JqZWN0Q3JlYXRlZDpQb3N0J1xuZXhwb3J0IGNvbnN0IE9iamVjdENyZWF0ZWRDb3B5ID0gJ3MzOk9iamVjdENyZWF0ZWQ6Q29weSdcbmV4cG9ydCBjb25zdCBPYmplY3RDcmVhdGVkQ29tcGxldGVNdWx0aXBhcnRVcGxvYWQgPSAnczM6T2JqZWN0Q3JlYXRlZDpDb21wbGV0ZU11bHRpcGFydFVwbG9hZCdcbmV4cG9ydCBjb25zdCBPYmplY3RSZW1vdmVkQWxsID0gJ3MzOk9iamVjdFJlbW92ZWQ6KidcbmV4cG9ydCBjb25zdCBPYmplY3RSZW1vdmVkRGVsZXRlID0gJ3MzOk9iamVjdFJlbW92ZWQ6RGVsZXRlJ1xuZXhwb3J0IGNvbnN0IE9iamVjdFJlbW92ZWREZWxldGVNYXJrZXJDcmVhdGVkID0gJ3MzOk9iamVjdFJlbW92ZWQ6RGVsZXRlTWFya2VyQ3JlYXRlZCdcbmV4cG9ydCBjb25zdCBPYmplY3RSZWR1Y2VkUmVkdW5kYW5jeUxvc3RPYmplY3QgPSAnczM6UmVkdWNlZFJlZHVuZGFuY3lMb3N0T2JqZWN0J1xuXG4vLyBQb2xsIGZvciBub3RpZmljYXRpb25zLCB1c2VkIGluICNsaXN0ZW5CdWNrZXROb3RpZmljYXRpb24uXG4vLyBMaXN0ZW5pbmcgY29uc3RpdHV0ZXMgcmVwZWF0ZWRseSByZXF1ZXN0aW5nIHMzIHdoZXRoZXIgb3Igbm90IGFueVxuLy8gY2hhbmdlcyBoYXZlIG9jY3VycmVkLlxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvblBvbGxlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgYnVja2V0TmFtZSwgcHJlZml4LCBzdWZmaXgsIGV2ZW50cykge1xuICAgIHN1cGVyKClcblxuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50XG4gICAgdGhpcy5idWNrZXROYW1lID0gYnVja2V0TmFtZVxuICAgIHRoaXMucHJlZml4ID0gcHJlZml4XG4gICAgdGhpcy5zdWZmaXggPSBzdWZmaXhcbiAgICB0aGlzLmV2ZW50cyA9IGV2ZW50c1xuXG4gICAgdGhpcy5lbmRpbmcgPSBmYWxzZVxuICB9XG5cbiAgLy8gU3RhcnRzIHRoZSBwb2xsaW5nLlxuICBzdGFydCgpIHtcbiAgICB0aGlzLmVuZGluZyA9IGZhbHNlXG5cbiAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgIHRoaXMuY2hlY2tGb3JDaGFuZ2VzKClcbiAgICB9KVxuICB9XG5cbiAgLy8gU3RvcHMgdGhlIHBvbGxpbmcuXG4gIHN0b3AoKSB7XG4gICAgdGhpcy5lbmRpbmcgPSB0cnVlXG4gIH1cblxuICBjaGVja0ZvckNoYW5nZXMoKSB7XG4gICAgLy8gRG9uJ3QgY29udGludWUgaWYgd2UncmUgbG9vcGluZyBhZ2FpbiBidXQgYXJlIGNhbmNlbGxlZC5cbiAgICBpZiAodGhpcy5lbmRpbmcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBtZXRob2QgPSAnR0VUJ1xuICAgIHZhciBxdWVyaWVzID0gW11cbiAgICBpZiAodGhpcy5wcmVmaXgpIHtcbiAgICAgIHZhciBwcmVmaXggPSB1cmlFc2NhcGUodGhpcy5wcmVmaXgpXG4gICAgICBxdWVyaWVzLnB1c2goYHByZWZpeD0ke3ByZWZpeH1gKVxuICAgIH1cbiAgICBpZiAodGhpcy5zdWZmaXgpIHtcbiAgICAgIHZhciBzdWZmaXggPSB1cmlFc2NhcGUodGhpcy5zdWZmaXgpXG4gICAgICBxdWVyaWVzLnB1c2goYHN1ZmZpeD0ke3N1ZmZpeH1gKVxuICAgIH1cbiAgICBpZiAodGhpcy5ldmVudHMpIHtcbiAgICAgIHRoaXMuZXZlbnRzLmZvckVhY2goKHMzZXZlbnQpID0+IHF1ZXJpZXMucHVzaCgnZXZlbnRzPScgKyB1cmlFc2NhcGUoczNldmVudCkpKVxuICAgIH1cbiAgICBxdWVyaWVzLnNvcnQoKVxuXG4gICAgdmFyIHF1ZXJ5ID0gJydcbiAgICBpZiAocXVlcmllcy5sZW5ndGggPiAwKSB7XG4gICAgICBxdWVyeSA9IGAke3F1ZXJpZXMuam9pbignJicpfWBcbiAgICB9XG4gICAgY29uc3QgcmVnaW9uID0gdGhpcy5jbGllbnQucmVnaW9uIHx8IERFRkFVTFRfUkVHSU9OXG4gICAgdGhpcy5jbGllbnQubWFrZVJlcXVlc3QoeyBtZXRob2QsIGJ1Y2tldE5hbWU6IHRoaXMuYnVja2V0TmFtZSwgcXVlcnkgfSwgJycsIFsyMDBdLCByZWdpb24sIHRydWUsIChlLCByZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBlKVxuICAgICAgfVxuXG4gICAgICBsZXQgdHJhbnNmb3JtZXIgPSB0cmFuc2Zvcm1lcnMuZ2V0Tm90aWZpY2F0aW9uVHJhbnNmb3JtZXIoKVxuICAgICAgcGlwZXNldHVwKHJlc3BvbnNlLCB0cmFuc2Zvcm1lcilcbiAgICAgICAgLm9uKCdkYXRhJywgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgIC8vIERhdGEgaXMgZmx1c2hlZCBwZXJpb2RpY2FsbHkgKGV2ZXJ5IDUgc2Vjb25kcyksIHNvIHdlIHNob3VsZFxuICAgICAgICAgIC8vIGhhbmRsZSBpdCBhZnRlciBmbHVzaGluZyBmcm9tIHRoZSBKU09OIHBhcnNlci5cbiAgICAgICAgICBsZXQgcmVjb3JkcyA9IHJlc3VsdC5SZWNvcmRzXG4gICAgICAgICAgLy8gSWYgbnVsbCAoPSBubyByZWNvcmRzKSwgY2hhbmdlIHRvIGFuIGVtcHR5IGFycmF5LlxuICAgICAgICAgIGlmICghcmVjb3Jkcykge1xuICAgICAgICAgICAgcmVjb3JkcyA9IFtdXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBub3RpZmljYXRpb25zIGFuZCBlbWl0IHRoZW0gaW5kaXZpZHVhbGx5LlxuICAgICAgICAgIHJlY29yZHMuZm9yRWFjaCgocmVjb3JkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ25vdGlmaWNhdGlvbicsIHJlY29yZClcbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgLy8gSWYgd2UncmUgZG9uZSwgc3RvcC5cbiAgICAgICAgICBpZiAodGhpcy5lbmRpbmcpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmRlc3Ryb3koKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdlcnJvcicsIChlKSA9PiB0aGlzLmVtaXQoJ2Vycm9yJywgZSkpXG4gICAgICAgIC5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgIC8vIERvIGl0IGFnYWluLCBpZiB3ZSBoYXZlbid0IGNhbmNlbGxlZCB5ZXQuXG4gICAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrRm9yQ2hhbmdlcygpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9KVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxZQUFZO0FBRXJCLFNBQVNDLGNBQWMsUUFBUSxlQUFjO0FBQzdDLFNBQVNDLFNBQVMsRUFBRUMsU0FBUyxRQUFRLHVCQUFzQjtBQUMzRCxPQUFPLEtBQUtDLFlBQVksTUFBTSxvQkFBbUI7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1DLGtCQUFrQixDQUFDO0VBQzlCQyxHQUFHQSxDQUFDQyxNQUFNLEVBQUU7SUFDVixJQUFJQyxRQUFRLEdBQUcsRUFBRTtJQUNqQixJQUFJRCxNQUFNLFlBQVlFLFdBQVcsRUFBRTtNQUNqQ0QsUUFBUSxHQUFHLG9CQUFvQjtJQUNqQztJQUNBLElBQUlELE1BQU0sWUFBWUcsV0FBVyxFQUFFO01BQ2pDRixRQUFRLEdBQUcsb0JBQW9CO0lBQ2pDO0lBQ0EsSUFBSUQsTUFBTSxZQUFZSSxtQkFBbUIsRUFBRTtNQUN6Q0gsUUFBUSxHQUFHLDRCQUE0QjtJQUN6QztJQUNBLElBQUksQ0FBQyxJQUFJLENBQUNBLFFBQVEsQ0FBQyxFQUFFO01BQ25CLElBQUksQ0FBQ0EsUUFBUSxDQUFDLEdBQUcsRUFBRTtJQUNyQjtJQUNBLElBQUksQ0FBQ0EsUUFBUSxDQUFDLENBQUNJLElBQUksQ0FBQ0wsTUFBTSxDQUFDO0VBQzdCO0FBQ0Y7O0FBRUE7QUFDQSxNQUFNTSxZQUFZLENBQUM7RUFDakJDLEtBQUtBLENBQUNDLEVBQUUsRUFBRTtJQUNSLElBQUksQ0FBQ0MsRUFBRSxHQUFHRCxFQUFFO0VBQ2Q7RUFDQUUsUUFBUUEsQ0FBQ0MsUUFBUSxFQUFFO0lBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUNDLEtBQUssRUFBRTtNQUNmLElBQUksQ0FBQ0EsS0FBSyxHQUFHLEVBQUU7SUFDakI7SUFDQSxJQUFJLENBQUNBLEtBQUssQ0FBQ1AsSUFBSSxDQUFDTSxRQUFRLENBQUM7RUFDM0I7RUFDQUUsZUFBZUEsQ0FBQ0MsTUFBTSxFQUFFO0lBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUNDLE1BQU0sRUFBRTtNQUNoQixJQUFJLENBQUNBLE1BQU0sR0FBRztRQUFFQyxLQUFLLEVBQUU7VUFBRUMsVUFBVSxFQUFFO1FBQUc7TUFBRSxDQUFDO0lBQzdDO0lBQ0EsSUFBSSxDQUFDRixNQUFNLENBQUNDLEtBQUssQ0FBQ0MsVUFBVSxDQUFDWixJQUFJLENBQUM7TUFBRWEsSUFBSSxFQUFFLFFBQVE7TUFBRUMsS0FBSyxFQUFFTDtJQUFPLENBQUMsQ0FBQztFQUN0RTtFQUNBTSxlQUFlQSxDQUFDQyxNQUFNLEVBQUU7SUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQ04sTUFBTSxFQUFFO01BQ2hCLElBQUksQ0FBQ0EsTUFBTSxHQUFHO1FBQUVDLEtBQUssRUFBRTtVQUFFQyxVQUFVLEVBQUU7UUFBRztNQUFFLENBQUM7SUFDN0M7SUFDQSxJQUFJLENBQUNGLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDQyxVQUFVLENBQUNaLElBQUksQ0FBQztNQUFFYSxJQUFJLEVBQUUsUUFBUTtNQUFFQyxLQUFLLEVBQUVFO0lBQU8sQ0FBQyxDQUFDO0VBQ3RFO0FBQ0Y7O0FBRUE7QUFDQSxPQUFPLE1BQU1uQixXQUFXLFNBQVNJLFlBQVksQ0FBQztFQUM1Q2dCLFdBQVdBLENBQUNDLEdBQUcsRUFBRTtJQUNmLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDQyxLQUFLLEdBQUdELEdBQUc7RUFDbEI7QUFDRjs7QUFFQTtBQUNBLE9BQU8sTUFBTXBCLFdBQVcsU0FBU0csWUFBWSxDQUFDO0VBQzVDZ0IsV0FBV0EsQ0FBQ0MsR0FBRyxFQUFFO0lBQ2YsS0FBSyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUNFLEtBQUssR0FBR0YsR0FBRztFQUNsQjtBQUNGOztBQUVBO0FBQ0EsT0FBTyxNQUFNbkIsbUJBQW1CLFNBQVNFLFlBQVksQ0FBQztFQUNwRGdCLFdBQVdBLENBQUNDLEdBQUcsRUFBRTtJQUNmLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDRyxhQUFhLEdBQUdILEdBQUc7RUFDMUI7QUFDRjtBQUVBLE9BQU8sTUFBTUksUUFBUSxHQUFHQSxDQUFDQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFFBQVEsS0FBSztFQUMzRSxPQUFPLE1BQU0sR0FBR0osU0FBUyxHQUFHLEdBQUcsR0FBR0MsT0FBTyxHQUFHLEdBQUcsR0FBR0MsTUFBTSxHQUFHLEdBQUcsR0FBR0MsU0FBUyxHQUFHLEdBQUcsR0FBR0MsUUFBUTtBQUM3RixDQUFDO0FBRUQsT0FBTyxNQUFNQyxnQkFBZ0IsR0FBRyxvQkFBb0I7QUFDcEQsT0FBTyxNQUFNQyxnQkFBZ0IsR0FBRyxzQkFBc0I7QUFDdEQsT0FBTyxNQUFNQyxpQkFBaUIsR0FBRyx1QkFBdUI7QUFDeEQsT0FBTyxNQUFNQyxpQkFBaUIsR0FBRyx1QkFBdUI7QUFDeEQsT0FBTyxNQUFNQyxvQ0FBb0MsR0FBRywwQ0FBMEM7QUFDOUYsT0FBTyxNQUFNQyxnQkFBZ0IsR0FBRyxvQkFBb0I7QUFDcEQsT0FBTyxNQUFNQyxtQkFBbUIsR0FBRyx5QkFBeUI7QUFDNUQsT0FBTyxNQUFNQyxnQ0FBZ0MsR0FBRyxzQ0FBc0M7QUFDdEYsT0FBTyxNQUFNQyxpQ0FBaUMsR0FBRyxnQ0FBZ0M7O0FBRWpGO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTUMsa0JBQWtCLFNBQVNqRCxZQUFZLENBQUM7RUFDbkQ2QixXQUFXQSxDQUFDcUIsTUFBTSxFQUFFQyxVQUFVLEVBQUV2QixNQUFNLEVBQUVQLE1BQU0sRUFBRStCLE1BQU0sRUFBRTtJQUN0RCxLQUFLLENBQUMsQ0FBQztJQUVQLElBQUksQ0FBQ0YsTUFBTSxHQUFHQSxNQUFNO0lBQ3BCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQSxVQUFVO0lBQzVCLElBQUksQ0FBQ3ZCLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNQLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUMrQixNQUFNLEdBQUdBLE1BQU07SUFFcEIsSUFBSSxDQUFDQyxNQUFNLEdBQUcsS0FBSztFQUNyQjs7RUFFQTtFQUNBQyxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUNELE1BQU0sR0FBRyxLQUFLO0lBRW5CRSxPQUFPLENBQUNDLFFBQVEsQ0FBQyxNQUFNO01BQ3JCLElBQUksQ0FBQ0MsZUFBZSxDQUFDLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0VBQ0o7O0VBRUE7RUFDQUMsSUFBSUEsQ0FBQSxFQUFHO0lBQ0wsSUFBSSxDQUFDTCxNQUFNLEdBQUcsSUFBSTtFQUNwQjtFQUVBSSxlQUFlQSxDQUFBLEVBQUc7SUFDaEI7SUFDQSxJQUFJLElBQUksQ0FBQ0osTUFBTSxFQUFFO01BQ2Y7SUFDRjtJQUVBLElBQUlNLE1BQU0sR0FBRyxLQUFLO0lBQ2xCLElBQUlDLE9BQU8sR0FBRyxFQUFFO0lBQ2hCLElBQUksSUFBSSxDQUFDaEMsTUFBTSxFQUFFO01BQ2YsSUFBSUEsTUFBTSxHQUFHekIsU0FBUyxDQUFDLElBQUksQ0FBQ3lCLE1BQU0sQ0FBQztNQUNuQ2dDLE9BQU8sQ0FBQ2hELElBQUksQ0FBRSxVQUFTZ0IsTUFBTyxFQUFDLENBQUM7SUFDbEM7SUFDQSxJQUFJLElBQUksQ0FBQ1AsTUFBTSxFQUFFO01BQ2YsSUFBSUEsTUFBTSxHQUFHbEIsU0FBUyxDQUFDLElBQUksQ0FBQ2tCLE1BQU0sQ0FBQztNQUNuQ3VDLE9BQU8sQ0FBQ2hELElBQUksQ0FBRSxVQUFTUyxNQUFPLEVBQUMsQ0FBQztJQUNsQztJQUNBLElBQUksSUFBSSxDQUFDK0IsTUFBTSxFQUFFO01BQ2YsSUFBSSxDQUFDQSxNQUFNLENBQUNTLE9BQU8sQ0FBRUMsT0FBTyxJQUFLRixPQUFPLENBQUNoRCxJQUFJLENBQUMsU0FBUyxHQUFHVCxTQUFTLENBQUMyRCxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hGO0lBQ0FGLE9BQU8sQ0FBQ0csSUFBSSxDQUFDLENBQUM7SUFFZCxJQUFJQyxLQUFLLEdBQUcsRUFBRTtJQUNkLElBQUlKLE9BQU8sQ0FBQ0ssTUFBTSxHQUFHLENBQUMsRUFBRTtNQUN0QkQsS0FBSyxHQUFJLEdBQUVKLE9BQU8sQ0FBQ00sSUFBSSxDQUFDLEdBQUcsQ0FBRSxFQUFDO0lBQ2hDO0lBQ0EsTUFBTTdCLE1BQU0sR0FBRyxJQUFJLENBQUNhLE1BQU0sQ0FBQ2IsTUFBTSxJQUFJcEMsY0FBYztJQUNuRCxJQUFJLENBQUNpRCxNQUFNLENBQUNpQixXQUFXLENBQUM7TUFBRVIsTUFBTTtNQUFFUixVQUFVLEVBQUUsSUFBSSxDQUFDQSxVQUFVO01BQUVhO0lBQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFM0IsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDK0IsQ0FBQyxFQUFFQyxRQUFRLEtBQUs7TUFDaEgsSUFBSUQsQ0FBQyxFQUFFO1FBQ0wsT0FBTyxJQUFJLENBQUNFLElBQUksQ0FBQyxPQUFPLEVBQUVGLENBQUMsQ0FBQztNQUM5QjtNQUVBLElBQUlHLFdBQVcsR0FBR25FLFlBQVksQ0FBQ29FLDBCQUEwQixDQUFDLENBQUM7TUFDM0R0RSxTQUFTLENBQUNtRSxRQUFRLEVBQUVFLFdBQVcsQ0FBQyxDQUM3QkUsRUFBRSxDQUFDLE1BQU0sRUFBR0MsTUFBTSxJQUFLO1FBQ3RCO1FBQ0E7UUFDQSxJQUFJQyxPQUFPLEdBQUdELE1BQU0sQ0FBQ0UsT0FBTztRQUM1QjtRQUNBLElBQUksQ0FBQ0QsT0FBTyxFQUFFO1VBQ1pBLE9BQU8sR0FBRyxFQUFFO1FBQ2Q7O1FBRUE7UUFDQUEsT0FBTyxDQUFDZCxPQUFPLENBQUVnQixNQUFNLElBQUs7VUFDMUIsSUFBSSxDQUFDUCxJQUFJLENBQUMsY0FBYyxFQUFFTyxNQUFNLENBQUM7UUFDbkMsQ0FBQyxDQUFDOztRQUVGO1FBQ0EsSUFBSSxJQUFJLENBQUN4QixNQUFNLEVBQUU7VUFDZmdCLFFBQVEsQ0FBQ1MsT0FBTyxDQUFDLENBQUM7UUFDcEI7TUFDRixDQUFDLENBQUMsQ0FDREwsRUFBRSxDQUFDLE9BQU8sRUFBR0wsQ0FBQyxJQUFLLElBQUksQ0FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRUYsQ0FBQyxDQUFDLENBQUMsQ0FDekNLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTTtRQUNmO1FBQ0FsQixPQUFPLENBQUNDLFFBQVEsQ0FBQyxNQUFNO1VBQ3JCLElBQUksQ0FBQ0MsZUFBZSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDO01BQ0osQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDO0VBQ0o7QUFDRiJ9\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/notification.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/object-uploader.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/minio/dist/esm/object-uploader.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectUploader: () => (/* binding */ ObjectUploader),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! query-string */ \"(rsc)/./node_modules/query-string/index.js\");\n/* harmony import */ var _internal_helper_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/helper.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\");\n/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2016 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \n\n\n\n// We extend Transform because Writable does not implement ._flush().\nclass ObjectUploader extends stream__WEBPACK_IMPORTED_MODULE_1__.Transform {\n    constructor(client, bucketName, objectName, partSize, metaData, callback){\n        super();\n        this.emptyStream = true;\n        this.client = client;\n        this.bucketName = bucketName;\n        this.objectName = objectName;\n        // The size of each multipart, chunked by BlockStream2.\n        this.partSize = partSize;\n        // This is the metadata for the object.\n        this.metaData = metaData;\n        // Call like: callback(error, {etag, versionId}).\n        this.callback = callback;\n        // We need to keep track of what number chunk/part we're on. This increments\n        // each time _write() is called. Starts with 1, not 0.\n        this.partNumber = 1;\n        // A list of the previously uploaded chunks, for resuming a file upload. This\n        // will be null if we aren't resuming an upload.\n        this.oldParts = null;\n        // Keep track of the etags for aggregating the chunks together later. Each\n        // etag represents a single chunk of the file.\n        this.etags = [];\n        // This is for the multipart upload request — if null, we're either not initiated\n        // yet or we're flushing in one packet.\n        this.id = null;\n        // Handle errors.\n        this.on(\"error\", (err)=>{\n            callback(err);\n        });\n    }\n    _transform(chunk, encoding, callback) {\n        this.emptyStream = false;\n        let method = \"PUT\";\n        let headers = {\n            \"Content-Length\": chunk.length\n        };\n        let md5digest = \"\";\n        // Calculate and set Content-MD5 header if SHA256 is not set.\n        // This will happen only when there is a secure connection to the s3 server.\n        if (!this.client.enableSHA256) {\n            md5digest = crypto__WEBPACK_IMPORTED_MODULE_0__.createHash(\"md5\").update(chunk).digest();\n            headers[\"Content-MD5\"] = md5digest.toString(\"base64\");\n        }\n        // We can flush the object in one packet if it fits in one chunk. This is true\n        // if the chunk size is smaller than the part size, signifying the end of the\n        // stream.\n        if (this.partNumber == 1 && chunk.length < this.partSize) {\n            // PUT the chunk in a single request — use an empty query.\n            let options = {\n                method,\n                // Set user metadata as this is not a multipart upload\n                headers: Object.assign({}, this.metaData, headers),\n                query: \"\",\n                bucketName: this.bucketName,\n                objectName: this.objectName\n            };\n            this.client.makeRequest(options, chunk, [\n                200\n            ], \"\", true, (err, response)=>{\n                if (err) {\n                    return callback(err);\n                }\n                let result = {\n                    etag: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_3__.sanitizeETag)(response.headers.etag),\n                    versionId: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_3__.getVersionId)(response.headers)\n                };\n                // Ignore the 'data' event so that the stream closes. (nodejs stream requirement)\n                response.on(\"data\", ()=>{});\n                // Give the etag back, we're done!\n                process.nextTick(()=>{\n                    this.callback(null, result);\n                });\n                // Because we're sure the stream has ended, allow it to flush and end.\n                callback();\n            });\n            return;\n        }\n        // If we aren't flushing in one packet, we need to initiate the multipart upload,\n        // if it hasn't already been done. The write will be buffered until the upload has been\n        // initiated.\n        if (this.id === null) {\n            this.once(\"ready\", ()=>{\n                this._transform(chunk, encoding, callback);\n            });\n            // Check for an incomplete previous upload.\n            this.client.findUploadId(this.bucketName, this.objectName, (err, id)=>{\n                if (err) {\n                    return this.emit(\"error\", err);\n                }\n                // If no upload ID exists, initiate a new one.\n                if (!id) {\n                    this.client.initiateNewMultipartUpload(this.bucketName, this.objectName, this.metaData).then((id)=>{\n                        this.id = id;\n                        // We are now ready to accept new chunks — this will flush the buffered chunk.\n                        this.emit(\"ready\");\n                    }, (err)=>callback(err));\n                    return;\n                }\n                this.id = id;\n                // Retrieve the pre-uploaded parts, if we need to resume the upload.\n                this.client.listParts(this.bucketName, this.objectName, id).then((etags)=>{\n                    // It is possible for no parts to be already uploaded.\n                    if (!etags) {\n                        etags = [];\n                    }\n                    // oldParts will become an object, allowing oldParts[partNumber].etag\n                    this.oldParts = etags.reduce(function(prev, item) {\n                        if (!prev[item.part]) {\n                            prev[item.part] = item;\n                        }\n                        return prev;\n                    }, {});\n                    this.emit(\"ready\");\n                }, (err)=>{\n                    return this.emit(\"error\", err);\n                });\n            });\n            return;\n        }\n        // Continue uploading various parts if we have initiated multipart upload.\n        let partNumber = this.partNumber++;\n        // Check to see if we've already uploaded this chunk. If the hash sums match,\n        // we can skip to the next chunk.\n        if (this.oldParts) {\n            let oldPart = this.oldParts[partNumber];\n            // Calulcate the md5 hash, if it has not already been calculated.\n            if (!md5digest) {\n                md5digest = crypto__WEBPACK_IMPORTED_MODULE_0__.createHash(\"md5\").update(chunk).digest();\n            }\n            if (oldPart && md5digest.toString(\"hex\") === oldPart.etag) {\n                // The md5 matches, the chunk has already been uploaded.\n                this.etags.push({\n                    part: partNumber,\n                    etag: oldPart.etag\n                });\n                callback();\n                return;\n            }\n        }\n        // Write the chunk with an uploader.\n        let query = query_string__WEBPACK_IMPORTED_MODULE_2__.stringify({\n            partNumber: partNumber,\n            uploadId: this.id\n        });\n        let options = {\n            method,\n            query,\n            headers,\n            bucketName: this.bucketName,\n            objectName: this.objectName\n        };\n        this.client.makeRequest(options, chunk, [\n            200\n        ], \"\", true, (err, response)=>{\n            if (err) {\n                return callback(err);\n            }\n            // In order to aggregate the parts together, we need to collect the etags.\n            let etag = response.headers.etag;\n            if (etag) {\n                etag = etag.replace(/^\"/, \"\").replace(/\"$/, \"\");\n            }\n            this.etags.push({\n                part: partNumber,\n                etag\n            });\n            // Ignore the 'data' event so that the stream closes. (nodejs stream requirement)\n            response.on(\"data\", ()=>{});\n            // We're ready for the next chunk.\n            callback();\n        });\n    }\n    _flush(callback) {\n        if (this.emptyStream) {\n            let method = \"PUT\";\n            let headers = Object.assign({}, this.metaData, {\n                \"Content-Length\": 0\n            });\n            let options = {\n                method,\n                headers,\n                query: \"\",\n                bucketName: this.bucketName,\n                objectName: this.objectName\n            };\n            this.client.makeRequest(options, \"\", [\n                200\n            ], \"\", true, (err, response)=>{\n                if (err) {\n                    return callback(err);\n                }\n                let result = {\n                    etag: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_3__.sanitizeETag)(response.headers.etag),\n                    versionId: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_3__.getVersionId)(response.headers)\n                };\n                // Ignore the 'data' event so that the stream closes. (nodejs stream requirement)\n                response.on(\"data\", ()=>{});\n                // Give the etag back, we're done!\n                process.nextTick(()=>{\n                    this.callback(null, result);\n                });\n                // Because we're sure the stream has ended, allow it to flush and end.\n                callback();\n            });\n            return;\n        }\n        // If it has been uploaded in a single packet, we don't have to do anything.\n        if (this.id === null) {\n            return;\n        }\n        // This is called when all of the chunks uploaded successfully, thus\n        // completing the multipart upload.\n        this.client.completeMultipartUpload(this.bucketName, this.objectName, this.id, this.etags, (err, etag)=>{\n            if (err) {\n                return callback(err);\n            }\n            // Call our callback on the next tick to allow the streams infrastructure\n            // to finish what its doing before we continue.\n            process.nextTick(()=>{\n                this.callback(null, etag);\n            });\n            callback();\n        });\n    }\n}\n// deprecated default export, please use named exports.\n// keep for backward compatibility.\n// eslint-disable-next-line import/no-default-export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ObjectUploader); //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/object-uploader.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/promisify.mjs":
/*!***************************************************!*\
  !*** ./node_modules/minio/dist/esm/promisify.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   promisify: () => (/* binding */ promisify)\n/* harmony export */ });\n// Returns a wrapper function that will promisify a given callback function.\n// It will preserve 'this'.\nfunction promisify(fn) {\n    return function() {\n        // If the last argument is a function, assume its the callback.\n        let callback = arguments[arguments.length - 1];\n        // If the callback is given, don't promisify, just pass straight in.\n        if (typeof callback === \"function\") {\n            return fn.apply(this, arguments);\n        }\n        // Otherwise, create a new set of arguments, and wrap\n        // it in a promise.\n        let args = [\n            ...arguments\n        ];\n        return new Promise((resolve, reject)=>{\n            // Add the callback function.\n            args.push((err, value)=>{\n                if (err) {\n                    return reject(err);\n                }\n                resolve(value);\n            });\n            // Call the function with our special adaptor callback added.\n            fn.apply(this, args);\n        });\n    };\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwcm9taXNpZnkiLCJmbiIsImNhbGxiYWNrIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJhcmdzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwdXNoIiwiZXJyIiwidmFsdWUiXSwic291cmNlcyI6WyJwcm9taXNpZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUmV0dXJucyBhIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCB3aWxsIHByb21pc2lmeSBhIGdpdmVuIGNhbGxiYWNrIGZ1bmN0aW9uLlxuLy8gSXQgd2lsbCBwcmVzZXJ2ZSAndGhpcycuXG5leHBvcnQgZnVuY3Rpb24gcHJvbWlzaWZ5KGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gSWYgdGhlIGxhc3QgYXJndW1lbnQgaXMgYSBmdW5jdGlvbiwgYXNzdW1lIGl0cyB0aGUgY2FsbGJhY2suXG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXVxuXG4gICAgLy8gSWYgdGhlIGNhbGxiYWNrIGlzIGdpdmVuLCBkb24ndCBwcm9taXNpZnksIGp1c3QgcGFzcyBzdHJhaWdodCBpbi5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgY3JlYXRlIGEgbmV3IHNldCBvZiBhcmd1bWVudHMsIGFuZCB3cmFwXG4gICAgLy8gaXQgaW4gYSBwcm9taXNlLlxuICAgIGxldCBhcmdzID0gWy4uLmFyZ3VtZW50c11cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBBZGQgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAgYXJncy5wdXNoKChlcnIsIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycilcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc29sdmUodmFsdWUpXG4gICAgICB9KVxuXG4gICAgICAvLyBDYWxsIHRoZSBmdW5jdGlvbiB3aXRoIG91ciBzcGVjaWFsIGFkYXB0b3IgY2FsbGJhY2sgYWRkZWQuXG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmdzKVxuICAgIH0pXG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLE9BQU8sU0FBU0EsU0FBU0EsQ0FBQ0MsRUFBRSxFQUFFO0VBQzVCLE9BQU8sWUFBWTtJQUNqQjtJQUNBLElBQUlDLFFBQVEsR0FBR0MsU0FBUyxDQUFDQSxTQUFTLENBQUNDLE1BQU0sR0FBRyxDQUFDLENBQUM7O0lBRTlDO0lBQ0EsSUFBSSxPQUFPRixRQUFRLEtBQUssVUFBVSxFQUFFO01BQ2xDLE9BQU9ELEVBQUUsQ0FBQ0ksS0FBSyxDQUFDLElBQUksRUFBRUYsU0FBUyxDQUFDO0lBQ2xDOztJQUVBO0lBQ0E7SUFDQSxJQUFJRyxJQUFJLEdBQUcsQ0FBQyxHQUFHSCxTQUFTLENBQUM7SUFFekIsT0FBTyxJQUFJSSxPQUFPLENBQUMsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEtBQUs7TUFDdEM7TUFDQUgsSUFBSSxDQUFDSSxJQUFJLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLEtBQUs7UUFDeEIsSUFBSUQsR0FBRyxFQUFFO1VBQ1AsT0FBT0YsTUFBTSxDQUFDRSxHQUFHLENBQUM7UUFDcEI7UUFFQUgsT0FBTyxDQUFDSSxLQUFLLENBQUM7TUFDaEIsQ0FBQyxDQUFDOztNQUVGO01BQ0FYLEVBQUUsQ0FBQ0ksS0FBSyxDQUFDLElBQUksRUFBRUMsSUFBSSxDQUFDO0lBQ3RCLENBQUMsQ0FBQztFQUNKLENBQUM7QUFDSCJ9\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWluaW8vZGlzdC9lc20vcHJvbWlzaWZ5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsNEVBQTRFO0FBQzVFLDJCQUEyQjtBQUNwQixTQUFTQSxVQUFVQyxFQUFFO0lBQzFCLE9BQU87UUFDTCwrREFBK0Q7UUFDL0QsSUFBSUMsV0FBV0MsU0FBUyxDQUFDQSxVQUFVQyxNQUFNLEdBQUcsRUFBRTtRQUU5QyxvRUFBb0U7UUFDcEUsSUFBSSxPQUFPRixhQUFhLFlBQVk7WUFDbEMsT0FBT0QsR0FBR0ksS0FBSyxDQUFDLElBQUksRUFBRUY7UUFDeEI7UUFFQSxxREFBcUQ7UUFDckQsbUJBQW1CO1FBQ25CLElBQUlHLE9BQU87ZUFBSUg7U0FBVTtRQUN6QixPQUFPLElBQUlJLFFBQVEsQ0FBQ0MsU0FBU0M7WUFDM0IsNkJBQTZCO1lBQzdCSCxLQUFLSSxJQUFJLENBQUMsQ0FBQ0MsS0FBS0M7Z0JBQ2QsSUFBSUQsS0FBSztvQkFDUCxPQUFPRixPQUFPRTtnQkFDaEI7Z0JBQ0FILFFBQVFJO1lBQ1Y7WUFFQSw2REFBNkQ7WUFDN0RYLEdBQUdJLEtBQUssQ0FBQyxJQUFJLEVBQUVDO1FBQ2pCO0lBQ0Y7QUFDRixFQUNBLGd4RUFBZ3hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmlsZS1tYW5hZ2VtZW50LXN5c3RlbS8uL25vZGVfbW9kdWxlcy9taW5pby9kaXN0L2VzbS9wcm9taXNpZnkubWpzP2VhMTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUmV0dXJucyBhIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCB3aWxsIHByb21pc2lmeSBhIGdpdmVuIGNhbGxiYWNrIGZ1bmN0aW9uLlxuLy8gSXQgd2lsbCBwcmVzZXJ2ZSAndGhpcycuXG5leHBvcnQgZnVuY3Rpb24gcHJvbWlzaWZ5KGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gSWYgdGhlIGxhc3QgYXJndW1lbnQgaXMgYSBmdW5jdGlvbiwgYXNzdW1lIGl0cyB0aGUgY2FsbGJhY2suXG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcblxuICAgIC8vIElmIHRoZSBjYWxsYmFjayBpcyBnaXZlbiwgZG9uJ3QgcHJvbWlzaWZ5LCBqdXN0IHBhc3Mgc3RyYWlnaHQgaW4uXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBjcmVhdGUgYSBuZXcgc2V0IG9mIGFyZ3VtZW50cywgYW5kIHdyYXBcbiAgICAvLyBpdCBpbiBhIHByb21pc2UuXG4gICAgbGV0IGFyZ3MgPSBbLi4uYXJndW1lbnRzXTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy8gQWRkIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgIGFyZ3MucHVzaCgoZXJyLCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIENhbGwgdGhlIGZ1bmN0aW9uIHdpdGggb3VyIHNwZWNpYWwgYWRhcHRvciBjYWxsYmFjayBhZGRlZC5cbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUp3Y205dGFYTnBabmtpTENKbWJpSXNJbU5oYkd4aVlXTnJJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aVlYQndiSGtpTENKaGNtZHpJaXdpVUhKdmJXbHpaU0lzSW5KbGMyOXNkbVVpTENKeVpXcGxZM1FpTENKd2RYTm9JaXdpWlhKeUlpd2lkbUZzZFdVaVhTd2ljMjkxY21ObGN5STZXeUp3Y205dGFYTnBabmt1YW5NaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnVW1WMGRYSnVjeUJoSUhkeVlYQndaWElnWm5WdVkzUnBiMjRnZEdoaGRDQjNhV3hzSUhCeWIyMXBjMmxtZVNCaElHZHBkbVZ1SUdOaGJHeGlZV05ySUdaMWJtTjBhVzl1TGx4dUx5OGdTWFFnZDJsc2JDQndjbVZ6WlhKMlpTQW5kR2hwY3ljdVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2NISnZiV2x6YVdaNUtHWnVLU0I3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0x5OGdTV1lnZEdobElHeGhjM1FnWVhKbmRXMWxiblFnYVhNZ1lTQm1kVzVqZEdsdmJpd2dZWE56ZFcxbElHbDBjeUIwYUdVZ1kyRnNiR0poWTJzdVhHNGdJQ0FnYkdWMElHTmhiR3hpWVdOcklEMGdZWEpuZFcxbGJuUnpXMkZ5WjNWdFpXNTBjeTVzWlc1bmRHZ2dMU0F4WFZ4dVhHNGdJQ0FnTHk4Z1NXWWdkR2hsSUdOaGJHeGlZV05ySUdseklHZHBkbVZ1TENCa2IyNG5kQ0J3Y205dGFYTnBabmtzSUdwMWMzUWdjR0Z6Y3lCemRISmhhV2RvZENCcGJpNWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHTmhiR3hpWVdOcklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRTkwYUdWeWQybHpaU3dnWTNKbFlYUmxJR0VnYm1WM0lITmxkQ0J2WmlCaGNtZDFiV1Z1ZEhNc0lHRnVaQ0IzY21Gd1hHNGdJQ0FnTHk4Z2FYUWdhVzRnWVNCd2NtOXRhWE5sTGx4dUlDQWdJR3hsZENCaGNtZHpJRDBnV3k0dUxtRnlaM1Z0Wlc1MGMxMWNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdJQ0F2THlCQlpHUWdkR2hsSUdOaGJHeGlZV05ySUdaMWJtTjBhVzl1TGx4dUlDQWdJQ0FnWVhKbmN5NXdkWE5vS0NobGNuSXNJSFpoYkhWbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnFaV04wS0dWeWNpbGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvZG1Gc2RXVXBYRzRnSUNBZ0lDQjlLVnh1WEc0Z0lDQWdJQ0F2THlCRFlXeHNJSFJvWlNCbWRXNWpkR2x2YmlCM2FYUm9JRzkxY2lCemNHVmphV0ZzSUdGa1lYQjBiM0lnWTJGc2JHSmhZMnNnWVdSa1pXUXVYRzRnSUNBZ0lDQm1iaTVoY0hCc2VTaDBhR2x6TENCaGNtZHpLVnh1SUNBZ0lIMHBYRzRnSUgxY2JuMWNiaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTEU5QlFVOHNVMEZCVTBFc1UwRkJVMEVzUTBGQlEwTXNSVUZCUlN4RlFVRkZPMFZCUXpWQ0xFOUJRVThzV1VGQldUdEpRVU5xUWp0SlFVTkJMRWxCUVVsRExGRkJRVkVzUjBGQlIwTXNVMEZCVXl4RFFVRkRRU3hUUVVGVExFTkJRVU5ETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNN08wbEJSVGxETzBsQlEwRXNTVUZCU1N4UFFVRlBSaXhSUVVGUkxFdEJRVXNzVlVGQlZTeEZRVUZGTzAxQlEyeERMRTlCUVU5RUxFVkJRVVVzUTBGQlEwa3NTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSVVlzVTBGQlV5eERRVUZETzBsQlEyeERPenRKUVVWQk8wbEJRMEU3U1VGRFFTeEpRVUZKUnl4SlFVRkpMRWRCUVVjc1EwRkJReXhIUVVGSFNDeFRRVUZUTEVOQlFVTTdTVUZGZWtJc1QwRkJUeXhKUVVGSlNTeFBRVUZQTEVOQlFVTXNRMEZCUTBNc1QwRkJUeXhGUVVGRlF5eE5RVUZOTEV0QlFVczdUVUZEZEVNN1RVRkRRVWdzU1VGQlNTeERRVUZEU1N4SlFVRkpMRU5CUVVNc1EwRkJRME1zUjBGQlJ5eEZRVUZGUXl4TFFVRkxMRXRCUVVzN1VVRkRlRUlzU1VGQlNVUXNSMEZCUnl4RlFVRkZPMVZCUTFBc1QwRkJUMFlzVFVGQlRTeERRVUZEUlN4SFFVRkhMRU5CUVVNN1VVRkRjRUk3VVVGRlFVZ3NUMEZCVHl4RFFVRkRTU3hMUVVGTExFTkJRVU03VFVGRGFFSXNRMEZCUXl4RFFVRkRPenROUVVWR08wMUJRMEZZTEVWQlFVVXNRMEZCUTBrc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJVTXNTVUZCU1N4RFFVRkRPMGxCUTNSQ0xFTkJRVU1zUTBGQlF6dEZRVU5LTEVOQlFVTTdRVUZEU0NKOSJdLCJuYW1lcyI6WyJwcm9taXNpZnkiLCJmbiIsImNhbGxiYWNrIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJhcmdzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwdXNoIiwiZXJyIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/promisify.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/signing.mjs":
/*!*************************************************!*\
  !*** ./node_modules/minio/dist/esm/signing.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postPresignSignatureV4: () => (/* binding */ postPresignSignatureV4),\n/* harmony export */   presignSignatureV4: () => (/* binding */ presignSignatureV4),\n/* harmony export */   signV4: () => (/* binding */ signV4),\n/* harmony export */   signV4ByServiceName: () => (/* binding */ signV4ByServiceName)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.mjs */ \"(rsc)/./node_modules/minio/dist/esm/errors.mjs\");\n/* harmony import */ var _internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/helper.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\");\n/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2016 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \n\n\nconst signV4Algorithm = \"AWS4-HMAC-SHA256\";\n// getCanonicalRequest generate a canonical request of style.\n//\n// canonicalRequest =\n//  <HTTPMethod>\\n\n//  <CanonicalURI>\\n\n//  <CanonicalQueryString>\\n\n//  <CanonicalHeaders>\\n\n//  <SignedHeaders>\\n\n//  <HashedPayload>\n//\nfunction getCanonicalRequest(method, path, headers, signedHeaders, hashedPayload) {\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(method)) {\n        throw new TypeError('method should be of type \"string\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(path)) {\n        throw new TypeError('path should be of type \"string\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isObject)(headers)) {\n        throw new TypeError('headers should be of type \"object\"');\n    }\n    if (!Array.isArray(signedHeaders)) {\n        throw new TypeError('signedHeaders should be of type \"array\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(hashedPayload)) {\n        throw new TypeError('hashedPayload should be of type \"string\"');\n    }\n    const headersArray = signedHeaders.reduce((acc, i)=>{\n        // Trim spaces from the value (required by V4 spec)\n        const val = `${headers[i]}`.replace(/ +/g, \" \");\n        acc.push(`${i.toLowerCase()}:${val}`);\n        return acc;\n    }, []);\n    const requestResource = path.split(\"?\")[0];\n    let requestQuery = path.split(\"?\")[1];\n    if (!requestQuery) {\n        requestQuery = \"\";\n    }\n    if (requestQuery) {\n        requestQuery = requestQuery.split(\"&\").sort().map((element)=>!element.includes(\"=\") ? element + \"=\" : element).join(\"&\");\n    }\n    return [\n        method.toUpperCase(),\n        requestResource,\n        requestQuery,\n        headersArray.join(\"\\n\") + \"\\n\",\n        signedHeaders.join(\";\").toLowerCase(),\n        hashedPayload\n    ].join(\"\\n\");\n}\n// generate a credential string\nfunction getCredential(accessKey, region, requestDate, serviceName = \"s3\") {\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(accessKey)) {\n        throw new TypeError('accessKey should be of type \"string\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(region)) {\n        throw new TypeError('region should be of type \"string\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isObject)(requestDate)) {\n        throw new TypeError('requestDate should be of type \"object\"');\n    }\n    return `${accessKey}/${(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.getScope)(region, requestDate, serviceName)}`;\n}\n// Returns signed headers array - alphabetically sorted\nfunction getSignedHeaders(headers) {\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isObject)(headers)) {\n        throw new TypeError('request should be of type \"object\"');\n    }\n    // Excerpts from @lsegal - https://github.com/aws/aws-sdk-js/issues/659#issuecomment-120477258\n    //\n    //  User-Agent:\n    //\n    //      This is ignored from signing because signing this causes problems with generating pre-signed URLs\n    //      (that are executed by other agents) or when customers pass requests through proxies, which may\n    //      modify the user-agent.\n    //\n    //  Content-Length:\n    //\n    //      This is ignored from signing because generating a pre-signed URL should not provide a content-length\n    //      constraint, specifically when vending a S3 pre-signed PUT URL. The corollary to this is that when\n    //      sending regular requests (non-pre-signed), the signature contains a checksum of the body, which\n    //      implicitly validates the payload length (since changing the number of bytes would change the checksum)\n    //      and therefore this header is not valuable in the signature.\n    //\n    //  Content-Type:\n    //\n    //      Signing this header causes quite a number of problems in browser environments, where browsers\n    //      like to modify and normalize the content-type header in different ways. There is more information\n    //      on this in https://github.com/aws/aws-sdk-js/issues/244. Avoiding this field simplifies logic\n    //      and reduces the possibility of future bugs\n    //\n    //  Authorization:\n    //\n    //      Is skipped for obvious reasons\n    const ignoredHeaders = [\n        \"authorization\",\n        \"content-length\",\n        \"content-type\",\n        \"user-agent\"\n    ];\n    return Object.keys(headers).filter((header)=>!ignoredHeaders.includes(header)).sort();\n}\n// returns the key used for calculating signature\nfunction getSigningKey(date, region, secretKey, serviceName = \"s3\") {\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isObject)(date)) {\n        throw new TypeError('date should be of type \"object\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(region)) {\n        throw new TypeError('region should be of type \"string\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(secretKey)) {\n        throw new TypeError('secretKey should be of type \"string\"');\n    }\n    const dateLine = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.makeDateShort)(date);\n    const hmac1 = crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac(\"sha256\", \"AWS4\" + secretKey).update(dateLine).digest(), hmac2 = crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac(\"sha256\", hmac1).update(region).digest(), hmac3 = crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac(\"sha256\", hmac2).update(serviceName).digest();\n    return crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac(\"sha256\", hmac3).update(\"aws4_request\").digest();\n}\n// returns the string that needs to be signed\nfunction getStringToSign(canonicalRequest, requestDate, region, serviceName = \"s3\") {\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(canonicalRequest)) {\n        throw new TypeError('canonicalRequest should be of type \"string\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isObject)(requestDate)) {\n        throw new TypeError('requestDate should be of type \"object\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(region)) {\n        throw new TypeError('region should be of type \"string\"');\n    }\n    const hash = crypto__WEBPACK_IMPORTED_MODULE_0__.createHash(\"sha256\").update(canonicalRequest).digest(\"hex\");\n    const scope = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.getScope)(region, requestDate, serviceName);\n    const stringToSign = [\n        signV4Algorithm,\n        (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.makeDateLong)(requestDate),\n        scope,\n        hash\n    ];\n    return stringToSign.join(\"\\n\");\n}\n// calculate the signature of the POST policy\nfunction postPresignSignatureV4(region, date, secretKey, policyBase64) {\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(region)) {\n        throw new TypeError('region should be of type \"string\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isObject)(date)) {\n        throw new TypeError('date should be of type \"object\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(secretKey)) {\n        throw new TypeError('secretKey should be of type \"string\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(policyBase64)) {\n        throw new TypeError('policyBase64 should be of type \"string\"');\n    }\n    const signingKey = getSigningKey(date, region, secretKey);\n    return crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac(\"sha256\", signingKey).update(policyBase64).digest(\"hex\").toLowerCase();\n}\n// Returns the authorization header\nfunction signV4(request, accessKey, secretKey, region, requestDate, sha256sum, serviceName = \"s3\") {\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isObject)(request)) {\n        throw new TypeError('request should be of type \"object\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(accessKey)) {\n        throw new TypeError('accessKey should be of type \"string\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(secretKey)) {\n        throw new TypeError('secretKey should be of type \"string\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(region)) {\n        throw new TypeError('region should be of type \"string\"');\n    }\n    if (!accessKey) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.AccessKeyRequiredError(\"accessKey is required for signing\");\n    }\n    if (!secretKey) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.SecretKeyRequiredError(\"secretKey is required for signing\");\n    }\n    const signedHeaders = getSignedHeaders(request.headers);\n    const canonicalRequest = getCanonicalRequest(request.method, request.path, request.headers, signedHeaders, sha256sum);\n    const serviceIdentifier = serviceName || \"s3\";\n    const stringToSign = getStringToSign(canonicalRequest, requestDate, region, serviceIdentifier);\n    const signingKey = getSigningKey(requestDate, region, secretKey, serviceIdentifier);\n    const credential = getCredential(accessKey, region, requestDate, serviceIdentifier);\n    const signature = crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac(\"sha256\", signingKey).update(stringToSign).digest(\"hex\").toLowerCase();\n    return `${signV4Algorithm} Credential=${credential}, SignedHeaders=${signedHeaders.join(\";\").toLowerCase()}, Signature=${signature}`;\n}\nfunction signV4ByServiceName(request, accessKey, secretKey, region, requestDate, contentSha256, serviceName = \"s3\") {\n    return signV4(request, accessKey, secretKey, region, requestDate, contentSha256, serviceName);\n}\n// returns a presigned URL string\nfunction presignSignatureV4(request, accessKey, secretKey, sessionToken, region, requestDate, expires) {\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isObject)(request)) {\n        throw new TypeError('request should be of type \"object\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(accessKey)) {\n        throw new TypeError('accessKey should be of type \"string\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(secretKey)) {\n        throw new TypeError('secretKey should be of type \"string\"');\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(region)) {\n        throw new TypeError('region should be of type \"string\"');\n    }\n    if (!accessKey) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.AccessKeyRequiredError(\"accessKey is required for presigning\");\n    }\n    if (!secretKey) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.SecretKeyRequiredError(\"secretKey is required for presigning\");\n    }\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.isNumber)(expires)) {\n        throw new TypeError('expires should be of type \"number\"');\n    }\n    if (expires < 1) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.ExpiresParamError(\"expires param cannot be less than 1 seconds\");\n    }\n    if (expires > 604800) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_1__.ExpiresParamError(\"expires param cannot be greater than 7 days\");\n    }\n    const iso8601Date = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.makeDateLong)(requestDate);\n    const signedHeaders = getSignedHeaders(request.headers);\n    const credential = getCredential(accessKey, region, requestDate);\n    const hashedPayload = \"UNSIGNED-PAYLOAD\";\n    const requestQuery = [];\n    requestQuery.push(`X-Amz-Algorithm=${signV4Algorithm}`);\n    requestQuery.push(`X-Amz-Credential=${(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.uriEscape)(credential)}`);\n    requestQuery.push(`X-Amz-Date=${iso8601Date}`);\n    requestQuery.push(`X-Amz-Expires=${expires}`);\n    requestQuery.push(`X-Amz-SignedHeaders=${(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.uriEscape)(signedHeaders.join(\";\").toLowerCase())}`);\n    if (sessionToken) {\n        requestQuery.push(`X-Amz-Security-Token=${(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_2__.uriEscape)(sessionToken)}`);\n    }\n    const resource = request.path.split(\"?\")[0];\n    let query = request.path.split(\"?\")[1];\n    if (query) {\n        query = query + \"&\" + requestQuery.join(\"&\");\n    } else {\n        query = requestQuery.join(\"&\");\n    }\n    const path = resource + \"?\" + query;\n    const canonicalRequest = getCanonicalRequest(request.method, path, request.headers, signedHeaders, hashedPayload);\n    const stringToSign = getStringToSign(canonicalRequest, requestDate, region);\n    const signingKey = getSigningKey(requestDate, region, secretKey);\n    const signature = crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac(\"sha256\", signingKey).update(stringToSign).digest(\"hex\").toLowerCase();\n    return request.protocol + \"//\" + request.headers.host + path + `&X-Amz-Signature=${signature}`;\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/signing.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/transformers.mjs":
/*!******************************************************!*\
  !*** ./node_modules/minio/dist/esm/transformers.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bucketEncryptionTransformer: () => (/* binding */ bucketEncryptionTransformer),\n/* harmony export */   bucketVersioningTransformer: () => (/* binding */ bucketVersioningTransformer),\n/* harmony export */   getBucketNotificationTransformer: () => (/* binding */ getBucketNotificationTransformer),\n/* harmony export */   getCompleteMultipartTransformer: () => (/* binding */ getCompleteMultipartTransformer),\n/* harmony export */   getConcater: () => (/* binding */ getConcater),\n/* harmony export */   getCopyObjectTransformer: () => (/* binding */ getCopyObjectTransformer),\n/* harmony export */   getHashSummer: () => (/* binding */ getHashSummer),\n/* harmony export */   getListMultipartTransformer: () => (/* binding */ getListMultipartTransformer),\n/* harmony export */   getListObjectsTransformer: () => (/* binding */ getListObjectsTransformer),\n/* harmony export */   getListObjectsV2Transformer: () => (/* binding */ getListObjectsV2Transformer),\n/* harmony export */   getListObjectsV2WithMetadataTransformer: () => (/* binding */ getListObjectsV2WithMetadataTransformer),\n/* harmony export */   getNotificationTransformer: () => (/* binding */ getNotificationTransformer),\n/* harmony export */   getTagsTransformer: () => (/* binding */ getTagsTransformer),\n/* harmony export */   lifecycleTransformer: () => (/* binding */ lifecycleTransformer),\n/* harmony export */   objectLegalHoldTransformer: () => (/* binding */ objectLegalHoldTransformer),\n/* harmony export */   objectLockTransformer: () => (/* binding */ objectLockTransformer),\n/* harmony export */   objectRetentionTransformer: () => (/* binding */ objectRetentionTransformer),\n/* harmony export */   removeObjectsTransformer: () => (/* binding */ removeObjectsTransformer),\n/* harmony export */   selectObjectContentTransformer: () => (/* binding */ selectObjectContentTransformer),\n/* harmony export */   uploadPartTransformer: () => (/* binding */ uploadPartTransformer)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var json_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! json-stream */ \"(rsc)/./node_modules/json-stream/lib/json-stream.js\");\n/* harmony import */ var through2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! through2 */ \"(rsc)/./node_modules/through2/through2.js\");\n/* harmony import */ var _internal_helper_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/helper.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\");\n/* harmony import */ var _xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./xml-parsers.mjs */ \"(rsc)/./node_modules/minio/dist/esm/xml-parsers.mjs\");\n/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015, 2016 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \n\n\n\n\n// getConcater returns a stream that concatenates the input and emits\n// the concatenated output when 'end' has reached. If an optional\n// parser function is passed upon reaching the 'end' of the stream,\n// `parser(concatenated_data)` will be emitted.\nfunction getConcater(parser, emitError) {\n    var objectMode = false;\n    var bufs = [];\n    if (parser && !(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_3__.isFunction)(parser)) {\n        throw new TypeError('parser should be of type \"function\"');\n    }\n    if (parser) {\n        objectMode = true;\n    }\n    return through2__WEBPACK_IMPORTED_MODULE_2__({\n        objectMode\n    }, function(chunk, enc, cb) {\n        bufs.push(chunk);\n        cb();\n    }, function(cb) {\n        if (emitError) {\n            cb(parser(Buffer.concat(bufs).toString()));\n            // cb(e) would mean we have to emit 'end' by explicitly calling this.push(null)\n            this.push(null);\n            return;\n        }\n        if (bufs.length) {\n            if (parser) {\n                this.push(parser(Buffer.concat(bufs).toString()));\n            } else {\n                this.push(Buffer.concat(bufs));\n            }\n        }\n        cb();\n    });\n}\n// A through stream that calculates md5sum and sha256sum\nfunction getHashSummer(enableSHA256) {\n    var md5 = crypto__WEBPACK_IMPORTED_MODULE_0__.createHash(\"md5\");\n    var sha256 = crypto__WEBPACK_IMPORTED_MODULE_0__.createHash(\"sha256\");\n    return through2__WEBPACK_IMPORTED_MODULE_2__.obj(function(chunk, enc, cb) {\n        if (enableSHA256) {\n            sha256.update(chunk);\n        } else {\n            md5.update(chunk);\n        }\n        cb();\n    }, function(cb) {\n        var md5sum = \"\";\n        var sha256sum = \"\";\n        if (enableSHA256) {\n            sha256sum = sha256.digest(\"hex\");\n        } else {\n            md5sum = md5.digest(\"base64\");\n        }\n        var hashData = {\n            md5sum,\n            sha256sum\n        };\n        this.push(hashData);\n        this.push(null);\n        cb();\n    });\n}\n// Following functions return a stream object that parses XML\n// and emits suitable Javascript objects.\n// Parses CopyObject response.\nfunction getCopyObjectTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseCopyObject);\n}\n// Parses listMultipartUploads response.\nfunction getListMultipartTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseListMultipart);\n}\n// Parses listObjects response.\nfunction getListObjectsTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseListObjects);\n}\n// Parses listObjects response.\nfunction getListObjectsV2Transformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseListObjectsV2);\n}\n// Parses listObjects with metadata response.\nfunction getListObjectsV2WithMetadataTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseListObjectsV2WithMetadata);\n}\n// Parses completeMultipartUpload response.\nfunction getCompleteMultipartTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseCompleteMultipart);\n}\n// Parses GET/SET BucketNotification response\nfunction getBucketNotificationTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseBucketNotification);\n}\n// Parses a notification.\nfunction getNotificationTransformer() {\n    // This will parse and return each object.\n    return new json_stream__WEBPACK_IMPORTED_MODULE_1__();\n}\nfunction bucketVersioningTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseBucketVersioningConfig);\n}\nfunction getTagsTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseTagging);\n}\nfunction lifecycleTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseLifecycleConfig);\n}\nfunction objectLockTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseObjectLockConfig);\n}\nfunction objectRetentionTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseObjectRetentionConfig);\n}\nfunction bucketEncryptionTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseBucketEncryptionConfig);\n}\nfunction objectLegalHoldTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.parseObjectLegalHoldConfig);\n}\nfunction uploadPartTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.uploadPartParser);\n}\nfunction selectObjectContentTransformer() {\n    return getConcater();\n}\nfunction removeObjectsTransformer() {\n    return getConcater(_xml_parsers_mjs__WEBPACK_IMPORTED_MODULE_4__.removeObjectsParser);\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/transformers.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/minio/dist/esm/xml-parsers.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/minio/dist/esm/xml-parsers.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseBucketEncryptionConfig: () => (/* binding */ parseBucketEncryptionConfig),\n/* harmony export */   parseBucketNotification: () => (/* binding */ parseBucketNotification),\n/* harmony export */   parseBucketVersioningConfig: () => (/* binding */ parseBucketVersioningConfig),\n/* harmony export */   parseCompleteMultipart: () => (/* binding */ parseCompleteMultipart),\n/* harmony export */   parseCopyObject: () => (/* binding */ parseCopyObject),\n/* harmony export */   parseLifecycleConfig: () => (/* binding */ parseLifecycleConfig),\n/* harmony export */   parseListMultipart: () => (/* binding */ parseListMultipart),\n/* harmony export */   parseListObjects: () => (/* binding */ parseListObjects),\n/* harmony export */   parseListObjectsV2: () => (/* binding */ parseListObjectsV2),\n/* harmony export */   parseListObjectsV2WithMetadata: () => (/* binding */ parseListObjectsV2WithMetadata),\n/* harmony export */   parseObjectLegalHoldConfig: () => (/* binding */ parseObjectLegalHoldConfig),\n/* harmony export */   parseObjectLockConfig: () => (/* binding */ parseObjectLockConfig),\n/* harmony export */   parseObjectRetentionConfig: () => (/* binding */ parseObjectRetentionConfig),\n/* harmony export */   parseSelectObjectContentResponse: () => (/* binding */ parseSelectObjectContentResponse),\n/* harmony export */   parseTagging: () => (/* binding */ parseTagging),\n/* harmony export */   removeObjectsParser: () => (/* binding */ removeObjectsParser),\n/* harmony export */   uploadPartParser: () => (/* binding */ uploadPartParser)\n/* harmony export */ });\n/* harmony import */ var buffer_crc32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer-crc32 */ \"(rsc)/./node_modules/buffer-crc32/index.js\");\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fast-xml-parser */ \"(rsc)/./node_modules/fast-xml-parser/src/fxp.js\");\n/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.mjs */ \"(rsc)/./node_modules/minio/dist/esm/errors.mjs\");\n/* harmony import */ var _helpers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.mjs */ \"(rsc)/./node_modules/minio/dist/esm/helpers.mjs\");\n/* harmony import */ var _internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/helper.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/helper.mjs\");\n/* harmony import */ var _internal_type_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/type.mjs */ \"(rsc)/./node_modules/minio/dist/esm/internal/type.mjs\");\n/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \n\n\n\n\n\nconst fxpWithoutNumParser = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_1__.XMLParser({\n    numberParseOptions: {\n        skipLike: /./\n    }\n});\n// parse XML response for copy object\nfunction parseCopyObject(xml) {\n    var result = {\n        etag: \"\",\n        lastModified: \"\"\n    };\n    var xmlobj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    if (!xmlobj.CopyObjectResult) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_2__.InvalidXMLError('Missing tag: \"CopyObjectResult\"');\n    }\n    xmlobj = xmlobj.CopyObjectResult;\n    if (xmlobj.ETag) {\n        result.etag = xmlobj.ETag.replace(/^\"/g, \"\").replace(/\"$/g, \"\").replace(/^&quot;/g, \"\").replace(/&quot;$/g, \"\").replace(/^&#34;/g, \"\").replace(/&#34;$/g, \"\");\n    }\n    if (xmlobj.LastModified) {\n        result.lastModified = new Date(xmlobj.LastModified);\n    }\n    return result;\n}\n// parse XML response for listing in-progress multipart uploads\nfunction parseListMultipart(xml) {\n    var result = {\n        uploads: [],\n        prefixes: [],\n        isTruncated: false\n    };\n    var xmlobj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    if (!xmlobj.ListMultipartUploadsResult) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_2__.InvalidXMLError('Missing tag: \"ListMultipartUploadsResult\"');\n    }\n    xmlobj = xmlobj.ListMultipartUploadsResult;\n    if (xmlobj.IsTruncated) {\n        result.isTruncated = xmlobj.IsTruncated;\n    }\n    if (xmlobj.NextKeyMarker) {\n        result.nextKeyMarker = xmlobj.NextKeyMarker;\n    }\n    if (xmlobj.NextUploadIdMarker) {\n        result.nextUploadIdMarker = xmlobj.nextUploadIdMarker || \"\";\n    }\n    if (xmlobj.CommonPrefixes) {\n        (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.CommonPrefixes).forEach((prefix)=>{\n            result.prefixes.push({\n                prefix: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeObjectKey)((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(prefix.Prefix)[0])\n            });\n        });\n    }\n    if (xmlobj.Upload) {\n        (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.Upload).forEach((upload)=>{\n            var key = upload.Key;\n            var uploadId = upload.UploadId;\n            var initiator = {\n                id: upload.Initiator.ID,\n                displayName: upload.Initiator.DisplayName\n            };\n            var owner = {\n                id: upload.Owner.ID,\n                displayName: upload.Owner.DisplayName\n            };\n            var storageClass = upload.StorageClass;\n            var initiated = new Date(upload.Initiated);\n            result.uploads.push({\n                key,\n                uploadId,\n                initiator,\n                owner,\n                storageClass,\n                initiated\n            });\n        });\n    }\n    return result;\n}\n// parse XML response to list all the owned buckets\n// parse XML response for bucket notification\nfunction parseBucketNotification(xml) {\n    var result = {\n        TopicConfiguration: [],\n        QueueConfiguration: [],\n        CloudFunctionConfiguration: []\n    };\n    // Parse the events list\n    var genEvents = function(events) {\n        var result = [];\n        if (events) {\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(events).forEach((s3event)=>{\n                result.push(s3event);\n            });\n        }\n        return result;\n    };\n    // Parse all filter rules\n    var genFilterRules = function(filters) {\n        var result = [];\n        if (filters) {\n            filters = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(filters);\n            if (filters[0].S3Key) {\n                filters[0].S3Key = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(filters[0].S3Key);\n                if (filters[0].S3Key[0].FilterRule) {\n                    (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(filters[0].S3Key[0].FilterRule).forEach((rule)=>{\n                        var Name = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(rule.Name)[0];\n                        var Value = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(rule.Value)[0];\n                        result.push({\n                            Name,\n                            Value\n                        });\n                    });\n                }\n            }\n        }\n        return result;\n    };\n    var xmlobj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    xmlobj = xmlobj.NotificationConfiguration;\n    // Parse all topic configurations in the xml\n    if (xmlobj.TopicConfiguration) {\n        (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.TopicConfiguration).forEach((config)=>{\n            var Id = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(config.Id)[0];\n            var Topic = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(config.Topic)[0];\n            var Event = genEvents(config.Event);\n            var Filter = genFilterRules(config.Filter);\n            result.TopicConfiguration.push({\n                Id,\n                Topic,\n                Event,\n                Filter\n            });\n        });\n    }\n    // Parse all topic configurations in the xml\n    if (xmlobj.QueueConfiguration) {\n        (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.QueueConfiguration).forEach((config)=>{\n            var Id = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(config.Id)[0];\n            var Queue = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(config.Queue)[0];\n            var Event = genEvents(config.Event);\n            var Filter = genFilterRules(config.Filter);\n            result.QueueConfiguration.push({\n                Id,\n                Queue,\n                Event,\n                Filter\n            });\n        });\n    }\n    // Parse all QueueConfiguration arrays\n    if (xmlobj.CloudFunctionConfiguration) {\n        (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.CloudFunctionConfiguration).forEach((config)=>{\n            var Id = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(config.Id)[0];\n            var CloudFunction = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(config.CloudFunction)[0];\n            var Event = genEvents(config.Event);\n            var Filter = genFilterRules(config.Filter);\n            result.CloudFunctionConfiguration.push({\n                Id,\n                CloudFunction,\n                Event,\n                Filter\n            });\n        });\n    }\n    return result;\n}\n// parse XML response when a multipart upload is completed\nfunction parseCompleteMultipart(xml) {\n    var xmlobj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml).CompleteMultipartUploadResult;\n    if (xmlobj.Location) {\n        var location = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.Location)[0];\n        var bucket = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.Bucket)[0];\n        var key = xmlobj.Key;\n        var etag = xmlobj.ETag.replace(/^\"/g, \"\").replace(/\"$/g, \"\").replace(/^&quot;/g, \"\").replace(/&quot;$/g, \"\").replace(/^&#34;/g, \"\").replace(/&#34;$/g, \"\");\n        return {\n            location,\n            bucket,\n            key,\n            etag\n        };\n    }\n    // Complete Multipart can return XML Error after a 200 OK response\n    if (xmlobj.Code && xmlobj.Message) {\n        var errCode = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.Code)[0];\n        var errMessage = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.Message)[0];\n        return {\n            errCode,\n            errMessage\n        };\n    }\n}\nconst formatObjInfo = (content, opts = {})=>{\n    let { Key, LastModified, ETag, Size, VersionId, IsLatest } = content;\n    if (!(0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isObject)(opts)) {\n        opts = {};\n    }\n    const name = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeObjectKey)((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(Key)[0]);\n    const lastModified = new Date((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(LastModified)[0]);\n    const etag = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeETag)((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(ETag)[0]);\n    const size = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeSize)(Size);\n    return {\n        name,\n        lastModified,\n        etag,\n        size,\n        versionId: VersionId,\n        isLatest: IsLatest,\n        isDeleteMarker: opts.IsDeleteMarker ? opts.IsDeleteMarker : false\n    };\n};\n// parse XML response for list objects in a bucket\nfunction parseListObjects(xml) {\n    var result = {\n        objects: [],\n        isTruncated: false\n    };\n    let isTruncated = false;\n    let nextMarker, nextVersionKeyMarker;\n    const xmlobj = fxpWithoutNumParser.parse(xml);\n    const parseCommonPrefixesEntity = (responseEntity)=>{\n        if (responseEntity) {\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(responseEntity).forEach((commonPrefix)=>{\n                result.objects.push({\n                    prefix: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeObjectKey)((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(commonPrefix.Prefix)[0]),\n                    size: 0\n                });\n            });\n        }\n    };\n    const listBucketResult = xmlobj.ListBucketResult;\n    const listVersionsResult = xmlobj.ListVersionsResult;\n    if (listBucketResult) {\n        if (listBucketResult.IsTruncated) {\n            isTruncated = listBucketResult.IsTruncated;\n        }\n        if (listBucketResult.Contents) {\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(listBucketResult.Contents).forEach((content)=>{\n                const name = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeObjectKey)((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(content.Key)[0]);\n                const lastModified = new Date((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(content.LastModified)[0]);\n                const etag = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeETag)((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(content.ETag)[0]);\n                const size = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeSize)(content.Size);\n                result.objects.push({\n                    name,\n                    lastModified,\n                    etag,\n                    size\n                });\n            });\n        }\n        if (listBucketResult.NextMarker) {\n            nextMarker = listBucketResult.NextMarker;\n        }\n        parseCommonPrefixesEntity(listBucketResult.CommonPrefixes);\n    }\n    if (listVersionsResult) {\n        if (listVersionsResult.IsTruncated) {\n            isTruncated = listVersionsResult.IsTruncated;\n        }\n        if (listVersionsResult.Version) {\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(listVersionsResult.Version).forEach((content)=>{\n                result.objects.push(formatObjInfo(content));\n            });\n        }\n        if (listVersionsResult.DeleteMarker) {\n            (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(listVersionsResult.DeleteMarker).forEach((content)=>{\n                result.objects.push(formatObjInfo(content, {\n                    IsDeleteMarker: true\n                }));\n            });\n        }\n        if (listVersionsResult.NextKeyMarker) {\n            nextVersionKeyMarker = listVersionsResult.NextKeyMarker;\n        }\n        if (listVersionsResult.NextVersionIdMarker) {\n            result.versionIdMarker = listVersionsResult.NextVersionIdMarker;\n        }\n        parseCommonPrefixesEntity(listVersionsResult.CommonPrefixes);\n    }\n    result.isTruncated = isTruncated;\n    if (isTruncated) {\n        result.nextMarker = nextVersionKeyMarker || nextMarker;\n    }\n    return result;\n}\n// parse XML response for list objects v2 in a bucket\nfunction parseListObjectsV2(xml) {\n    var result = {\n        objects: [],\n        isTruncated: false\n    };\n    var xmlobj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    if (!xmlobj.ListBucketResult) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_2__.InvalidXMLError('Missing tag: \"ListBucketResult\"');\n    }\n    xmlobj = xmlobj.ListBucketResult;\n    if (xmlobj.IsTruncated) {\n        result.isTruncated = xmlobj.IsTruncated;\n    }\n    if (xmlobj.NextContinuationToken) {\n        result.nextContinuationToken = xmlobj.NextContinuationToken;\n    }\n    if (xmlobj.Contents) {\n        (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.Contents).forEach((content)=>{\n            var name = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeObjectKey)((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(content.Key)[0]);\n            var lastModified = new Date(content.LastModified);\n            var etag = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeETag)(content.ETag);\n            var size = content.Size;\n            result.objects.push({\n                name,\n                lastModified,\n                etag,\n                size\n            });\n        });\n    }\n    if (xmlobj.CommonPrefixes) {\n        (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.CommonPrefixes).forEach((commonPrefix)=>{\n            result.objects.push({\n                prefix: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeObjectKey)((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(commonPrefix.Prefix)[0]),\n                size: 0\n            });\n        });\n    }\n    return result;\n}\n// parse XML response for list objects v2 with metadata in a bucket\nfunction parseListObjectsV2WithMetadata(xml) {\n    var result = {\n        objects: [],\n        isTruncated: false\n    };\n    var xmlobj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    if (!xmlobj.ListBucketResult) {\n        throw new _errors_mjs__WEBPACK_IMPORTED_MODULE_2__.InvalidXMLError('Missing tag: \"ListBucketResult\"');\n    }\n    xmlobj = xmlobj.ListBucketResult;\n    if (xmlobj.IsTruncated) {\n        result.isTruncated = xmlobj.IsTruncated;\n    }\n    if (xmlobj.NextContinuationToken) {\n        result.nextContinuationToken = xmlobj.NextContinuationToken;\n    }\n    if (xmlobj.Contents) {\n        (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.Contents).forEach((content)=>{\n            var name = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeObjectKey)(content.Key);\n            var lastModified = new Date(content.LastModified);\n            var etag = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeETag)(content.ETag);\n            var size = content.Size;\n            var metadata;\n            if (content.UserMetadata != null) {\n                metadata = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(content.UserMetadata)[0];\n            } else {\n                metadata = null;\n            }\n            result.objects.push({\n                name,\n                lastModified,\n                etag,\n                size,\n                metadata\n            });\n        });\n    }\n    if (xmlobj.CommonPrefixes) {\n        (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlobj.CommonPrefixes).forEach((commonPrefix)=>{\n            result.objects.push({\n                prefix: (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeObjectKey)((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(commonPrefix.Prefix)[0]),\n                size: 0\n            });\n        });\n    }\n    return result;\n}\nfunction parseBucketVersioningConfig(xml) {\n    var xmlObj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    return xmlObj.VersioningConfiguration;\n}\nfunction parseTagging(xml) {\n    const xmlObj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    let result = [];\n    if (xmlObj.Tagging && xmlObj.Tagging.TagSet && xmlObj.Tagging.TagSet.Tag) {\n        const tagResult = xmlObj.Tagging.TagSet.Tag;\n        // if it is a single tag convert into an array so that the return value is always an array.\n        if ((0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.isObject)(tagResult)) {\n            result.push(tagResult);\n        } else {\n            result = tagResult;\n        }\n    }\n    return result;\n}\nfunction parseLifecycleConfig(xml) {\n    const xmlObj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    return xmlObj.LifecycleConfiguration;\n}\nfunction parseObjectLockConfig(xml) {\n    const xmlObj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    let lockConfigResult = {};\n    if (xmlObj.ObjectLockConfiguration) {\n        lockConfigResult = {\n            objectLockEnabled: xmlObj.ObjectLockConfiguration.ObjectLockEnabled\n        };\n        let retentionResp;\n        if (xmlObj.ObjectLockConfiguration && xmlObj.ObjectLockConfiguration.Rule && xmlObj.ObjectLockConfiguration.Rule.DefaultRetention) {\n            retentionResp = xmlObj.ObjectLockConfiguration.Rule.DefaultRetention || {};\n            lockConfigResult.mode = retentionResp.Mode;\n        }\n        if (retentionResp) {\n            const isUnitYears = retentionResp.Years;\n            if (isUnitYears) {\n                lockConfigResult.validity = isUnitYears;\n                lockConfigResult.unit = _internal_type_mjs__WEBPACK_IMPORTED_MODULE_5__.RETENTION_VALIDITY_UNITS.YEARS;\n            } else {\n                lockConfigResult.validity = retentionResp.Days;\n                lockConfigResult.unit = _internal_type_mjs__WEBPACK_IMPORTED_MODULE_5__.RETENTION_VALIDITY_UNITS.DAYS;\n            }\n        }\n        return lockConfigResult;\n    }\n}\nfunction parseObjectRetentionConfig(xml) {\n    const xmlObj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    const retentionConfig = xmlObj.Retention;\n    return {\n        mode: retentionConfig.Mode,\n        retainUntilDate: retentionConfig.RetainUntilDate\n    };\n}\nfunction parseBucketEncryptionConfig(xml) {\n    let encConfig = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    return encConfig;\n}\nfunction parseObjectLegalHoldConfig(xml) {\n    const xmlObj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    return xmlObj.LegalHold;\n}\nfunction uploadPartParser(xml) {\n    const xmlObj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    const respEl = xmlObj.CopyPartResult;\n    return respEl;\n}\nfunction removeObjectsParser(xml) {\n    const xmlObj = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.parseXml)(xml);\n    if (xmlObj.DeleteResult && xmlObj.DeleteResult.Error) {\n        // return errors as array always. as the response is object in case of single object passed in removeObjects\n        return (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(xmlObj.DeleteResult.Error);\n    }\n    return [];\n}\nfunction parseSelectObjectContentResponse(res) {\n    // extractHeaderType extracts the first half of the header message, the header type.\n    function extractHeaderType(stream) {\n        const headerNameLen = Buffer.from(stream.read(1)).readUInt8();\n        const headerNameWithSeparator = Buffer.from(stream.read(headerNameLen)).toString();\n        const splitBySeparator = (headerNameWithSeparator || \"\").split(\":\");\n        const headerName = splitBySeparator.length >= 1 ? splitBySeparator[1] : \"\";\n        return headerName;\n    }\n    function extractHeaderValue(stream) {\n        const bodyLen = Buffer.from(stream.read(2)).readUInt16BE();\n        const bodyName = Buffer.from(stream.read(bodyLen)).toString();\n        return bodyName;\n    }\n    const selectResults = new _helpers_mjs__WEBPACK_IMPORTED_MODULE_3__.SelectResults({}); // will be returned\n    const responseStream = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.readableStream)(res); // convert byte array to a readable responseStream\n    while(responseStream._readableState.length){\n        // Top level responseStream read tracker.\n        let msgCrcAccumulator; // accumulate from start of the message till the message crc start.\n        const totalByteLengthBuffer = Buffer.from(responseStream.read(4));\n        msgCrcAccumulator = buffer_crc32__WEBPACK_IMPORTED_MODULE_0__(totalByteLengthBuffer);\n        const headerBytesBuffer = Buffer.from(responseStream.read(4));\n        msgCrcAccumulator = buffer_crc32__WEBPACK_IMPORTED_MODULE_0__(headerBytesBuffer, msgCrcAccumulator);\n        const calculatedPreludeCrc = msgCrcAccumulator.readInt32BE(); // use it to check if any CRC mismatch in header itself.\n        const preludeCrcBuffer = Buffer.from(responseStream.read(4)); // read 4 bytes    i.e 4+4 =8 + 4 = 12 ( prelude + prelude crc)\n        msgCrcAccumulator = buffer_crc32__WEBPACK_IMPORTED_MODULE_0__(preludeCrcBuffer, msgCrcAccumulator);\n        const totalMsgLength = totalByteLengthBuffer.readInt32BE();\n        const headerLength = headerBytesBuffer.readInt32BE();\n        const preludeCrcByteValue = preludeCrcBuffer.readInt32BE();\n        if (preludeCrcByteValue !== calculatedPreludeCrc) {\n            // Handle Header CRC mismatch Error\n            throw new Error(`Header Checksum Mismatch, Prelude CRC of ${preludeCrcByteValue} does not equal expected CRC of ${calculatedPreludeCrc}`);\n        }\n        const headers = {};\n        if (headerLength > 0) {\n            const headerBytes = Buffer.from(responseStream.read(headerLength));\n            msgCrcAccumulator = buffer_crc32__WEBPACK_IMPORTED_MODULE_0__(headerBytes, msgCrcAccumulator);\n            const headerReaderStream = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.readableStream)(headerBytes);\n            while(headerReaderStream._readableState.length){\n                let headerTypeName = extractHeaderType(headerReaderStream);\n                headerReaderStream.read(1); // just read and ignore it.\n                headers[headerTypeName] = extractHeaderValue(headerReaderStream);\n            }\n        }\n        let payloadStream;\n        const payLoadLength = totalMsgLength - headerLength - 16;\n        if (payLoadLength > 0) {\n            const payLoadBuffer = Buffer.from(responseStream.read(payLoadLength));\n            msgCrcAccumulator = buffer_crc32__WEBPACK_IMPORTED_MODULE_0__(payLoadBuffer, msgCrcAccumulator);\n            // read the checksum early and detect any mismatch so we can avoid unnecessary further processing.\n            const messageCrcByteValue = Buffer.from(responseStream.read(4)).readInt32BE();\n            const calculatedCrc = msgCrcAccumulator.readInt32BE();\n            // Handle message CRC Error\n            if (messageCrcByteValue !== calculatedCrc) {\n                throw new Error(`Message Checksum Mismatch, Message CRC of ${messageCrcByteValue} does not equal expected CRC of ${calculatedCrc}`);\n            }\n            payloadStream = (0,_internal_helper_mjs__WEBPACK_IMPORTED_MODULE_4__.readableStream)(payLoadBuffer);\n        }\n        const messageType = headers[\"message-type\"];\n        switch(messageType){\n            case \"error\":\n                {\n                    const errorMessage = headers[\"error-code\"] + ':\"' + headers[\"error-message\"] + '\"';\n                    throw new Error(errorMessage);\n                }\n            case \"event\":\n                {\n                    const contentType = headers[\"content-type\"];\n                    const eventType = headers[\"event-type\"];\n                    switch(eventType){\n                        case \"End\":\n                            {\n                                selectResults.setResponse(res);\n                                return selectResults;\n                            }\n                        case \"Records\":\n                            {\n                                const readData = payloadStream.read(payLoadLength);\n                                selectResults.setRecords(readData);\n                                break;\n                            }\n                        case \"Progress\":\n                            {\n                                switch(contentType){\n                                    case \"text/xml\":\n                                        {\n                                            const progressData = payloadStream.read(payLoadLength);\n                                            selectResults.setProgress(progressData.toString());\n                                            break;\n                                        }\n                                    default:\n                                        {\n                                            const errorMessage = `Unexpected content-type ${contentType} sent for event-type Progress`;\n                                            throw new Error(errorMessage);\n                                        }\n                                }\n                            }\n                            break;\n                        case \"Stats\":\n                            {\n                                switch(contentType){\n                                    case \"text/xml\":\n                                        {\n                                            const statsData = payloadStream.read(payLoadLength);\n                                            selectResults.setStats(statsData.toString());\n                                            break;\n                                        }\n                                    default:\n                                        {\n                                            const errorMessage = `Unexpected content-type ${contentType} sent for event-type Stats`;\n                                            throw new Error(errorMessage);\n                                        }\n                                }\n                            }\n                            break;\n                        default:\n                            {\n                                // Continuation message: Not sure if it is supported. did not find a reference or any message in response.\n                                // It does not have a payload.\n                                const warningMessage = `Un implemented event detected  ${messageType}.`;\n                                // eslint-disable-next-line no-console\n                                console.warn(warningMessage);\n                            }\n                    } // eventType End\n                }\n        } // messageType End\n    } // Top Level Stream End\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minio/dist/esm/xml-parsers.mjs\n");

/***/ })

};
;