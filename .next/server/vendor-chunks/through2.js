"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/through2";
exports.ids = ["vendor-chunks/through2"];
exports.modules = {

/***/ "(rsc)/./node_modules/through2/through2.js":
/*!*******************************************!*\
  !*** ./node_modules/through2/through2.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Transform } = __webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\");\nfunction inherits(fn, sup) {\n    fn.super_ = sup;\n    fn.prototype = Object.create(sup.prototype, {\n        constructor: {\n            value: fn,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n}\n// create a new export function, used by both the main export and\n// the .ctor export, contains common logic for dealing with arguments\nfunction through2(construct) {\n    return (options, transform, flush)=>{\n        if (typeof options === \"function\") {\n            flush = transform;\n            transform = options;\n            options = {};\n        }\n        if (typeof transform !== \"function\") {\n            // noop\n            transform = (chunk, enc, cb)=>cb(null, chunk);\n        }\n        if (typeof flush !== \"function\") {\n            flush = null;\n        }\n        return construct(options, transform, flush);\n    };\n}\n// main export, just make me a transform stream!\nconst make = through2((options, transform, flush)=>{\n    const t2 = new Transform(options);\n    t2._transform = transform;\n    if (flush) {\n        t2._flush = flush;\n    }\n    return t2;\n});\n// make me a reusable prototype that I can `new`, or implicitly `new`\n// with a constructor call\nconst ctor = through2((options, transform, flush)=>{\n    function Through2(override) {\n        if (!(this instanceof Through2)) {\n            return new Through2(override);\n        }\n        this.options = Object.assign({}, options, override);\n        Transform.call(this, this.options);\n        this._transform = transform;\n        if (flush) {\n            this._flush = flush;\n        }\n    }\n    inherits(Through2, Transform);\n    return Through2;\n});\nconst obj = through2(function(options, transform, flush) {\n    const t2 = new Transform(Object.assign({\n        objectMode: true,\n        highWaterMark: 16\n    }, options));\n    t2._transform = transform;\n    if (flush) {\n        t2._flush = flush;\n    }\n    return t2;\n});\nmodule.exports = make;\nmodule.exports.ctor = ctor;\nmodule.exports.obj = obj;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGhyb3VnaDIvdGhyb3VnaDIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sRUFBRUEsU0FBUyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTlCLFNBQVNDLFNBQVVDLEVBQUUsRUFBRUMsR0FBRztJQUN4QkQsR0FBR0UsTUFBTSxHQUFHRDtJQUNaRCxHQUFHRyxTQUFTLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQ0osSUFBSUUsU0FBUyxFQUFFO1FBQzFDRyxhQUFhO1lBQUVDLE9BQU9QO1lBQUlRLFlBQVk7WUFBT0MsVUFBVTtZQUFNQyxjQUFjO1FBQUs7SUFDbEY7QUFDRjtBQUVBLGlFQUFpRTtBQUNqRSxxRUFBcUU7QUFDckUsU0FBU0MsU0FBVUMsU0FBUztJQUMxQixPQUFPLENBQUNDLFNBQVNDLFdBQVdDO1FBQzFCLElBQUksT0FBT0YsWUFBWSxZQUFZO1lBQ2pDRSxRQUFRRDtZQUNSQSxZQUFZRDtZQUNaQSxVQUFVLENBQUM7UUFDYjtRQUVBLElBQUksT0FBT0MsY0FBYyxZQUFZO1lBQ25DLE9BQU87WUFDUEEsWUFBWSxDQUFDRSxPQUFPQyxLQUFLQyxLQUFPQSxHQUFHLE1BQU1GO1FBQzNDO1FBRUEsSUFBSSxPQUFPRCxVQUFVLFlBQVk7WUFDL0JBLFFBQVE7UUFDVjtRQUVBLE9BQU9ILFVBQVVDLFNBQVNDLFdBQVdDO0lBQ3ZDO0FBQ0Y7QUFFQSxnREFBZ0Q7QUFDaEQsTUFBTUksT0FBT1IsU0FBUyxDQUFDRSxTQUFTQyxXQUFXQztJQUN6QyxNQUFNSyxLQUFLLElBQUl2QixVQUFVZ0I7SUFFekJPLEdBQUdDLFVBQVUsR0FBR1A7SUFFaEIsSUFBSUMsT0FBTztRQUNUSyxHQUFHRSxNQUFNLEdBQUdQO0lBQ2Q7SUFFQSxPQUFPSztBQUNUO0FBRUEscUVBQXFFO0FBQ3JFLDBCQUEwQjtBQUMxQixNQUFNRyxPQUFPWixTQUFTLENBQUNFLFNBQVNDLFdBQVdDO0lBQ3pDLFNBQVNTLFNBQVVDLFFBQVE7UUFDekIsSUFBSSxDQUFFLEtBQUksWUFBWUQsUUFBTyxHQUFJO1lBQy9CLE9BQU8sSUFBSUEsU0FBU0M7UUFDdEI7UUFFQSxJQUFJLENBQUNaLE9BQU8sR0FBR1QsT0FBT3NCLE1BQU0sQ0FBQyxDQUFDLEdBQUdiLFNBQVNZO1FBRTFDNUIsVUFBVThCLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDZCxPQUFPO1FBRWpDLElBQUksQ0FBQ1EsVUFBVSxHQUFHUDtRQUNsQixJQUFJQyxPQUFPO1lBQ1QsSUFBSSxDQUFDTyxNQUFNLEdBQUdQO1FBQ2hCO0lBQ0Y7SUFFQWhCLFNBQVN5QixVQUFVM0I7SUFFbkIsT0FBTzJCO0FBQ1Q7QUFFQSxNQUFNSSxNQUFNakIsU0FBUyxTQUFVRSxPQUFPLEVBQUVDLFNBQVMsRUFBRUMsS0FBSztJQUN0RCxNQUFNSyxLQUFLLElBQUl2QixVQUFVTyxPQUFPc0IsTUFBTSxDQUFDO1FBQUVHLFlBQVk7UUFBTUMsZUFBZTtJQUFHLEdBQUdqQjtJQUVoRk8sR0FBR0MsVUFBVSxHQUFHUDtJQUVoQixJQUFJQyxPQUFPO1FBQ1RLLEdBQUdFLE1BQU0sR0FBR1A7SUFDZDtJQUVBLE9BQU9LO0FBQ1Q7QUFFQVcsT0FBT0MsT0FBTyxHQUFHYjtBQUNqQlksbUJBQW1CLEdBQUdSO0FBQ3RCUSxrQkFBa0IsR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maWxlLW1hbmFnZW1lbnQtc3lzdGVtLy4vbm9kZV9tb2R1bGVzL3Rocm91Z2gyL3Rocm91Z2gyLmpzP2E4ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBUcmFuc2Zvcm0gfSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpXG5cbmZ1bmN0aW9uIGluaGVyaXRzIChmbiwgc3VwKSB7XG4gIGZuLnN1cGVyXyA9IHN1cFxuICBmbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cC5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH1cbiAgfSlcbn1cblxuLy8gY3JlYXRlIGEgbmV3IGV4cG9ydCBmdW5jdGlvbiwgdXNlZCBieSBib3RoIHRoZSBtYWluIGV4cG9ydCBhbmRcbi8vIHRoZSAuY3RvciBleHBvcnQsIGNvbnRhaW5zIGNvbW1vbiBsb2dpYyBmb3IgZGVhbGluZyB3aXRoIGFyZ3VtZW50c1xuZnVuY3Rpb24gdGhyb3VnaDIgKGNvbnN0cnVjdCkge1xuICByZXR1cm4gKG9wdGlvbnMsIHRyYW5zZm9ybSwgZmx1c2gpID0+IHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZsdXNoID0gdHJhbnNmb3JtXG4gICAgICB0cmFuc2Zvcm0gPSBvcHRpb25zXG4gICAgICBvcHRpb25zID0ge31cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRyYW5zZm9ybSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gbm9vcFxuICAgICAgdHJhbnNmb3JtID0gKGNodW5rLCBlbmMsIGNiKSA9PiBjYihudWxsLCBjaHVuaylcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGZsdXNoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmbHVzaCA9IG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4gY29uc3RydWN0KG9wdGlvbnMsIHRyYW5zZm9ybSwgZmx1c2gpXG4gIH1cbn1cblxuLy8gbWFpbiBleHBvcnQsIGp1c3QgbWFrZSBtZSBhIHRyYW5zZm9ybSBzdHJlYW0hXG5jb25zdCBtYWtlID0gdGhyb3VnaDIoKG9wdGlvbnMsIHRyYW5zZm9ybSwgZmx1c2gpID0+IHtcbiAgY29uc3QgdDIgPSBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpXG5cbiAgdDIuX3RyYW5zZm9ybSA9IHRyYW5zZm9ybVxuXG4gIGlmIChmbHVzaCkge1xuICAgIHQyLl9mbHVzaCA9IGZsdXNoXG4gIH1cblxuICByZXR1cm4gdDJcbn0pXG5cbi8vIG1ha2UgbWUgYSByZXVzYWJsZSBwcm90b3R5cGUgdGhhdCBJIGNhbiBgbmV3YCwgb3IgaW1wbGljaXRseSBgbmV3YFxuLy8gd2l0aCBhIGNvbnN0cnVjdG9yIGNhbGxcbmNvbnN0IGN0b3IgPSB0aHJvdWdoMigob3B0aW9ucywgdHJhbnNmb3JtLCBmbHVzaCkgPT4ge1xuICBmdW5jdGlvbiBUaHJvdWdoMiAob3ZlcnJpZGUpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVGhyb3VnaDIpKSB7XG4gICAgICByZXR1cm4gbmV3IFRocm91Z2gyKG92ZXJyaWRlKVxuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIG92ZXJyaWRlKVxuXG4gICAgVHJhbnNmb3JtLmNhbGwodGhpcywgdGhpcy5vcHRpb25zKVxuXG4gICAgdGhpcy5fdHJhbnNmb3JtID0gdHJhbnNmb3JtXG4gICAgaWYgKGZsdXNoKSB7XG4gICAgICB0aGlzLl9mbHVzaCA9IGZsdXNoXG4gICAgfVxuICB9XG5cbiAgaW5oZXJpdHMoVGhyb3VnaDIsIFRyYW5zZm9ybSlcblxuICByZXR1cm4gVGhyb3VnaDJcbn0pXG5cbmNvbnN0IG9iaiA9IHRocm91Z2gyKGZ1bmN0aW9uIChvcHRpb25zLCB0cmFuc2Zvcm0sIGZsdXNoKSB7XG4gIGNvbnN0IHQyID0gbmV3IFRyYW5zZm9ybShPYmplY3QuYXNzaWduKHsgb2JqZWN0TW9kZTogdHJ1ZSwgaGlnaFdhdGVyTWFyazogMTYgfSwgb3B0aW9ucykpXG5cbiAgdDIuX3RyYW5zZm9ybSA9IHRyYW5zZm9ybVxuXG4gIGlmIChmbHVzaCkge1xuICAgIHQyLl9mbHVzaCA9IGZsdXNoXG4gIH1cblxuICByZXR1cm4gdDJcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gbWFrZVxubW9kdWxlLmV4cG9ydHMuY3RvciA9IGN0b3Jcbm1vZHVsZS5leHBvcnRzLm9iaiA9IG9ialxuIl0sIm5hbWVzIjpbIlRyYW5zZm9ybSIsInJlcXVpcmUiLCJpbmhlcml0cyIsImZuIiwic3VwIiwic3VwZXJfIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInRocm91Z2gyIiwiY29uc3RydWN0Iiwib3B0aW9ucyIsInRyYW5zZm9ybSIsImZsdXNoIiwiY2h1bmsiLCJlbmMiLCJjYiIsIm1ha2UiLCJ0MiIsIl90cmFuc2Zvcm0iLCJfZmx1c2giLCJjdG9yIiwiVGhyb3VnaDIiLCJvdmVycmlkZSIsImFzc2lnbiIsImNhbGwiLCJvYmoiLCJvYmplY3RNb2RlIiwiaGlnaFdhdGVyTWFyayIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/through2/through2.js\n");

/***/ })

};
;